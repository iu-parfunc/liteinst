
  deactivation_costs = new ticks[max_probe_id]();
  activation_costs   = new ticks[max_probe_id]();

  ticks start, end;  
  ticks deactivation_sum = 0;
  ticks activation_sum = 0;

  FILE* fp1 = fopen("toggle_cost_deactivation.csv", "w");
  FILE* fp2 = fopen("toggle_cost_activation.csv", "w");

  int i = 0; 
  
  for (const auto& it : pr.pg_by_function) { 
    for (ProbeGroupInfo pgi : it.second) {
      start = getticks();
      p->deactivate(pgi); 
      end = getticks();

      deactivation_costs[i] = (end - start);

      // Filtering out outliers
      if (deactivation_costs[i] < 10000) {
        deactivation_sum += deactivation_costs[i];
        fprintf(fp1, "%d, %llu\n", i, deactivation_costs[i]);
      }
      i++;
    }
  }
 
  i = 0; 
  for (const auto& it : pr.pg_by_function) {
    for (ProbeGroupInfo pgi : it.second) { 
      start = getticks();
      p->activate(pgi);
      end = getticks();

      activation_costs[i] = (end - start);
    
      // Filtering out outliers
      if (activation_costs[i] < 10000) {
        activation_sum += activation_costs[i];
        fprintf(fp2, "%d, %llu\n", i, activation_costs[i]);
      }
      i ++;
    }
  }

  fprintf(stderr, "Number of functions : %ld\n", NUM_FUNCS);

  fprintf(stderr, "Probe deactivation cost estimate (cycles) : %llu\n", 
      deactivation_sum / max_probe_id);

  fprintf(stderr, "Probe activation cost estimate (cycles) : %llu\n", 
      activation_sum / max_probe_id);

  fclose(fp1);
  fclose(fp2);

  delete(p);
  delete(deactivation_costs);
  delete(activation_costs);

  exit(EXIT_SUCCESS);

}
