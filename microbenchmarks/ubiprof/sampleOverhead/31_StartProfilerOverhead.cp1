#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>
#include <time.h>

int global_x;

const int NANO_SECONDS_IN_SEC = 1000000000;

__attribute__ ((no_instrument_function))
static __inline__ unsigned long long getticks(void)
{
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
    return x;
}

struct timespec *timeSpecDiff(struct timespec *ts1, struct timespec *ts2)
{
  static struct timespec ts;
  ts.tv_sec = ts1->tv_sec - ts2->tv_sec;
  ts.tv_nsec = ts1->tv_nsec - ts2->tv_nsec;
  if (ts.tv_nsec < 0) {
      ts.tv_sec--;
      ts.tv_nsec += NANO_SECONDS_IN_SEC;
    }
  return &ts;
}

static double calibrateTicks()
{
  struct timespec begints, endts, diff;
  uint64_t begin = 0, end = 0;
  clock_gettime(CLOCK_MONOTONIC, &begints);
  begin = getticks();
  uint64_t i,result = 0;
  for (i = 0; i < 1000000; i++) {
    result += i;
  }
  end = getticks();
  clock_gettime(CLOCK_MONOTONIC, &endts);
  struct timespec *tmpts = timeSpecDiff(&endts, &begints);
  // uint64_t secElapsed = tmpts->tv_sec * NANO_SECONDS_IN_SEC + tmpts->tv_nsec / 1000000000L;
  //double ticksPerSec = (double)(end - begin)/(double)secElapsed;
  uint64_t nsecElapsed = tmpts->tv_sec * NANO_SECONDS_IN_SEC + tmpts->tv_nsec;
  printf("Nanos elapsed : %lu\n", nsecElapsed);
  printf("Cycles elapsed : %lu\n", (end - begin));
  double ticksPerSec = (double)(end - begin)/(double)nsecElapsed;
  printf("Ticks per nsec : %ld\n", ticksPerSec);
  return ticksPerSec;
}
