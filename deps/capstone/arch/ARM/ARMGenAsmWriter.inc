/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013> */

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O, MCRegisterInfo *MRI)
{
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1317U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1310U,	// BUNDLE
    1327U,	// LIFETIME_START
    1297U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// ABS
    5756U,	// ADCri
    5756U,	// ADCrr
    9852U,	// ADCrsi
    13948U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    5817U,	// ADDri
    5817U,	// ADDrr
    9913U,	// ADDrsi
    14009U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    18794U,	// ADR
    1090671288U,	// AESD
    1090671296U,	// AESE
    1107448485U,	// AESIMC
    1107448495U,	// AESMC
    5870U,	// ANDri
    5870U,	// ANDrr
    9966U,	// ANDrsi
    14062U,	// ANDrsr
    268696U,	// ASRi
    268696U,	// ASRr
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_I64
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_STORE_I64
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    26244U,	// BFC
    30665U,	// BFI
    5769U,	// BICri
    5769U,	// BICrr
    9865U,	// BICrsi
    13961U,	// BICrsr
    414537U,	// BKPT
    414517U,	// BL
    414570U,	// BLX
    1073777569U,	// BLX_pred
    414570U,	// BLXi
    1073776666U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    414566U,	// BX
    1073776603U,	// BXJ
    0U,	// BX_CALL
    564029U,	// BX_RET
    1073777469U,	// BX_pred
    1073776023U,	// Bcc
    2197858613U,	// CDP
    67809687U,	// CDP2
    2955U,	// CLREX
    19405U,	// CLZ
    18651U,	// CMNri
    18651U,	// CMNzrr
    26843U,	// CMNzrsi
    30939U,	// CMNzrsr
    18751U,	// CMPri
    18751U,	// CMPrr
    26943U,	// CMPrsi
    31039U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_STRUCT_BYVAL_I32
    414521U,	// CPS1p
    1157679598U,	// CPS2p
    83937774U,	// CPS3p
    33706710U,	// CRC32B
    33706718U,	// CRC32CB
    33706777U,	// CRC32CH
    33706839U,	// CRC32CW
    33706769U,	// CRC32H
    33706831U,	// CRC32W
    1073776462U,	// DBG
    54005U,	// DMB
    54010U,	// DSB
    6534U,	// EORri
    6534U,	// EORrr
    10630U,	// EORrsi
    14726U,	// EORrsr
    3322694374U,	// FCONSTD
    3322825446U,	// FCONSTS
    33573688U,	// FLDMXDB_UPD
    35585U,	// FLDMXIA
    33573633U,	// FLDMXIA_UPD
    1087986U,	// FMSTAT
    33573696U,	// FSTMXDB_UPD
    35593U,	// FSTMXIA
    33573641U,	// FSTMXIA_UPD
    1073777273U,	// HINT
    414532U,	// HLT
    58111U,	// ISB
    117766759U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    17731U,	// LDA
    17812U,	// LDAB
    19321U,	// LDAEX
    18012U,	// LDAEXB
    1207977736U,	// LDAEXD
    18349U,	// LDAEXH
    18269U,	// LDAH
    152220455U,	// LDC2L_OFFSET
    2316481319U,	// LDC2L_OPTION
    3390223143U,	// LDC2L_POST
    185774887U,	// LDC2L_PRE
    152220030U,	// LDC2_OFFSET
    2316480894U,	// LDC2_OPTION
    3390222718U,	// LDC2_POST
    185774462U,	// LDC2_PRE
    50362403U,	// LDCL_OFFSET
    50362403U,	// LDCL_OPTION
    50362403U,	// LDCL_POST
    50362403U,	// LDCL_PRE
    50361984U,	// LDC_OFFSET
    50361984U,	// LDC_OPTION
    50361984U,	// LDC_POST
    50361984U,	// LDC_PRE
    34119U,	// LDMDA
    33572167U,	// LDMDA_UPD
    34246U,	// LDMDB
    33572294U,	// LDMDB_UPD
    34986U,	// LDMIA
    0U,	// LDMIA_RET
    33573034U,	// LDMIA_UPD
    34265U,	// LDMIB
    33572313U,	// LDMIB_UPD
    281140U,	// LDRBT_POST
    68148U,	// LDRBT_POST_IMM
    68148U,	// LDRBT_POST_REG
    67059U,	// LDRB_POST_IMM
    67059U,	// LDRB_POST_REG
    30195U,	// LDRB_PRE_IMM
    67059U,	// LDRB_PRE_REG
    26099U,	// LDRBi12
    30195U,	// LDRBrs
    67314U,	// LDRD
    1207990002U,	// LDRD_PAIR
    42738U,	// LDRD_POST
    42738U,	// LDRD_PRE
    19333U,	// LDREX
    18026U,	// LDREXB
    1207977750U,	// LDREXD
    18363U,	// LDREXH
    30600U,	// LDRH
    31314U,	// LDRHTi
    68178U,	// LDRHTr
    67464U,	// LDRH_POST
    67464U,	// LDRH_PRE
    0U,	// LDRLIT_ga_abs
    0U,	// LDRLIT_ga_pcrel
    0U,	// LDRLIT_ga_pcrel_ldr
    30213U,	// LDRSB
    31296U,	// LDRSBTi
    68160U,	// LDRSBTr
    67077U,	// LDRSB_POST
    67077U,	// LDRSB_PRE
    30610U,	// LDRSH
    31326U,	// LDRSHTi
    68190U,	// LDRSHTr
    67474U,	// LDRSH_POST
    67474U,	// LDRSH_PRE
    281214U,	// LDRT_POST
    68222U,	// LDRT_POST_IMM
    68222U,	// LDRT_POST_REG
    67951U,	// LDR_POST_IMM
    67951U,	// LDR_POST_REG
    31087U,	// LDR_PRE_IMM
    67951U,	// LDR_PRE_REG
    26991U,	// LDRcp
    26991U,	// LDRi12
    31087U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    268421U,	// LSLi
    268421U,	// LSLr
    268703U,	// LSRi
    268703U,	// LSRr
    2197858662U,	// MCR
    17478045U,	// MCR2
    2197883278U,	// MCRR
    17478051U,	// MCRR2
    9583U,	// MLA
    0U,	// MLAv5
    31185U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    1350375U,	// MOVPCLR
    0U,	// MOVPCRX
    27316U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    72423U,	// MOVi
    19196U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    72423U,	// MOVr
    72423U,	// MOVr_TC
    6887U,	// MOVsi
    10983U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    201369233U,	// MRC
    74116U,	// MRC2
    2197882517U,	// MRRC
    17478026U,	// MRRC2
    2147518963U,	// MRS
    3221260787U,	// MRSsys
    218122660U,	// MSR
    218122660U,	// MSRi
    6293U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    71967U,	// MVNi
    71967U,	// MVNr
    6431U,	// MVNsi
    10527U,	// MVNsr
    6548U,	// ORRri
    6548U,	// ORRrr
    10644U,	// ORRrsi
    14740U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    31263U,	// PKHBT
    30226U,	// PKHTB
    78688U,	// PLDWi12
    82784U,	// PLDWrs
    78596U,	// PLDi12
    82692U,	// PLDrs
    78626U,	// PLIi12
    82722U,	// PLIrs
    26321U,	// QADD
    25752U,	// QADD16
    25855U,	// QADD8
    27574U,	// QASX
    26295U,	// QDADD
    26167U,	// QDSUB
    27433U,	// QSAX
    26180U,	// QSUB
    25714U,	// QSUB16
    25816U,	// QSUB8
    19045U,	// RBIT
    19155U,	// REV
    17596U,	// REV16
    18333U,	// REVSH
    414408U,	// RFEDA
    1462984U,	// RFEDA_UPD
    414439U,	// RFEDB
    1463015U,	// RFEDB_UPD
    414415U,	// RFEIA
    1462991U,	// RFEIA_UPD
    414446U,	// RFEIB
    1463022U,	// RFEIB_UPD
    268682U,	// RORi
    268682U,	// RORr
    0U,	// RRX
    334757U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    5639U,	// RSBri
    5639U,	// RSBrr
    9735U,	// RSBrsi
    13831U,	// RSBrsr
    5786U,	// RSCri
    5786U,	// RSCrr
    9882U,	// RSCrsi
    13978U,	// RSCrsr
    25759U,	// SADD16
    25861U,	// SADD8
    27579U,	// SASX
    5752U,	// SBCri
    5752U,	// SBCrr
    9848U,	// SBCrsi
    13944U,	// SBCrsr
    31639U,	// SBFX
    27351U,	// SDIV
    26688U,	// SEL
    86793U,	// SETEND
    16928834U,	// SHA1C
    1107447884U,	// SHA1H
    16928866U,	// SHA1M
    16928876U,	// SHA1P
    16928769U,	// SHA1SU0
    1090670619U,	// SHA1SU1
    16928854U,	// SHA256H
    16928821U,	// SHA256H2
    1090670605U,	// SHA256SU0
    16928807U,	// SHA256SU1
    25735U,	// SHADD16
    25840U,	// SHADD8
    27561U,	// SHASX
    27420U,	// SHSAX
    25697U,	// SHSUB16
    25801U,	// SHSUB8
    1073776269U,	// SMC
    30117U,	// SMLABB
    31256U,	// SMLABT
    30374U,	// SMLAD
    31565U,	// SMLADX
    92166U,	// SMLAL
    30124U,	// SMLALBB
    31269U,	// SMLALBT
    30427U,	// SMLALD
    31579U,	// SMLALDX
    30232U,	// SMLALTB
    31386U,	// SMLALTT
    0U,	// SMLALv5
    30219U,	// SMLATB
    31379U,	// SMLATT
    30286U,	// SMLAWB
    31417U,	// SMLAWT
    30460U,	// SMLSD
    31595U,	// SMLSDX
    30438U,	// SMLSLD
    31587U,	// SMLSLDX
    30061U,	// SMMLA
    31071U,	// SMMLAR
    31183U,	// SMMLS
    31132U,	// SMMLSR
    26771U,	// SMMUL
    27006U,	// SMMULR
    26284U,	// SMUAD
    27476U,	// SMUADX
    26036U,	// SMULBB
    27181U,	// SMULBT
    10346U,	// SMULL
    0U,	// SMULLv5
    26144U,	// SMULTB
    27298U,	// SMULTT
    26197U,	// SMULWB
    27328U,	// SMULWT
    26370U,	// SMUSD
    27506U,	// SMUSDX
    414634U,	// SRSDA
    414586U,	// SRSDA_UPD
    414656U,	// SRSDB
    414610U,	// SRSDB_UPD
    414645U,	// SRSIA
    414598U,	// SRSIA_UPD
    414667U,	// SRSIB
    414622U,	// SRSIB_UPD
    31246U,	// SSAT
    25773U,	// SSAT16
    27438U,	// SSAX
    25721U,	// SSUB16
    25822U,	// SSUB8
    152220462U,	// STC2L_OFFSET
    2316481326U,	// STC2L_OPTION
    3390223150U,	// STC2L_POST
    185774894U,	// STC2L_PRE
    152220049U,	// STC2_OFFSET
    2316480913U,	// STC2_OPTION
    3390222737U,	// STC2_POST
    185774481U,	// STC2_PRE
    50362408U,	// STCL_OFFSET
    50362408U,	// STCL_OPTION
    50362408U,	// STCL_POST
    50362408U,	// STCL_PRE
    50362014U,	// STC_OFFSET
    50362014U,	// STC_OPTION
    50362014U,	// STC_POST
    50362014U,	// STC_PRE
    18575U,	// STL
    17893U,	// STLB
    27519U,	// STLEX
    26211U,	// STLEXB
    26383U,	// STLEXD
    26548U,	// STLEXH
    18290U,	// STLH
    34125U,	// STMDA
    33572173U,	// STMDA_UPD
    34253U,	// STMDB
    33572301U,	// STMDB_UPD
    34990U,	// STMIA
    33573038U,	// STMIA_UPD
    34271U,	// STMIB
    33572319U,	// STMIB_UPD
    281146U,	// STRBT_POST
    33622586U,	// STRBT_POST_IMM
    33622586U,	// STRBT_POST_REG
    33621496U,	// STRB_POST_IMM
    33621496U,	// STRB_POST_REG
    33584632U,	// STRB_PRE_IMM
    33621496U,	// STRB_PRE_REG
    26104U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    30200U,	// STRBrs
    67319U,	// STRD
    1207990007U,	// STRD_PAIR
    33597175U,	// STRD_POST
    33597175U,	// STRD_PRE
    27537U,	// STREX
    26225U,	// STREXB
    26397U,	// STREXD
    26562U,	// STREXH
    30605U,	// STRH
    33585752U,	// STRHTi
    33622616U,	// STRHTr
    33621901U,	// STRH_POST
    33621901U,	// STRH_PRE
    0U,	// STRH_preidx
    281225U,	// STRT_POST
    33622665U,	// STRT_POST_IMM
    33622665U,	// STRT_POST_REG
    33622448U,	// STR_POST_IMM
    33622448U,	// STR_POST_REG
    33585584U,	// STR_PRE_IMM
    33622448U,	// STR_PRE_REG
    27056U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    31152U,	// STRrs
    0U,	// SUBS_PC_LR
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    5689U,	// SUBri
    5689U,	// SUBrr
    9785U,	// SUBrsi
    13881U,	// SUBrsr
    1073776290U,	// SVC
    26957U,	// SWP
    26094U,	// SWPB
    30105U,	// SXTAB
    29763U,	// SXTAB16
    30562U,	// SXTAH
    26157U,	// SXTB
    25683U,	// SXTB16
    26531U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    18779U,	// TEQri
    18779U,	// TEQrr
    26971U,	// TEQrsi
    31067U,	// TEQrsr
    0U,	// TPsoft
    2352U,	// TRAP
    2352U,	// TRAPNaCl
    19087U,	// TSTri
    19087U,	// TSTrr
    27279U,	// TSTrsi
    31375U,	// TSTrsr
    25766U,	// UADD16
    25867U,	// UADD8
    27584U,	// UASX
    31644U,	// UBFX
    27356U,	// UDIV
    25743U,	// UHADD16
    25847U,	// UHADD8
    27567U,	// UHASX
    27426U,	// UHSAX
    25705U,	// UHSUB16
    25808U,	// UHSUB8
    30699U,	// UMAAL
    92172U,	// UMLAL
    0U,	// UMLALv5
    10352U,	// UMULL
    0U,	// UMULLv5
    25751U,	// UQADD16
    25854U,	// UQADD8
    27573U,	// UQASX
    27432U,	// UQSAX
    25713U,	// UQSUB16
    25815U,	// UQSUB8
    25834U,	// USAD8
    29890U,	// USADA8
    31251U,	// USAT
    25780U,	// USAT16
    27443U,	// USAX
    25728U,	// USUB16
    25828U,	// USUB8
    30111U,	// UXTAB
    29771U,	// UXTAB16
    30568U,	// UXTAH
    26162U,	// UXTB
    25690U,	// UXTB16
    26536U,	// UXTH
    18380785U,	// VABALsv2i64
    18511857U,	// VABALsv4i32
    18642929U,	// VABALsv8i16
    18774001U,	// VABALuv2i64
    18905073U,	// VABALuv4i32
    19036145U,	// VABALuv8i16
    18642238U,	// VABAsv16i8
    18380094U,	// VABAsv2i32
    18511166U,	// VABAsv4i16
    18380094U,	// VABAsv4i32
    18511166U,	// VABAsv8i16
    18642238U,	// VABAsv8i8
    19035454U,	// VABAuv16i8
    18773310U,	// VABAuv2i32
    18904382U,	// VABAuv4i16
    18773310U,	// VABAuv4i32
    18904382U,	// VABAuv8i16
    19035454U,	// VABAuv8i8
    35153965U,	// VABDLsv2i64
    35285037U,	// VABDLsv4i32
    35416109U,	// VABDLsv8i16
    35547181U,	// VABDLuv2i64
    35678253U,	// VABDLuv4i32
    35809325U,	// VABDLuv8i16
    2249090738U,	// VABDfd
    2249090738U,	// VABDfq
    35415730U,	// VABDsv16i8
    35153586U,	// VABDsv2i32
    35284658U,	// VABDsv4i16
    35153586U,	// VABDsv4i32
    35284658U,	// VABDsv8i16
    35415730U,	// VABDsv8i8
    35808946U,	// VABDuv16i8
    35546802U,	// VABDuv2i32
    35677874U,	// VABDuv4i16
    35546802U,	// VABDuv4i32
    35677874U,	// VABDuv8i16
    35808946U,	// VABDuv8i8
    2248952256U,	// VABSD
    2249083328U,	// VABSS
    2249083328U,	// VABSfd
    2249083328U,	// VABSfq
    1109150144U,	// VABSv16i8
    1108888000U,	// VABSv2i32
    1109019072U,	// VABSv4i16
    1108888000U,	// VABSv4i32
    1109019072U,	// VABSv8i16
    1109150144U,	// VABSv8i8
    2249090852U,	// VACGEd
    2249090852U,	// VACGEq
    2249091655U,	// VACGTd
    2249091655U,	// VACGTq
    2248959702U,	// VADDD
    35940553U,	// VADDHNv2i32
    36071625U,	// VADDHNv4i16
    36202697U,	// VADDHNv8i8
    35153978U,	// VADDLsv2i64
    35285050U,	// VADDLsv4i32
    35416122U,	// VADDLsv8i16
    35547194U,	// VADDLuv2i64
    35678266U,	// VADDLuv4i32
    35809338U,	// VADDLuv8i16
    2249090774U,	// VADDS
    35154673U,	// VADDWsv2i64
    35285745U,	// VADDWsv4i32
    35416817U,	// VADDWsv8i16
    35547889U,	// VADDWuv2i64
    35678961U,	// VADDWuv4i32
    35810033U,	// VADDWuv8i16
    2249090774U,	// VADDfd
    2249090774U,	// VADDfq
    36333270U,	// VADDv16i8
    35940054U,	// VADDv1i64
    36071126U,	// VADDv2i32
    35940054U,	// VADDv2i64
    36202198U,	// VADDv4i16
    36071126U,	// VADDv4i32
    36202198U,	// VADDv8i16
    36333270U,	// VADDv8i8
    26349U,	// VANDd
    26349U,	// VANDq
    26248U,	// VBICd
    237397640U,	// VBICiv2i32
    237528712U,	// VBICiv4i16
    237397640U,	// VBICiv4i32
    237528712U,	// VBICiv8i16
    26248U,	// VBICq
    30537U,	// VBIFd
    30537U,	// VBIFq
    31338U,	// VBITd
    31338U,	// VBITq
    30844U,	// VBSLd
    30844U,	// VBSLq
    2249091414U,	// VCEQfd
    2249091414U,	// VCEQfq
    36333910U,	// VCEQv16i8
    36071766U,	// VCEQv2i32
    36202838U,	// VCEQv4i16
    36071766U,	// VCEQv4i32
    36202838U,	// VCEQv8i16
    36333910U,	// VCEQv8i8
    36325718U,	// VCEQzv16i8
    2249083222U,	// VCEQzv2f32
    36063574U,	// VCEQzv2i32
    2249083222U,	// VCEQzv4f32
    36194646U,	// VCEQzv4i16
    36063574U,	// VCEQzv4i32
    36194646U,	// VCEQzv8i16
    36325718U,	// VCEQzv8i8
    2249090858U,	// VCGEfd
    2249090858U,	// VCGEfq
    35415850U,	// VCGEsv16i8
    35153706U,	// VCGEsv2i32
    35284778U,	// VCGEsv4i16
    35153706U,	// VCGEsv4i32
    35284778U,	// VCGEsv8i16
    35415850U,	// VCGEsv8i8
    35809066U,	// VCGEuv16i8
    35546922U,	// VCGEuv2i32
    35677994U,	// VCGEuv4i16
    35546922U,	// VCGEuv4i32
    35677994U,	// VCGEuv8i16
    35809066U,	// VCGEuv8i8
    35407658U,	// VCGEzv16i8
    2249082666U,	// VCGEzv2f32
    35145514U,	// VCGEzv2i32
    2249082666U,	// VCGEzv4f32
    35276586U,	// VCGEzv4i16
    35145514U,	// VCGEzv4i32
    35276586U,	// VCGEzv8i16
    35407658U,	// VCGEzv8i8
    2249091661U,	// VCGTfd
    2249091661U,	// VCGTfq
    35416653U,	// VCGTsv16i8
    35154509U,	// VCGTsv2i32
    35285581U,	// VCGTsv4i16
    35154509U,	// VCGTsv4i32
    35285581U,	// VCGTsv8i16
    35416653U,	// VCGTsv8i8
    35809869U,	// VCGTuv16i8
    35547725U,	// VCGTuv2i32
    35678797U,	// VCGTuv4i16
    35547725U,	// VCGTuv4i32
    35678797U,	// VCGTuv8i16
    35809869U,	// VCGTuv8i8
    35408461U,	// VCGTzv16i8
    2249083469U,	// VCGTzv2f32
    35146317U,	// VCGTzv2i32
    2249083469U,	// VCGTzv4f32
    35277389U,	// VCGTzv4i16
    35146317U,	// VCGTzv4i32
    35277389U,	// VCGTzv8i16
    35408461U,	// VCGTzv8i8
    35407663U,	// VCLEzv16i8
    2249082671U,	// VCLEzv2f32
    35145519U,	// VCLEzv2i32
    2249082671U,	// VCLEzv4f32
    35276591U,	// VCLEzv4i16
    35145519U,	// VCLEzv4i32
    35276591U,	// VCLEzv8i16
    35407663U,	// VCLEzv8i8
    1109150154U,	// VCLSv16i8
    1108888010U,	// VCLSv2i32
    1109019082U,	// VCLSv4i16
    1108888010U,	// VCLSv4i32
    1109019082U,	// VCLSv8i16
    1109150154U,	// VCLSv8i8
    35408495U,	// VCLTzv16i8
    2249083503U,	// VCLTzv2f32
    35146351U,	// VCLTzv2i32
    2249083503U,	// VCLTzv4f32
    35277423U,	// VCLTzv4i16
    35146351U,	// VCLTzv4i32
    35277423U,	// VCLTzv8i16
    35408495U,	// VCLTzv8i8
    1110068172U,	// VCLZv16i8
    1109806028U,	// VCLZv2i32
    1109937100U,	// VCLZv4i16
    1109806028U,	// VCLZv4i32
    1109937100U,	// VCLZv8i16
    1110068172U,	// VCLZv8i8
    2248952126U,	// VCMPD
    2248951611U,	// VCMPED
    2249082683U,	// VCMPES
    252479291U,	// VCMPEZD
    252610363U,	// VCMPEZS
    2249083198U,	// VCMPS
    252479806U,	// VCMPZD
    252610878U,	// VCMPZS
    2902644U,	// VCNTd
    2902644U,	// VCNTq
    1107447926U,	// VCVTANSD
    1107447926U,	// VCVTANSQ
    1107447986U,	// VCVTANUD
    1107447986U,	// VCVTANUQ
    1107448234U,	// VCVTASD
    1107447926U,	// VCVTASS
    1107448294U,	// VCVTAUD
    1107447986U,	// VCVTAUS
    3032615U,	// VCVTBDH
    3163687U,	// VCVTBHD
    3294759U,	// VCVTBHS
    3425831U,	// VCVTBSH
    3558063U,	// VCVTDS
    1107447941U,	// VCVTMNSD
    1107447941U,	// VCVTMNSQ
    1107448001U,	// VCVTMNUD
    1107448001U,	// VCVTMNUQ
    1107448249U,	// VCVTMSD
    1107447941U,	// VCVTMSS
    1107448309U,	// VCVTMUD
    1107448001U,	// VCVTMUS
    1107447956U,	// VCVTNNSD
    1107447956U,	// VCVTNNSQ
    1107448016U,	// VCVTNNUD
    1107448016U,	// VCVTNNUQ
    1107448264U,	// VCVTNSD
    1107447956U,	// VCVTNSS
    1107448324U,	// VCVTNUD
    1107448016U,	// VCVTNUS
    1107447971U,	// VCVTPNSD
    1107447971U,	// VCVTPNSQ
    1107448031U,	// VCVTPNUD
    1107448031U,	// VCVTPNUQ
    1107448279U,	// VCVTPSD
    1107447971U,	// VCVTPSS
    1107448339U,	// VCVTPUD
    1107448031U,	// VCVTPUS
    3689135U,	// VCVTSD
    3033769U,	// VCVTTDH
    3164841U,	// VCVTTHD
    3295913U,	// VCVTTHS
    3426985U,	// VCVTTSH
    3426991U,	// VCVTf2h
    272255663U,	// VCVTf2sd
    272255663U,	// VCVTf2sq
    272386735U,	// VCVTf2ud
    272386735U,	// VCVTf2uq
    1178233519U,	// VCVTf2xsd
    1178233519U,	// VCVTf2xsq
    1178364591U,	// VCVTf2xud
    1178364591U,	// VCVTf2xuq
    3295919U,	// VCVTh2f
    272517807U,	// VCVTs2fd
    272517807U,	// VCVTs2fq
    272648879U,	// VCVTu2fd
    272648879U,	// VCVTu2fq
    1178495663U,	// VCVTxs2fd
    1178495663U,	// VCVTxs2fq
    1178626735U,	// VCVTxu2fd
    1178626735U,	// VCVTxu2fq
    2248960737U,	// VDIVD
    2249091809U,	// VDIVS
    4344135U,	// VDUP16d
    4344135U,	// VDUP16q
    4475207U,	// VDUP32d
    4475207U,	// VDUP32q
    2902343U,	// VDUP8d
    2902343U,	// VDUP8q
    4352327U,	// VDUPLN16d
    4352327U,	// VDUPLN16q
    4483399U,	// VDUPLN32d
    4483399U,	// VDUPLN32q
    2910535U,	// VDUPLN8d
    2910535U,	// VDUPLN8q
    27013U,	// VEORd
    27013U,	// VEORq
    4356807U,	// VEXTd16
    4487879U,	// VEXTd32
    2915015U,	// VEXTd8
    4356807U,	// VEXTq16
    4487879U,	// VEXTq32
    4618951U,	// VEXTq64
    2915015U,	// VEXTq8
    1175221630U,	// VFMAD
    1175352702U,	// VFMAS
    1175352702U,	// VFMAfd
    1175352702U,	// VFMAfq
    1175222752U,	// VFMSD
    1175353824U,	// VFMSS
    1175353824U,	// VFMSfd
    1175353824U,	// VFMSfq
    1175221635U,	// VFNMAD
    1175352707U,	// VFNMAS
    1175222757U,	// VFNMSD
    1175353829U,	// VFNMSS
    4483814U,	// VGETLNi32
    2182769382U,	// VGETLNs16
    2182900454U,	// VGETLNs8
    2183162598U,	// VGETLNu16
    2183293670U,	// VGETLNu8
    35415748U,	// VHADDsv16i8
    35153604U,	// VHADDsv2i32
    35284676U,	// VHADDsv4i16
    35153604U,	// VHADDsv4i32
    35284676U,	// VHADDsv8i16
    35415748U,	// VHADDsv8i8
    35808964U,	// VHADDuv16i8
    35546820U,	// VHADDuv2i32
    35677892U,	// VHADDuv4i16
    35546820U,	// VHADDuv4i32
    35677892U,	// VHADDuv8i16
    35808964U,	// VHADDuv8i8
    35415613U,	// VHSUBsv16i8
    35153469U,	// VHSUBsv2i32
    35284541U,	// VHSUBsv4i16
    35153469U,	// VHSUBsv4i32
    35284541U,	// VHSUBsv8i16
    35415613U,	// VHSUBsv8i8
    35808829U,	// VHSUBuv16i8
    35546685U,	// VHSUBuv2i32
    35677757U,	// VHSUBuv4i16
    35546685U,	// VHSUBuv4i32
    35677757U,	// VHSUBuv8i16
    35808829U,	// VHSUBuv8i8
    3510789078U,	// VLD1DUPd16
    289567702U,	// VLD1DUPd16wb_fixed
    289604566U,	// VLD1DUPd16wb_register
    3510920150U,	// VLD1DUPd32
    289698774U,	// VLD1DUPd32wb_fixed
    289735638U,	// VLD1DUPd32wb_register
    3509347286U,	// VLD1DUPd8
    288125910U,	// VLD1DUPd8wb_fixed
    288162774U,	// VLD1DUPd8wb_register
    3527566294U,	// VLD1DUPq16
    306344918U,	// VLD1DUPq16wb_fixed
    306381782U,	// VLD1DUPq16wb_register
    3527697366U,	// VLD1DUPq32
    306475990U,	// VLD1DUPq32wb_fixed
    306512854U,	// VLD1DUPq32wb_register
    3526124502U,	// VLD1DUPq8
    304903126U,	// VLD1DUPq8wb_fixed
    304939990U,	// VLD1DUPq8wb_register
    1078526934U,	// VLD1LNd16
    1078555606U,	// VLD1LNd16_UPD
    1078658006U,	// VLD1LNd32
    1078686678U,	// VLD1LNd32_UPD
    1078789078U,	// VLD1LNd8
    1078817750U,	// VLD1LNd8_UPD
    4355030U,	// VLD1LNdAsm_16
    4486102U,	// VLD1LNdAsm_32
    2913238U,	// VLD1LNdAsm_8
    4355030U,	// VLD1LNdWB_fixed_Asm_16
    4486102U,	// VLD1LNdWB_fixed_Asm_32
    2913238U,	// VLD1LNdWB_fixed_Asm_8
    4391894U,	// VLD1LNdWB_register_Asm_16
    4522966U,	// VLD1LNdWB_register_Asm_32
    2950102U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    3544343510U,	// VLD1d16
    3561120726U,	// VLD1d16Q
    339899350U,	// VLD1d16Qwb_fixed
    339936214U,	// VLD1d16Qwb_register
    3577897942U,	// VLD1d16T
    356676566U,	// VLD1d16Twb_fixed
    356713430U,	// VLD1d16Twb_register
    323122134U,	// VLD1d16wb_fixed
    323158998U,	// VLD1d16wb_register
    3544474582U,	// VLD1d32
    3561251798U,	// VLD1d32Q
    340030422U,	// VLD1d32Qwb_fixed
    340067286U,	// VLD1d32Qwb_register
    3578029014U,	// VLD1d32T
    356807638U,	// VLD1d32Twb_fixed
    356844502U,	// VLD1d32Twb_register
    323253206U,	// VLD1d32wb_fixed
    323290070U,	// VLD1d32wb_register
    3544605654U,	// VLD1d64
    3561382870U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudoWB_fixed
    0U,	// VLD1d64QPseudoWB_register
    340161494U,	// VLD1d64Qwb_fixed
    340198358U,	// VLD1d64Qwb_register
    3578160086U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudoWB_fixed
    0U,	// VLD1d64TPseudoWB_register
    356938710U,	// VLD1d64Twb_fixed
    356975574U,	// VLD1d64Twb_register
    323384278U,	// VLD1d64wb_fixed
    323421142U,	// VLD1d64wb_register
    3542901718U,	// VLD1d8
    3559678934U,	// VLD1d8Q
    338457558U,	// VLD1d8Qwb_fixed
    338494422U,	// VLD1d8Qwb_register
    3576456150U,	// VLD1d8T
    355234774U,	// VLD1d8Twb_fixed
    355271638U,	// VLD1d8Twb_register
    321680342U,	// VLD1d8wb_fixed
    321717206U,	// VLD1d8wb_register
    3594675158U,	// VLD1q16
    373453782U,	// VLD1q16wb_fixed
    373490646U,	// VLD1q16wb_register
    3594806230U,	// VLD1q32
    373584854U,	// VLD1q32wb_fixed
    373621718U,	// VLD1q32wb_register
    3594937302U,	// VLD1q64
    373715926U,	// VLD1q64wb_fixed
    373752790U,	// VLD1q64wb_register
    3593233366U,	// VLD1q8
    372011990U,	// VLD1q8wb_fixed
    372048854U,	// VLD1q8wb_register
    3527566338U,	// VLD2DUPd16
    306344962U,	// VLD2DUPd16wb_fixed
    306381826U,	// VLD2DUPd16wb_register
    3611452418U,	// VLD2DUPd16x2
    390231042U,	// VLD2DUPd16x2wb_fixed
    390267906U,	// VLD2DUPd16x2wb_register
    3527697410U,	// VLD2DUPd32
    306476034U,	// VLD2DUPd32wb_fixed
    306512898U,	// VLD2DUPd32wb_register
    3611583490U,	// VLD2DUPd32x2
    390362114U,	// VLD2DUPd32x2wb_fixed
    390398978U,	// VLD2DUPd32x2wb_register
    3526124546U,	// VLD2DUPd8
    304903170U,	// VLD2DUPd8wb_fixed
    304940034U,	// VLD2DUPd8wb_register
    3610010626U,	// VLD2DUPd8x2
    388789250U,	// VLD2DUPd8x2wb_fixed
    388826114U,	// VLD2DUPd8x2wb_register
    1078555650U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    1078559746U,	// VLD2LNd16_UPD
    1078686722U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    1078690818U,	// VLD2LNd32_UPD
    1078817794U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    1078821890U,	// VLD2LNd8_UPD
    4355074U,	// VLD2LNdAsm_16
    4486146U,	// VLD2LNdAsm_32
    2913282U,	// VLD2LNdAsm_8
    4355074U,	// VLD2LNdWB_fixed_Asm_16
    4486146U,	// VLD2LNdWB_fixed_Asm_32
    2913282U,	// VLD2LNdWB_fixed_Asm_8
    4391938U,	// VLD2LNdWB_register_Asm_16
    4523010U,	// VLD2LNdWB_register_Asm_32
    2950146U,	// VLD2LNdWB_register_Asm_8
    1078555650U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    1078559746U,	// VLD2LNq16_UPD
    1078686722U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    1078690818U,	// VLD2LNq32_UPD
    4355074U,	// VLD2LNqAsm_16
    4486146U,	// VLD2LNqAsm_32
    4355074U,	// VLD2LNqWB_fixed_Asm_16
    4486146U,	// VLD2LNqWB_fixed_Asm_32
    4391938U,	// VLD2LNqWB_register_Asm_16
    4523010U,	// VLD2LNqWB_register_Asm_32
    3628229634U,	// VLD2b16
    407008258U,	// VLD2b16wb_fixed
    407045122U,	// VLD2b16wb_register
    3628360706U,	// VLD2b32
    407139330U,	// VLD2b32wb_fixed
    407176194U,	// VLD2b32wb_register
    3626787842U,	// VLD2b8
    405566466U,	// VLD2b8wb_fixed
    405603330U,	// VLD2b8wb_register
    3594675202U,	// VLD2d16
    373453826U,	// VLD2d16wb_fixed
    373490690U,	// VLD2d16wb_register
    3594806274U,	// VLD2d32
    373584898U,	// VLD2d32wb_fixed
    373621762U,	// VLD2d32wb_register
    3593233410U,	// VLD2d8
    372012034U,	// VLD2d8wb_fixed
    372048898U,	// VLD2d8wb_register
    3561120770U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    339899394U,	// VLD2q16wb_fixed
    339936258U,	// VLD2q16wb_register
    3561251842U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    340030466U,	// VLD2q32wb_fixed
    340067330U,	// VLD2q32wb_register
    3559678978U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    338457602U,	// VLD2q8wb_fixed
    338494466U,	// VLD2q8wb_register
    2152268834U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    2152297506U,	// VLD3DUPd16_UPD
    2152399906U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    2152428578U,	// VLD3DUPd32_UPD
    2152530978U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    2152559650U,	// VLD3DUPd8_UPD
    1497523234U,	// VLD3DUPdAsm_16
    1497654306U,	// VLD3DUPdAsm_32
    1496081442U,	// VLD3DUPdAsm_8
    3645006882U,	// VLD3DUPdWB_fixed_Asm_16
    3645137954U,	// VLD3DUPdWB_fixed_Asm_32
    3643565090U,	// VLD3DUPdWB_fixed_Asm_8
    423785506U,	// VLD3DUPdWB_register_Asm_16
    423916578U,	// VLD3DUPdWB_register_Asm_32
    422343714U,	// VLD3DUPdWB_register_Asm_8
    2152268834U,	// VLD3DUPq16
    2152297506U,	// VLD3DUPq16_UPD
    2152399906U,	// VLD3DUPq32
    2152428578U,	// VLD3DUPq32_UPD
    2152530978U,	// VLD3DUPq8
    2152559650U,	// VLD3DUPq8_UPD
    1514300450U,	// VLD3DUPqAsm_16
    1514431522U,	// VLD3DUPqAsm_32
    1512858658U,	// VLD3DUPqAsm_8
    3661784098U,	// VLD3DUPqWB_fixed_Asm_16
    3661915170U,	// VLD3DUPqWB_fixed_Asm_32
    3660342306U,	// VLD3DUPqWB_fixed_Asm_8
    440562722U,	// VLD3DUPqWB_register_Asm_16
    440693794U,	// VLD3DUPqWB_register_Asm_32
    439120930U,	// VLD3DUPqWB_register_Asm_8
    1078559778U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    1078563874U,	// VLD3LNd16_UPD
    1078690850U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    1078694946U,	// VLD3LNd32_UPD
    1078821922U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    1078826018U,	// VLD3LNd8_UPD
    4355106U,	// VLD3LNdAsm_16
    4486178U,	// VLD3LNdAsm_32
    2913314U,	// VLD3LNdAsm_8
    4355106U,	// VLD3LNdWB_fixed_Asm_16
    4486178U,	// VLD3LNdWB_fixed_Asm_32
    2913314U,	// VLD3LNdWB_fixed_Asm_8
    4391970U,	// VLD3LNdWB_register_Asm_16
    4523042U,	// VLD3LNdWB_register_Asm_32
    2950178U,	// VLD3LNdWB_register_Asm_8
    1078559778U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    1078563874U,	// VLD3LNq16_UPD
    1078690850U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    1078694946U,	// VLD3LNq32_UPD
    4355106U,	// VLD3LNqAsm_16
    4486178U,	// VLD3LNqAsm_32
    4355106U,	// VLD3LNqWB_fixed_Asm_16
    4486178U,	// VLD3LNqWB_fixed_Asm_32
    4391970U,	// VLD3LNqWB_register_Asm_16
    4523042U,	// VLD3LNqWB_register_Asm_32
    4785186U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    4813858U,	// VLD3d16_UPD
    4916258U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    4944930U,	// VLD3d32_UPD
    5047330U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    5076002U,	// VLD3d8_UPD
    3577898018U,	// VLD3dAsm_16
    3578029090U,	// VLD3dAsm_32
    3576456226U,	// VLD3dAsm_8
    3577898018U,	// VLD3dWB_fixed_Asm_16
    3578029090U,	// VLD3dWB_fixed_Asm_32
    3576456226U,	// VLD3dWB_fixed_Asm_8
    3577902114U,	// VLD3dWB_register_Asm_16
    3578033186U,	// VLD3dWB_register_Asm_32
    3576460322U,	// VLD3dWB_register_Asm_8
    4785186U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    4813858U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    4916258U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    4944930U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    5047330U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    5076002U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    1531077666U,	// VLD3qAsm_16
    1531208738U,	// VLD3qAsm_32
    1529635874U,	// VLD3qAsm_8
    3678561314U,	// VLD3qWB_fixed_Asm_16
    3678692386U,	// VLD3qWB_fixed_Asm_32
    3677119522U,	// VLD3qWB_fixed_Asm_8
    457339938U,	// VLD3qWB_register_Asm_16
    457471010U,	// VLD3qWB_register_Asm_32
    455898146U,	// VLD3qWB_register_Asm_8
    2152244281U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    2152309817U,	// VLD4DUPd16_UPD
    2152375353U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    2152440889U,	// VLD4DUPd32_UPD
    2152506425U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    2152571961U,	// VLD4DUPd8_UPD
    1547854905U,	// VLD4DUPdAsm_16
    1547985977U,	// VLD4DUPdAsm_32
    1546413113U,	// VLD4DUPdAsm_8
    3695338553U,	// VLD4DUPdWB_fixed_Asm_16
    3695469625U,	// VLD4DUPdWB_fixed_Asm_32
    3693896761U,	// VLD4DUPdWB_fixed_Asm_8
    474117177U,	// VLD4DUPdWB_register_Asm_16
    474248249U,	// VLD4DUPdWB_register_Asm_32
    472675385U,	// VLD4DUPdWB_register_Asm_8
    2152244281U,	// VLD4DUPq16
    2152309817U,	// VLD4DUPq16_UPD
    2152375353U,	// VLD4DUPq32
    2152440889U,	// VLD4DUPq32_UPD
    2152506425U,	// VLD4DUPq8
    2152571961U,	// VLD4DUPq8_UPD
    1564632121U,	// VLD4DUPqAsm_16
    1564763193U,	// VLD4DUPqAsm_32
    1563190329U,	// VLD4DUPqAsm_8
    3712115769U,	// VLD4DUPqWB_fixed_Asm_16
    3712246841U,	// VLD4DUPqWB_fixed_Asm_32
    3710673977U,	// VLD4DUPqWB_fixed_Asm_8
    490894393U,	// VLD4DUPqWB_register_Asm_16
    491025465U,	// VLD4DUPqWB_register_Asm_32
    489452601U,	// VLD4DUPqWB_register_Asm_8
    1078563897U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    1078572089U,	// VLD4LNd16_UPD
    1078694969U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    1078703161U,	// VLD4LNd32_UPD
    1078826041U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    1078834233U,	// VLD4LNd8_UPD
    4355129U,	// VLD4LNdAsm_16
    4486201U,	// VLD4LNdAsm_32
    2913337U,	// VLD4LNdAsm_8
    4355129U,	// VLD4LNdWB_fixed_Asm_16
    4486201U,	// VLD4LNdWB_fixed_Asm_32
    2913337U,	// VLD4LNdWB_fixed_Asm_8
    4391993U,	// VLD4LNdWB_register_Asm_16
    4523065U,	// VLD4LNdWB_register_Asm_32
    2950201U,	// VLD4LNdWB_register_Asm_8
    1078563897U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    1078572089U,	// VLD4LNq16_UPD
    1078694969U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    1078703161U,	// VLD4LNq32_UPD
    4355129U,	// VLD4LNqAsm_16
    4486201U,	// VLD4LNqAsm_32
    4355129U,	// VLD4LNqWB_fixed_Asm_16
    4486201U,	// VLD4LNqWB_fixed_Asm_32
    4391993U,	// VLD4LNqWB_register_Asm_16
    4523065U,	// VLD4LNqWB_register_Asm_32
    4760633U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    4826169U,	// VLD4d16_UPD
    4891705U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    4957241U,	// VLD4d32_UPD
    5022777U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    5088313U,	// VLD4d8_UPD
    3561120825U,	// VLD4dAsm_16
    3561251897U,	// VLD4dAsm_32
    3559679033U,	// VLD4dAsm_8
    3561120825U,	// VLD4dWB_fixed_Asm_16
    3561251897U,	// VLD4dWB_fixed_Asm_32
    3559679033U,	// VLD4dWB_fixed_Asm_8
    3561124921U,	// VLD4dWB_register_Asm_16
    3561255993U,	// VLD4dWB_register_Asm_32
    3559683129U,	// VLD4dWB_register_Asm_8
    4760633U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    4826169U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    4891705U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    4957241U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    5022777U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    5088313U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    1581409337U,	// VLD4qAsm_16
    1581540409U,	// VLD4qAsm_32
    1579967545U,	// VLD4qAsm_8
    3728892985U,	// VLD4qWB_fixed_Asm_16
    3729024057U,	// VLD4qWB_fixed_Asm_32
    3727451193U,	// VLD4qWB_fixed_Asm_8
    507671609U,	// VLD4qWB_register_Asm_16
    507802681U,	// VLD4qWB_register_Asm_32
    506229817U,	// VLD4qWB_register_Asm_8
    33572293U,	// VLDMDDB_UPD
    34137U,	// VLDMDIA
    33572185U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    33572293U,	// VLDMSDB_UPD
    34137U,	// VLDMSIA
    33572185U,	// VLDMSIA_UPD
    26990U,	// VLDRD
    26990U,	// VLDRS
    33706566U,	// VMAXNMD
    33706258U,	// VMAXNMND
    33706258U,	// VMAXNMNQ
    33706258U,	// VMAXNMS
    2249091863U,	// VMAXfd
    2249091863U,	// VMAXfq
    35416855U,	// VMAXsv16i8
    35154711U,	// VMAXsv2i32
    35285783U,	// VMAXsv4i16
    35154711U,	// VMAXsv4i32
    35285783U,	// VMAXsv8i16
    35416855U,	// VMAXsv8i8
    35810071U,	// VMAXuv16i8
    35547927U,	// VMAXuv2i32
    35678999U,	// VMAXuv4i16
    35547927U,	// VMAXuv4i32
    35678999U,	// VMAXuv8i16
    35810071U,	// VMAXuv8i8
    33706554U,	// VMINNMD
    33706246U,	// VMINNMND
    33706246U,	// VMINNMNQ
    33706246U,	// VMINNMS
    2249091286U,	// VMINfd
    2249091286U,	// VMINfq
    35416278U,	// VMINsv16i8
    35154134U,	// VMINsv2i32
    35285206U,	// VMINsv4i16
    35154134U,	// VMINsv4i32
    35285206U,	// VMINsv8i16
    35416278U,	// VMINsv8i8
    35809494U,	// VMINuv16i8
    35547350U,	// VMINuv2i32
    35678422U,	// VMINuv4i16
    35547350U,	// VMINuv4i32
    35678422U,	// VMINuv8i16
    35809494U,	// VMINuv8i8
    1175221625U,	// VMLAD
    18417682U,	// VMLALslsv2i32
    18548754U,	// VMLALslsv4i16
    18810898U,	// VMLALsluv2i32
    18941970U,	// VMLALsluv4i16
    18380818U,	// VMLALsv2i64
    18511890U,	// VMLALsv4i32
    18642962U,	// VMLALsv8i16
    18774034U,	// VMLALuv2i64
    18905106U,	// VMLALuv4i32
    19036178U,	// VMLALuv8i16
    1175352697U,	// VMLAS
    1175352697U,	// VMLAfd
    1175352697U,	// VMLAfq
    1175389561U,	// VMLAslfd
    1175389561U,	// VMLAslfq
    19334521U,	// VMLAslv2i32
    19465593U,	// VMLAslv4i16
    19334521U,	// VMLAslv4i32
    19465593U,	// VMLAslv8i16
    19559801U,	// VMLAv16i8
    19297657U,	// VMLAv2i32
    19428729U,	// VMLAv4i16
    19297657U,	// VMLAv4i32
    19428729U,	// VMLAv8i16
    19559801U,	// VMLAv8i8
    1175222747U,	// VMLSD
    18417801U,	// VMLSLslsv2i32
    18548873U,	// VMLSLslsv4i16
    18811017U,	// VMLSLsluv2i32
    18942089U,	// VMLSLsluv4i16
    18380937U,	// VMLSLsv2i64
    18512009U,	// VMLSLsv4i32
    18643081U,	// VMLSLsv8i16
    18774153U,	// VMLSLuv2i64
    18905225U,	// VMLSLuv4i32
    19036297U,	// VMLSLuv8i16
    1175353819U,	// VMLSS
    1175353819U,	// VMLSfd
    1175353819U,	// VMLSfq
    1175390683U,	// VMLSslfd
    1175390683U,	// VMLSslfq
    19335643U,	// VMLSslv2i32
    19466715U,	// VMLSslv4i16
    19335643U,	// VMLSslv4i32
    19466715U,	// VMLSslv8i16
    19560923U,	// VMLSv16i8
    19298779U,	// VMLSv2i32
    19429851U,	// VMLSv4i16
    19298779U,	// VMLSv4i32
    19429851U,	// VMLSv8i16
    19560923U,	// VMLSv8i8
    2248952550U,	// VMOVD
    27366U,	// VMOVDRR
    0U,	// VMOVDcc
    1108887716U,	// VMOVLsv2i64
    1109018788U,	// VMOVLsv4i32
    1109149860U,	// VMOVLsv8i16
    1109280932U,	// VMOVLuv2i64
    1109412004U,	// VMOVLuv4i32
    1109543076U,	// VMOVLuv8i16
    1109674282U,	// VMOVNv2i32
    1109805354U,	// VMOVNv4i16
    1109936426U,	// VMOVNv8i8
    27366U,	// VMOVRRD
    31462U,	// VMOVRRS
    19174U,	// VMOVRS
    2249083622U,	// VMOVS
    19174U,	// VMOVSR
    31462U,	// VMOVSRR
    0U,	// VMOVScc
    237652710U,	// VMOVv16i8
    237259494U,	// VMOVv1i64
    3322825446U,	// VMOVv2f32
    237390566U,	// VMOVv2i32
    237259494U,	// VMOVv2i64
    3322825446U,	// VMOVv4f32
    237521638U,	// VMOVv4i16
    237390566U,	// VMOVv4i32
    237521638U,	// VMOVv8i16
    237652710U,	// VMOVv8i8
    35314U,	// VMRS
    1073777138U,	// VMRS_FPEXC
    2147518962U,	// VMRS_FPINST
    3221260786U,	// VMRS_FPINST2
    35314U,	// VMRS_FPSID
    1073777138U,	// VMRS_MVFR0
    2147518962U,	// VMRS_MVFR1
    3221260786U,	// VMRS_MVFR2
    5147043U,	// VMSR
    5278115U,	// VMSR_FPEXC
    5409187U,	// VMSR_FPINST
    5540259U,	// VMSR_FPINST2
    5671331U,	// VMSR_FPSID
    2248960159U,	// VMULD
    33706650U,	// VMULLp64
    5793910U,	// VMULLp8
    35158134U,	// VMULLslsv2i32
    35289206U,	// VMULLslsv4i16
    35551350U,	// VMULLsluv2i32
    35682422U,	// VMULLsluv4i16
    35154038U,	// VMULLsv2i64
    35285110U,	// VMULLsv4i32
    35416182U,	// VMULLsv8i16
    35547254U,	// VMULLuv2i64
    35678326U,	// VMULLuv4i32
    35809398U,	// VMULLuv8i16
    2249091231U,	// VMULS
    2249091231U,	// VMULfd
    2249091231U,	// VMULfq
    5793951U,	// VMULpd
    5793951U,	// VMULpq
    2249095327U,	// VMULslfd
    2249095327U,	// VMULslfq
    36075679U,	// VMULslv2i32
    36206751U,	// VMULslv4i16
    36075679U,	// VMULslv4i32
    36206751U,	// VMULslv8i16
    36333727U,	// VMULv16i8
    36071583U,	// VMULv2i32
    36202655U,	// VMULv4i16
    36071583U,	// VMULv4i32
    36202655U,	// VMULv8i16
    36333727U,	// VMULv8i8
    18718U,	// VMVNd
    18718U,	// VMVNq
    237390110U,	// VMVNv2i32
    237521182U,	// VMVNv4i16
    237390110U,	// VMVNv4i32
    237521182U,	// VMVNv8i16
    2248951640U,	// VNEGD
    2249082712U,	// VNEGS
    2249082712U,	// VNEGf32q
    2249082712U,	// VNEGfd
    1109018456U,	// VNEGs16d
    1109018456U,	// VNEGs16q
    1108887384U,	// VNEGs32d
    1108887384U,	// VNEGs32q
    1109149528U,	// VNEGs8d
    1109149528U,	// VNEGs8q
    1175221619U,	// VNMLAD
    1175352691U,	// VNMLAS
    1175222741U,	// VNMLSD
    1175353813U,	// VNMLSS
    2248960153U,	// VNMULD
    2249091225U,	// VNMULS
    26875U,	// VORNd
    26875U,	// VORNq
    27027U,	// VORRd
    237398419U,	// VORRiv2i32
    237529491U,	// VORRiv4i16
    237398419U,	// VORRiv4i32
    237529491U,	// VORRiv8i16
    27027U,	// VORRq
    1092380663U,	// VPADALsv16i8
    1092118519U,	// VPADALsv2i32
    1092249591U,	// VPADALsv4i16
    1092118519U,	// VPADALsv4i32
    1092249591U,	// VPADALsv8i16
    1092380663U,	// VPADALsv8i8
    1092773879U,	// VPADALuv16i8
    1092511735U,	// VPADALuv2i32
    1092642807U,	// VPADALuv4i16
    1092511735U,	// VPADALuv4i32
    1092642807U,	// VPADALuv8i16
    1092773879U,	// VPADALuv8i8
    1109149747U,	// VPADDLsv16i8
    1108887603U,	// VPADDLsv2i32
    1109018675U,	// VPADDLsv4i16
    1108887603U,	// VPADDLsv4i32
    1109018675U,	// VPADDLsv8i16
    1109149747U,	// VPADDLsv8i8
    1109542963U,	// VPADDLuv16i8
    1109280819U,	// VPADDLuv2i32
    1109411891U,	// VPADDLuv4i16
    1109280819U,	// VPADDLuv4i32
    1109411891U,	// VPADDLuv8i16
    1109542963U,	// VPADDLuv8i8
    2249090762U,	// VPADDf
    36202186U,	// VPADDi16
    36071114U,	// VPADDi32
    36333258U,	// VPADDi8
    2249091857U,	// VPMAXf
    35285777U,	// VPMAXs16
    35154705U,	// VPMAXs32
    35416849U,	// VPMAXs8
    35678993U,	// VPMAXu16
    35547921U,	// VPMAXu32
    35810065U,	// VPMAXu8
    2249091280U,	// VPMINf
    35285200U,	// VPMINs16
    35154128U,	// VPMINs32
    35416272U,	// VPMINs8
    35678416U,	// VPMINu16
    35547344U,	// VPMINu32
    35809488U,	// VPMINu8
    1109150138U,	// VQABSv16i8
    1108887994U,	// VQABSv2i32
    1109019066U,	// VQABSv4i16
    1108887994U,	// VQABSv4i32
    1109019066U,	// VQABSv8i16
    1109150138U,	// VQABSv8i8
    35415760U,	// VQADDsv16i8
    39478992U,	// VQADDsv1i64
    35153616U,	// VQADDsv2i32
    39478992U,	// VQADDsv2i64
    35284688U,	// VQADDsv4i16
    35153616U,	// VQADDsv4i32
    35284688U,	// VQADDsv8i16
    35415760U,	// VQADDsv8i8
    35808976U,	// VQADDuv16i8
    39610064U,	// VQADDuv1i64
    35546832U,	// VQADDuv2i32
    39610064U,	// VQADDuv2i64
    35677904U,	// VQADDuv4i16
    35546832U,	// VQADDuv4i32
    35677904U,	// VQADDuv8i16
    35808976U,	// VQADDuv8i8
    18417662U,	// VQDMLALslv2i32
    18548734U,	// VQDMLALslv4i16
    18380798U,	// VQDMLALv2i64
    18511870U,	// VQDMLALv4i32
    18417793U,	// VQDMLSLslv2i32
    18548865U,	// VQDMLSLslv4i16
    18380929U,	// VQDMLSLv2i64
    18512001U,	// VQDMLSLv4i32
    35157879U,	// VQDMULHslv2i32
    35288951U,	// VQDMULHslv4i16
    35157879U,	// VQDMULHslv4i32
    35288951U,	// VQDMULHslv8i16
    35153783U,	// VQDMULHv2i32
    35284855U,	// VQDMULHv4i16
    35153783U,	// VQDMULHv4i32
    35284855U,	// VQDMULHv8i16
    35158114U,	// VQDMULLslv2i32
    35289186U,	// VQDMULLslv4i16
    35154018U,	// VQDMULLv2i64
    35285090U,	// VQDMULLv4i32
    1113213206U,	// VQMOVNsuv2i32
    1108887830U,	// VQMOVNsuv4i16
    1109018902U,	// VQMOVNsuv8i8
    1113213219U,	// VQMOVNsv2i32
    1108887843U,	// VQMOVNsv4i16
    1109018915U,	// VQMOVNsv8i8
    1113344291U,	// VQMOVNuv2i32
    1109281059U,	// VQMOVNuv4i16
    1109412131U,	// VQMOVNuv8i8
    1109149522U,	// VQNEGv16i8
    1108887378U,	// VQNEGv2i32
    1109018450U,	// VQNEGv4i16
    1108887378U,	// VQNEGv4i32
    1109018450U,	// VQNEGv8i16
    1109149522U,	// VQNEGv8i8
    35157887U,	// VQRDMULHslv2i32
    35288959U,	// VQRDMULHslv4i16
    35157887U,	// VQRDMULHslv4i32
    35288959U,	// VQRDMULHslv8i16
    35153791U,	// VQRDMULHv2i32
    35284863U,	// VQRDMULHv4i16
    35153791U,	// VQRDMULHv4i32
    35284863U,	// VQRDMULHv8i16
    35416138U,	// VQRSHLsv16i8
    39479370U,	// VQRSHLsv1i64
    35153994U,	// VQRSHLsv2i32
    39479370U,	// VQRSHLsv2i64
    35285066U,	// VQRSHLsv4i16
    35153994U,	// VQRSHLsv4i32
    35285066U,	// VQRSHLsv8i16
    35416138U,	// VQRSHLsv8i8
    35809354U,	// VQRSHLuv16i8
    39610442U,	// VQRSHLuv1i64
    35547210U,	// VQRSHLuv2i32
    39610442U,	// VQRSHLuv2i64
    35678282U,	// VQRSHLuv4i16
    35547210U,	// VQRSHLuv4i32
    35678282U,	// VQRSHLuv8i16
    35809354U,	// VQRSHLuv8i8
    39479526U,	// VQRSHRNsv2i32
    35154150U,	// VQRSHRNsv4i16
    35285222U,	// VQRSHRNsv8i8
    39610598U,	// VQRSHRNuv2i32
    35547366U,	// VQRSHRNuv4i16
    35678438U,	// VQRSHRNuv8i8
    39479565U,	// VQRSHRUNv2i32
    35154189U,	// VQRSHRUNv4i16
    35285261U,	// VQRSHRUNv8i8
    35416132U,	// VQSHLsiv16i8
    39479364U,	// VQSHLsiv1i64
    35153988U,	// VQSHLsiv2i32
    39479364U,	// VQSHLsiv2i64
    35285060U,	// VQSHLsiv4i16
    35153988U,	// VQSHLsiv4i32
    35285060U,	// VQSHLsiv8i16
    35416132U,	// VQSHLsiv8i8
    35416780U,	// VQSHLsuv16i8
    39480012U,	// VQSHLsuv1i64
    35154636U,	// VQSHLsuv2i32
    39480012U,	// VQSHLsuv2i64
    35285708U,	// VQSHLsuv4i16
    35154636U,	// VQSHLsuv4i32
    35285708U,	// VQSHLsuv8i16
    35416780U,	// VQSHLsuv8i8
    35416132U,	// VQSHLsv16i8
    39479364U,	// VQSHLsv1i64
    35153988U,	// VQSHLsv2i32
    39479364U,	// VQSHLsv2i64
    35285060U,	// VQSHLsv4i16
    35153988U,	// VQSHLsv4i32
    35285060U,	// VQSHLsv8i16
    35416132U,	// VQSHLsv8i8
    35809348U,	// VQSHLuiv16i8
    39610436U,	// VQSHLuiv1i64
    35547204U,	// VQSHLuiv2i32
    39610436U,	// VQSHLuiv2i64
    35678276U,	// VQSHLuiv4i16
    35547204U,	// VQSHLuiv4i32
    35678276U,	// VQSHLuiv8i16
    35809348U,	// VQSHLuiv8i8
    35809348U,	// VQSHLuv16i8
    39610436U,	// VQSHLuv1i64
    35547204U,	// VQSHLuv2i32
    39610436U,	// VQSHLuv2i64
    35678276U,	// VQSHLuv4i16
    35547204U,	// VQSHLuv4i32
    35678276U,	// VQSHLuv8i16
    35809348U,	// VQSHLuv8i8
    39479519U,	// VQSHRNsv2i32
    35154143U,	// VQSHRNsv4i16
    35285215U,	// VQSHRNsv8i8
    39610591U,	// VQSHRNuv2i32
    35547359U,	// VQSHRNuv4i16
    35678431U,	// VQSHRNuv8i8
    39479557U,	// VQSHRUNv2i32
    35154181U,	// VQSHRUNv4i16
    35285253U,	// VQSHRUNv8i8
    35415619U,	// VQSUBsv16i8
    39478851U,	// VQSUBsv1i64
    35153475U,	// VQSUBsv2i32
    39478851U,	// VQSUBsv2i64
    35284547U,	// VQSUBsv4i16
    35153475U,	// VQSUBsv4i32
    35284547U,	// VQSUBsv8i16
    35415619U,	// VQSUBsv8i8
    35808835U,	// VQSUBuv16i8
    39609923U,	// VQSUBuv1i64
    35546691U,	// VQSUBuv2i32
    39609923U,	// VQSUBuv2i64
    35677763U,	// VQSUBuv4i16
    35546691U,	// VQSUBuv4i32
    35677763U,	// VQSUBuv8i16
    35808835U,	// VQSUBuv8i8
    35940545U,	// VRADDHNv2i32
    36071617U,	// VRADDHNv4i16
    36202689U,	// VRADDHNv8i8
    1109280564U,	// VRECPEd
    2249082676U,	// VRECPEfd
    2249082676U,	// VRECPEfq
    1109280564U,	// VRECPEq
    2249091563U,	// VRECPSfd
    2249091563U,	// VRECPSfq
    2901179U,	// VREV16d8
    2901179U,	// VREV16q8
    4342758U,	// VREV32d16
    2900966U,	// VREV32d8
    4342758U,	// VREV32q16
    2900966U,	// VREV32q8
    4342834U,	// VREV64d16
    4473906U,	// VREV64d32
    2901042U,	// VREV64d8
    4342834U,	// VREV64q16
    4473906U,	// VREV64q32
    2901042U,	// VREV64q8
    35415741U,	// VRHADDsv16i8
    35153597U,	// VRHADDsv2i32
    35284669U,	// VRHADDsv4i16
    35153597U,	// VRHADDsv4i32
    35284669U,	// VRHADDsv8i16
    35415741U,	// VRHADDsv8i8
    35808957U,	// VRHADDuv16i8
    35546813U,	// VRHADDuv2i32
    35677885U,	// VRHADDuv4i16
    35546813U,	// VRHADDuv4i32
    35677885U,	// VRHADDuv8i16
    35808957U,	// VRHADDuv8i8
    1107448354U,	// VRINTAD
    1107448046U,	// VRINTAND
    1107448046U,	// VRINTANQ
    1107448046U,	// VRINTAS
    1107448402U,	// VRINTMD
    1107448094U,	// VRINTMND
    1107448094U,	// VRINTMNQ
    1107448094U,	// VRINTMS
    1107448414U,	// VRINTND
    1107448106U,	// VRINTNND
    1107448106U,	// VRINTNNQ
    1107448106U,	// VRINTNS
    1107448426U,	// VRINTPD
    1107448118U,	// VRINTPND
    1107448118U,	// VRINTPNQ
    1107448118U,	// VRINTPS
    2248952232U,	// VRINTRD
    2249083304U,	// VRINTRS
    2248952773U,	// VRINTXD
    1107448166U,	// VRINTXND
    1107448166U,	// VRINTXNQ
    2249083845U,	// VRINTXS
    2248952785U,	// VRINTZD
    1107448178U,	// VRINTZND
    1107448178U,	// VRINTZNQ
    2249083857U,	// VRINTZS
    35416145U,	// VRSHLsv16i8
    39479377U,	// VRSHLsv1i64
    35154001U,	// VRSHLsv2i32
    39479377U,	// VRSHLsv2i64
    35285073U,	// VRSHLsv4i16
    35154001U,	// VRSHLsv4i32
    35285073U,	// VRSHLsv8i16
    35416145U,	// VRSHLsv8i8
    35809361U,	// VRSHLuv16i8
    39610449U,	// VRSHLuv1i64
    35547217U,	// VRSHLuv2i32
    39610449U,	// VRSHLuv2i64
    35678289U,	// VRSHLuv4i16
    35547217U,	// VRSHLuv4i32
    35678289U,	// VRSHLuv8i16
    35809361U,	// VRSHLuv8i8
    35940590U,	// VRSHRNv2i32
    36071662U,	// VRSHRNv4i16
    36202734U,	// VRSHRNv8i8
    35416435U,	// VRSHRsv16i8
    39479667U,	// VRSHRsv1i64
    35154291U,	// VRSHRsv2i32
    39479667U,	// VRSHRsv2i64
    35285363U,	// VRSHRsv4i16
    35154291U,	// VRSHRsv4i32
    35285363U,	// VRSHRsv8i16
    35416435U,	// VRSHRsv8i8
    35809651U,	// VRSHRuv16i8
    39610739U,	// VRSHRuv1i64
    35547507U,	// VRSHRuv2i32
    39610739U,	// VRSHRuv2i64
    35678579U,	// VRSHRuv4i16
    35547507U,	// VRSHRuv4i32
    35678579U,	// VRSHRuv8i16
    35809651U,	// VRSHRuv8i8
    1109280577U,	// VRSQRTEd
    2249082689U,	// VRSQRTEfd
    2249082689U,	// VRSQRTEfq
    1109280577U,	// VRSQRTEq
    2249091585U,	// VRSQRTSfd
    2249091585U,	// VRSQRTSfq
    18642313U,	// VRSRAsv16i8
    22705545U,	// VRSRAsv1i64
    18380169U,	// VRSRAsv2i32
    22705545U,	// VRSRAsv2i64
    18511241U,	// VRSRAsv4i16
    18380169U,	// VRSRAsv4i32
    18511241U,	// VRSRAsv8i16
    18642313U,	// VRSRAsv8i8
    19035529U,	// VRSRAuv16i8
    22836617U,	// VRSRAuv1i64
    18773385U,	// VRSRAuv2i32
    22836617U,	// VRSRAuv2i64
    18904457U,	// VRSRAuv4i16
    18773385U,	// VRSRAuv4i32
    18904457U,	// VRSRAuv8i16
    19035529U,	// VRSRAuv8i8
    35940530U,	// VRSUBHNv2i32
    36071602U,	// VRSUBHNv4i16
    36202674U,	// VRSUBHNv8i8
    33706614U,	// VSELEQD
    33706306U,	// VSELEQS
    33706542U,	// VSELGED
    33706234U,	// VSELGES
    33706638U,	// VSELGTD
    33706330U,	// VSELGTS
    33706626U,	// VSELVSD
    33706318U,	// VSELVSS
    4356838U,	// VSETLNi16
    4487910U,	// VSETLNi32
    2915046U,	// VSETLNi8
    36202588U,	// VSHLLi16
    36071516U,	// VSHLLi32
    36333660U,	// VSHLLi8
    35154012U,	// VSHLLsv2i64
    35285084U,	// VSHLLsv4i32
    35416156U,	// VSHLLsv8i16
    35547228U,	// VSHLLuv2i64
    35678300U,	// VSHLLuv4i32
    35809372U,	// VSHLLuv8i16
    36333655U,	// VSHLiv16i8
    35940439U,	// VSHLiv1i64
    36071511U,	// VSHLiv2i32
    35940439U,	// VSHLiv2i64
    36202583U,	// VSHLiv4i16
    36071511U,	// VSHLiv4i32
    36202583U,	// VSHLiv8i16
    36333655U,	// VSHLiv8i8
    35416151U,	// VSHLsv16i8
    39479383U,	// VSHLsv1i64
    35154007U,	// VSHLsv2i32
    39479383U,	// VSHLsv2i64
    35285079U,	// VSHLsv4i16
    35154007U,	// VSHLsv4i32
    35285079U,	// VSHLsv8i16
    35416151U,	// VSHLsv8i8
    35809367U,	// VSHLuv16i8
    39610455U,	// VSHLuv1i64
    35547223U,	// VSHLuv2i32
    39610455U,	// VSHLuv2i64
    35678295U,	// VSHLuv4i16
    35547223U,	// VSHLuv4i32
    35678295U,	// VSHLuv8i16
    35809367U,	// VSHLuv8i8
    35940597U,	// VSHRNv2i32
    36071669U,	// VSHRNv4i16
    36202741U,	// VSHRNv8i8
    35416441U,	// VSHRsv16i8
    39479673U,	// VSHRsv1i64
    35154297U,	// VSHRsv2i32
    39479673U,	// VSHRsv2i64
    35285369U,	// VSHRsv4i16
    35154297U,	// VSHRsv4i32
    35285369U,	// VSHRsv8i16
    35416441U,	// VSHRsv8i8
    35809657U,	// VSHRuv16i8
    39610745U,	// VSHRuv1i64
    35547513U,	// VSHRuv2i32
    39610745U,	// VSHRuv2i64
    35678585U,	// VSHRuv4i16
    35547513U,	// VSHRuv4i32
    35678585U,	// VSHRuv8i16
    35809657U,	// VSHRuv8i8
    6187695U,	// VSHTOD
    6318767U,	// VSHTOS
    274877103U,	// VSITOD
    272517807U,	// VSITOS
    2914257U,	// VSLIv16i8
    4618193U,	// VSLIv1i64
    4487121U,	// VSLIv2i32
    4618193U,	// VSLIv2i64
    4356049U,	// VSLIv4i16
    4487121U,	// VSLIv4i32
    4356049U,	// VSLIv8i16
    2914257U,	// VSLIv8i8
    1180854959U,	// VSLTOD
    1178495663U,	// VSLTOS
    2248952451U,	// VSQRTD
    2249083523U,	// VSQRTS
    18642319U,	// VSRAsv16i8
    22705551U,	// VSRAsv1i64
    18380175U,	// VSRAsv2i32
    22705551U,	// VSRAsv2i64
    18511247U,	// VSRAsv4i16
    18380175U,	// VSRAsv4i32
    18511247U,	// VSRAsv8i16
    18642319U,	// VSRAsv8i8
    19035535U,	// VSRAuv16i8
    22836623U,	// VSRAuv1i64
    18773391U,	// VSRAuv2i32
    22836623U,	// VSRAuv2i64
    18904463U,	// VSRAuv4i16
    18773391U,	// VSRAuv4i32
    18904463U,	// VSRAuv8i16
    19035535U,	// VSRAuv8i8
    2914262U,	// VSRIv16i8
    4618198U,	// VSRIv1i64
    4487126U,	// VSRIv2i32
    4618198U,	// VSRIv2i64
    4356054U,	// VSRIv4i16
    4487126U,	// VSRIv4i32
    4356054U,	// VSRIv8i16
    2914262U,	// VSRIv8i8
    1095267297U,	// VST1LNd16
    1598596065U,	// VST1LNd16_UPD
    1095398369U,	// VST1LNd32
    1598727137U,	// VST1LNd32_UPD
    1095529441U,	// VST1LNd8
    1598858209U,	// VST1LNd8_UPD
    4355041U,	// VST1LNdAsm_16
    4486113U,	// VST1LNdAsm_32
    2913249U,	// VST1LNdAsm_8
    4355041U,	// VST1LNdWB_fixed_Asm_16
    4486113U,	// VST1LNdWB_fixed_Asm_32
    2913249U,	// VST1LNdWB_fixed_Asm_8
    4391905U,	// VST1LNdWB_register_Asm_16
    4522977U,	// VST1LNdWB_register_Asm_32
    2950113U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    541221857U,	// VST1d16
    557999073U,	// VST1d16Q
    574780385U,	// VST1d16Qwb_fixed
    591594465U,	// VST1d16Qwb_register
    608330721U,	// VST1d16T
    625112033U,	// VST1d16Twb_fixed
    641926113U,	// VST1d16Twb_register
    658666465U,	// VST1d16wb_fixed
    675480545U,	// VST1d16wb_register
    541352929U,	// VST1d32
    558130145U,	// VST1d32Q
    574911457U,	// VST1d32Qwb_fixed
    591725537U,	// VST1d32Qwb_register
    608461793U,	// VST1d32T
    625243105U,	// VST1d32Twb_fixed
    642057185U,	// VST1d32Twb_register
    658797537U,	// VST1d32wb_fixed
    675611617U,	// VST1d32wb_register
    541484001U,	// VST1d64
    558261217U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    575042529U,	// VST1d64Qwb_fixed
    591856609U,	// VST1d64Qwb_register
    608592865U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    625374177U,	// VST1d64Twb_fixed
    642188257U,	// VST1d64Twb_register
    658928609U,	// VST1d64wb_fixed
    675742689U,	// VST1d64wb_register
    539780065U,	// VST1d8
    556557281U,	// VST1d8Q
    573338593U,	// VST1d8Qwb_fixed
    590152673U,	// VST1d8Qwb_register
    606888929U,	// VST1d8T
    623670241U,	// VST1d8Twb_fixed
    640484321U,	// VST1d8Twb_register
    657224673U,	// VST1d8wb_fixed
    674038753U,	// VST1d8wb_register
    692216801U,	// VST1q16
    708998113U,	// VST1q16wb_fixed
    725812193U,	// VST1q16wb_register
    692347873U,	// VST1q32
    709129185U,	// VST1q32wb_fixed
    725943265U,	// VST1q32wb_register
    692478945U,	// VST1q64
    709260257U,	// VST1q64wb_fixed
    726074337U,	// VST1q64wb_register
    690775009U,	// VST1q8
    707556321U,	// VST1q8wb_fixed
    724370401U,	// VST1q8wb_register
    1095304221U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    1598649373U,	// VST2LNd16_UPD
    1095435293U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    1598780445U,	// VST2LNd32_UPD
    1095566365U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    1598911517U,	// VST2LNd8_UPD
    4355101U,	// VST2LNdAsm_16
    4486173U,	// VST2LNdAsm_32
    2913309U,	// VST2LNdAsm_8
    4355101U,	// VST2LNdWB_fixed_Asm_16
    4486173U,	// VST2LNdWB_fixed_Asm_32
    2913309U,	// VST2LNdWB_fixed_Asm_8
    4391965U,	// VST2LNdWB_register_Asm_16
    4523037U,	// VST2LNdWB_register_Asm_32
    2950173U,	// VST2LNdWB_register_Asm_8
    1095304221U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    1598649373U,	// VST2LNq16_UPD
    1095435293U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    1598780445U,	// VST2LNq32_UPD
    4355101U,	// VST2LNqAsm_16
    4486173U,	// VST2LNqAsm_32
    4355101U,	// VST2LNqWB_fixed_Asm_16
    4486173U,	// VST2LNqWB_fixed_Asm_32
    4391965U,	// VST2LNqWB_register_Asm_16
    4523037U,	// VST2LNqWB_register_Asm_32
    742548509U,	// VST2b16
    759329821U,	// VST2b16wb_fixed
    776143901U,	// VST2b16wb_register
    742679581U,	// VST2b32
    759460893U,	// VST2b32wb_fixed
    776274973U,	// VST2b32wb_register
    741106717U,	// VST2b8
    757888029U,	// VST2b8wb_fixed
    774702109U,	// VST2b8wb_register
    692216861U,	// VST2d16
    708998173U,	// VST2d16wb_fixed
    725812253U,	// VST2d16wb_register
    692347933U,	// VST2d32
    709129245U,	// VST2d32wb_fixed
    725943325U,	// VST2d32wb_register
    690775069U,	// VST2d8
    707556381U,	// VST2d8wb_fixed
    724370461U,	// VST2d8wb_register
    557999133U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    574780445U,	// VST2q16wb_fixed
    591594525U,	// VST2q16wb_register
    558130205U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    574911517U,	// VST2q32wb_fixed
    591725597U,	// VST2q32wb_register
    556557341U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    573338653U,	// VST2q8wb_fixed
    590152733U,	// VST2q8wb_register
    1095279661U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    1598661677U,	// VST3LNd16_UPD
    1095410733U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    1598792749U,	// VST3LNd32_UPD
    1095541805U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    1598923821U,	// VST3LNd8_UPD
    4355117U,	// VST3LNdAsm_16
    4486189U,	// VST3LNdAsm_32
    2913325U,	// VST3LNdAsm_8
    4355117U,	// VST3LNdWB_fixed_Asm_16
    4486189U,	// VST3LNdWB_fixed_Asm_32
    2913325U,	// VST3LNdWB_fixed_Asm_8
    4391981U,	// VST3LNdWB_register_Asm_16
    4523053U,	// VST3LNdWB_register_Asm_32
    2950189U,	// VST3LNdWB_register_Asm_8
    1095279661U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    1598661677U,	// VST3LNq16_UPD
    1095410733U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    1598792749U,	// VST3LNq32_UPD
    4355117U,	// VST3LNqAsm_16
    4486189U,	// VST3LNqAsm_32
    4355117U,	// VST3LNqWB_fixed_Asm_16
    4486189U,	// VST3LNqWB_fixed_Asm_32
    4391981U,	// VST3LNqWB_register_Asm_16
    4523053U,	// VST3LNqWB_register_Asm_32
    21562413U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    524907565U,	// VST3d16_UPD
    21693485U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    525038637U,	// VST3d32_UPD
    21824557U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    525169709U,	// VST3d8_UPD
    3577898029U,	// VST3dAsm_16
    3578029101U,	// VST3dAsm_32
    3576456237U,	// VST3dAsm_8
    3577898029U,	// VST3dWB_fixed_Asm_16
    3578029101U,	// VST3dWB_fixed_Asm_32
    3576456237U,	// VST3dWB_fixed_Asm_8
    3577902125U,	// VST3dWB_register_Asm_16
    3578033197U,	// VST3dWB_register_Asm_32
    3576460333U,	// VST3dWB_register_Asm_8
    21562413U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    524907565U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    21693485U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    525038637U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    21824557U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    525169709U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    1531077677U,	// VST3qAsm_16
    1531208749U,	// VST3qAsm_32
    1529635885U,	// VST3qAsm_8
    3678561325U,	// VST3qWB_fixed_Asm_16
    3678692397U,	// VST3qWB_fixed_Asm_32
    3677119533U,	// VST3qWB_fixed_Asm_8
    457339949U,	// VST3qWB_register_Asm_16
    457471021U,	// VST3qWB_register_Asm_32
    455898157U,	// VST3qWB_register_Asm_8
    1095332926U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    1598653502U,	// VST4LNd16_UPD
    1095463998U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    1598784574U,	// VST4LNd32_UPD
    1095595070U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    1598915646U,	// VST4LNd8_UPD
    4355134U,	// VST4LNdAsm_16
    4486206U,	// VST4LNdAsm_32
    2913342U,	// VST4LNdAsm_8
    4355134U,	// VST4LNdWB_fixed_Asm_16
    4486206U,	// VST4LNdWB_fixed_Asm_32
    2913342U,	// VST4LNdWB_fixed_Asm_8
    4391998U,	// VST4LNdWB_register_Asm_16
    4523070U,	// VST4LNdWB_register_Asm_32
    2950206U,	// VST4LNdWB_register_Asm_8
    1095332926U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    1598653502U,	// VST4LNq16_UPD
    1095463998U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    1598784574U,	// VST4LNq32_UPD
    4355134U,	// VST4LNqAsm_16
    4486206U,	// VST4LNqAsm_32
    4355134U,	// VST4LNqWB_fixed_Asm_16
    4486206U,	// VST4LNqWB_fixed_Asm_32
    4391998U,	// VST4LNqWB_register_Asm_16
    4523070U,	// VST4LNqWB_register_Asm_32
    21537854U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    524919870U,	// VST4d16_UPD
    21668926U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    525050942U,	// VST4d32_UPD
    21799998U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    525182014U,	// VST4d8_UPD
    3561120830U,	// VST4dAsm_16
    3561251902U,	// VST4dAsm_32
    3559679038U,	// VST4dAsm_8
    3561120830U,	// VST4dWB_fixed_Asm_16
    3561251902U,	// VST4dWB_fixed_Asm_32
    3559679038U,	// VST4dWB_fixed_Asm_8
    3561124926U,	// VST4dWB_register_Asm_16
    3561255998U,	// VST4dWB_register_Asm_32
    3559683134U,	// VST4dWB_register_Asm_8
    21537854U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    524919870U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    21668926U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    525050942U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    21799998U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    525182014U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    1581409342U,	// VST4qAsm_16
    1581540414U,	// VST4qAsm_32
    1579967550U,	// VST4qAsm_8
    3728892990U,	// VST4qWB_fixed_Asm_16
    3729024062U,	// VST4qWB_fixed_Asm_32
    3727451198U,	// VST4qWB_fixed_Asm_8
    507671614U,	// VST4qWB_register_Asm_16
    507802686U,	// VST4qWB_register_Asm_32
    506229822U,	// VST4qWB_register_Asm_8
    33572300U,	// VSTMDDB_UPD
    34144U,	// VSTMDIA
    33572192U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    33572300U,	// VSTMSDB_UPD
    34144U,	// VSTMSIA
    33572192U,	// VSTMSIA_UPD
    27055U,	// VSTRD
    27055U,	// VSTRS
    2248959561U,	// VSUBD
    35940538U,	// VSUBHNv2i32
    36071610U,	// VSUBHNv4i16
    36202682U,	// VSUBHNv8i8
    35153949U,	// VSUBLsv2i64
    35285021U,	// VSUBLsv4i32
    35416093U,	// VSUBLsv8i16
    35547165U,	// VSUBLuv2i64
    35678237U,	// VSUBLuv4i32
    35809309U,	// VSUBLuv8i16
    2249090633U,	// VSUBS
    35154667U,	// VSUBWsv2i64
    35285739U,	// VSUBWsv4i32
    35416811U,	// VSUBWsv8i16
    35547883U,	// VSUBWuv2i64
    35678955U,	// VSUBWuv4i32
    35810027U,	// VSUBWuv8i16
    2249090633U,	// VSUBfd
    2249090633U,	// VSUBfq
    36333129U,	// VSUBv16i8
    35939913U,	// VSUBv1i64
    36070985U,	// VSUBv2i32
    35939913U,	// VSUBv2i64
    36202057U,	// VSUBv4i16
    36070985U,	// VSUBv4i32
    36202057U,	// VSUBv8i16
    36333129U,	// VSUBv8i8
    31052U,	// VSWPd
    31052U,	// VSWPq
    2910232U,	// VTBL1
    2910232U,	// VTBL2
    2910232U,	// VTBL3
    0U,	// VTBL3Pseudo
    2910232U,	// VTBL4
    0U,	// VTBL4Pseudo
    2915144U,	// VTBX1
    2915144U,	// VTBX2
    2915144U,	// VTBX3
    0U,	// VTBX3Pseudo
    2915144U,	// VTBX4
    0U,	// VTBX4Pseudo
    6580911U,	// VTOSHD
    6711983U,	// VTOSHS
    275270068U,	// VTOSIRD
    272255412U,	// VTOSIRS
    275270319U,	// VTOSIZD
    272255663U,	// VTOSIZS
    1181248175U,	// VTOSLD
    1178233519U,	// VTOSLS
    6974127U,	// VTOUHD
    7105199U,	// VTOUHS
    275663284U,	// VTOUIRD
    272386484U,	// VTOUIRS
    275663535U,	// VTOUIZD
    272386735U,	// VTOUIZS
    1181641391U,	// VTOULD
    1178364591U,	// VTOULS
    4356352U,	// VTRNd16
    4487424U,	// VTRNd32
    2914560U,	// VTRNd8
    4356352U,	// VTRNq16
    4487424U,	// VTRNq32
    2914560U,	// VTRNq8
    2910862U,	// VTSTv16i8
    4483726U,	// VTSTv2i32
    4352654U,	// VTSTv4i16
    4483726U,	// VTSTv4i32
    4352654U,	// VTSTv8i16
    2910862U,	// VTSTv8i8
    7367343U,	// VUHTOD
    7498415U,	// VUHTOS
    276056751U,	// VUITOD
    272648879U,	// VUITOS
    1182034607U,	// VULTOD
    1178626735U,	// VULTOS
    4356433U,	// VUZPd16
    2914641U,	// VUZPd8
    4356433U,	// VUZPq16
    4487505U,	// VUZPq32
    2914641U,	// VUZPq8
    4356409U,	// VZIPd16
    2914617U,	// VZIPd8
    4356409U,	// VZIPq16
    4487481U,	// VZIPq32
    2914617U,	// VZIPq8
    34119U,	// sysLDMDA
    33572167U,	// sysLDMDA_UPD
    34246U,	// sysLDMDB
    33572294U,	// sysLDMDB_UPD
    34986U,	// sysLDMIA
    33573034U,	// sysLDMIA_UPD
    34265U,	// sysLDMIB
    33572313U,	// sysLDMIB_UPD
    34125U,	// sysSTMDA
    33572173U,	// sysSTMDA_UPD
    34253U,	// sysSTMDB
    33572301U,	// sysSTMDB_UPD
    34990U,	// sysSTMIA
    33573038U,	// sysSTMIA_UPD
    34271U,	// sysSTMIB
    33572319U,	// sysSTMIB_UPD
    0U,	// t2ABS
    5756U,	// t2ADCri
    7739004U,	// t2ADCrr
    7743100U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    7739065U,	// t2ADDri
    27378U,	// t2ADDri12
    7739065U,	// t2ADDrr
    7743161U,	// t2ADDrs
    7752042U,	// t2ADR
    5870U,	// t2ANDri
    7739118U,	// t2ANDrr
    7743214U,	// t2ANDrs
    7739800U,	// t2ASRri
    7739800U,	// t2ASRrr
    1081509271U,	// t2B
    26244U,	// t2BFC
    30665U,	// t2BFI
    5769U,	// t2BICri
    7739017U,	// t2BICrr
    7743113U,	// t2BICrs
    0U,	// t2BR_JT
    1073776603U,	// t2BXJ
    1081509271U,	// t2Bcc
    2197858613U,	// t2CDP
    2197857287U,	// t2CDP2
    433035U,	// t2CLREX
    19405U,	// t2CLZ
    7751899U,	// t2CMNri
    7751899U,	// t2CMNzrr
    7760091U,	// t2CMNzrs
    7751999U,	// t2CMPri
    7751999U,	// t2CMPrr
    7760191U,	// t2CMPrs
    414521U,	// t2CPS1p
    1165412846U,	// t2CPS2p
    83937774U,	// t2CPS3p
    33706710U,	// t2CRC32B
    33706718U,	// t2CRC32CB
    33706777U,	// t2CRC32CH
    33706839U,	// t2CRC32CW
    33706769U,	// t2CRC32H
    33706831U,	// t2CRC32W
    1073776462U,	// t2DBG
    431067U,	// t2DCPS1
    431127U,	// t2DCPS2
    431143U,	// t2DCPS3
    788563434U,	// t2DMB
    788563453U,	// t2DSB
    6534U,	// t2EORri
    7739782U,	// t2EORrr
    7743878U,	// t2EORrs
    1081510521U,	// t2HINT
    805340673U,	// t2ISB
    117504615U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    17731U,	// t2LDA
    17812U,	// t2LDAB
    19321U,	// t2LDAEX
    18012U,	// t2LDAEXB
    26376U,	// t2LDAEXD
    18349U,	// t2LDAEXH
    18269U,	// t2LDAH
    50362335U,	// t2LDC2L_OFFSET
    50362335U,	// t2LDC2L_OPTION
    50362335U,	// t2LDC2L_POST
    50362335U,	// t2LDC2L_PRE
    50361325U,	// t2LDC2_OFFSET
    50361325U,	// t2LDC2_OPTION
    50361325U,	// t2LDC2_POST
    50361325U,	// t2LDC2_PRE
    50362403U,	// t2LDCL_OFFSET
    50362403U,	// t2LDCL_OPTION
    50362403U,	// t2LDCL_POST
    50362403U,	// t2LDCL_PRE
    50361984U,	// t2LDC_OFFSET
    50361984U,	// t2LDC_OPTION
    50361984U,	// t2LDC_POST
    50361984U,	// t2LDC_PRE
    34246U,	// t2LDMDB
    33572294U,	// t2LDMDB_UPD
    7768234U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    41306282U,	// t2LDMIA_UPD
    27188U,	// t2LDRBT
    30195U,	// t2LDRB_POST
    30195U,	// t2LDRB_PRE
    7759347U,	// t2LDRBi12
    26099U,	// t2LDRBi8
    7751155U,	// t2LDRBpci
    280051U,	// t2LDRBpcrel
    7763443U,	// t2LDRBs
    67314U,	// t2LDRD_POST
    67314U,	// t2LDRD_PRE
    30450U,	// t2LDRDi8
    27525U,	// t2LDREX
    18026U,	// t2LDREXB
    26390U,	// t2LDREXD
    18363U,	// t2LDREXH
    27218U,	// t2LDRHT
    30600U,	// t2LDRH_POST
    30600U,	// t2LDRH_PRE
    7759752U,	// t2LDRHi12
    26504U,	// t2LDRHi8
    7751560U,	// t2LDRHpci
    280456U,	// t2LDRHpcrel
    7763848U,	// t2LDRHs
    27200U,	// t2LDRSBT
    30213U,	// t2LDRSB_POST
    30213U,	// t2LDRSB_PRE
    7759365U,	// t2LDRSBi12
    26117U,	// t2LDRSBi8
    7751173U,	// t2LDRSBpci
    280069U,	// t2LDRSBpcrel
    7763461U,	// t2LDRSBs
    27230U,	// t2LDRSHT
    30610U,	// t2LDRSH_POST
    30610U,	// t2LDRSH_PRE
    7759762U,	// t2LDRSHi12
    26514U,	// t2LDRSHi8
    7751570U,	// t2LDRSHpci
    280466U,	// t2LDRSHpcrel
    7763858U,	// t2LDRSHs
    27262U,	// t2LDRT
    31087U,	// t2LDR_POST
    31087U,	// t2LDR_PRE
    7760239U,	// t2LDRi12
    26991U,	// t2LDRi8
    7752047U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    280943U,	// t2LDRpcrel
    7764335U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    7739525U,	// t2LSLri
    7739525U,	// t2LSLrr
    7739807U,	// t2LSRri
    7739807U,	// t2LSRrr
    2197858662U,	// t2MCR
    2197857292U,	// t2MCR2
    2197883278U,	// t2MCRR
    2197881873U,	// t2MCRR2
    30063U,	// t2MLA
    31185U,	// t2MLS
    0U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    0U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    0U,	// t2MOVCClsl
    0U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    0U,	// t2MOVCCror
    289289U,	// t2MOVSsi
    293385U,	// t2MOVSsr
    27316U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_pcrel
    7805671U,	// t2MOVi
    19196U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    7805671U,	// t2MOVr
    289511U,	// t2MOVsi
    293607U,	// t2MOVsr
    7752183U,	// t2MOVsra_flag
    7752188U,	// t2MOVsrl_flag
    201369233U,	// t2MRC
    201368562U,	// t2MRC2
    2197882517U,	// t2MRRC
    2197881847U,	// t2MRRC2
    2147518963U,	// t2MRS_AR
    18931U,	// t2MRS_M
    3221260787U,	// t2MRSsys_AR
    218122660U,	// t2MSR_AR
    218122660U,	// t2MSR_M
    26773U,	// t2MUL
    0U,	// t2MVNCCi
    71967U,	// t2MVNi
    7805215U,	// t2MVNr
    7739679U,	// t2MVNs
    6396U,	// t2ORNri
    6396U,	// t2ORNrr
    10492U,	// t2ORNrs
    6548U,	// t2ORRri
    7739796U,	// t2ORRrr
    7743892U,	// t2ORRrs
    31263U,	// t2PKHBT
    30226U,	// t2PKHTB
    822102775U,	// t2PLDWi12
    838879991U,	// t2PLDWi8
    855665399U,	// t2PLDWs
    822101730U,	// t2PLDi12
    838878946U,	// t2PLDi8
    872449762U,	// t2PLDpci
    855664354U,	// t2PLDs
    822101965U,	// t2PLIi12
    838879181U,	// t2PLIi8
    872449997U,	// t2PLIpci
    855664589U,	// t2PLIs
    26321U,	// t2QADD
    25752U,	// t2QADD16
    25855U,	// t2QADD8
    27574U,	// t2QASX
    26295U,	// t2QDADD
    26167U,	// t2QDSUB
    27433U,	// t2QSAX
    26180U,	// t2QSUB
    25714U,	// t2QSUB16
    25816U,	// t2QSUB8
    19045U,	// t2RBIT
    7752403U,	// t2REV
    7750844U,	// t2REV16
    7751581U,	// t2REVSH
    1073776063U,	// t2RFEDB
    3221259711U,	// t2RFEDBW
    1073775955U,	// t2RFEIA
    3221259603U,	// t2RFEIAW
    7739786U,	// t2RORri
    7739786U,	// t2RORrr
    72613U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    7738887U,	// t2RSBri
    5639U,	// t2RSBrr
    9735U,	// t2RSBrs
    25759U,	// t2SADD16
    25861U,	// t2SADD8
    27579U,	// t2SASX
    5752U,	// t2SBCri
    7739000U,	// t2SBCrr
    7743096U,	// t2SBCrs
    31639U,	// t2SBFX
    27351U,	// t2SDIV
    26688U,	// t2SEL
    25735U,	// t2SHADD16
    25840U,	// t2SHADD8
    27561U,	// t2SHASX
    27420U,	// t2SHSAX
    25697U,	// t2SHSUB16
    25801U,	// t2SHSUB8
    1073776269U,	// t2SMC
    30117U,	// t2SMLABB
    31256U,	// t2SMLABT
    30374U,	// t2SMLAD
    31565U,	// t2SMLADX
    43014U,	// t2SMLAL
    30124U,	// t2SMLALBB
    31269U,	// t2SMLALBT
    30427U,	// t2SMLALD
    31579U,	// t2SMLALDX
    30232U,	// t2SMLALTB
    31386U,	// t2SMLALTT
    30219U,	// t2SMLATB
    31379U,	// t2SMLATT
    30286U,	// t2SMLAWB
    31417U,	// t2SMLAWT
    30460U,	// t2SMLSD
    31595U,	// t2SMLSDX
    30438U,	// t2SMLSLD
    31587U,	// t2SMLSLDX
    30061U,	// t2SMMLA
    31071U,	// t2SMMLAR
    31183U,	// t2SMMLS
    31132U,	// t2SMMLSR
    26771U,	// t2SMMUL
    27006U,	// t2SMMULR
    26284U,	// t2SMUAD
    27476U,	// t2SMUADX
    26036U,	// t2SMULBB
    27181U,	// t2SMULBT
    30826U,	// t2SMULL
    26144U,	// t2SMULTB
    27298U,	// t2SMULTT
    26197U,	// t2SMULWB
    27328U,	// t2SMULWT
    26370U,	// t2SMUSD
    27506U,	// t2SMUSDX
    7898579U,	// t2SRSDB
    8029651U,	// t2SRSDB_UPD
    7898471U,	// t2SRSIA
    8029543U,	// t2SRSIA_UPD
    31246U,	// t2SSAT
    25773U,	// t2SSAT16
    27438U,	// t2SSAX
    25721U,	// t2SSUB16
    25822U,	// t2SSUB8
    50362341U,	// t2STC2L_OFFSET
    50362341U,	// t2STC2L_OPTION
    50362341U,	// t2STC2L_POST
    50362341U,	// t2STC2L_PRE
    50361341U,	// t2STC2_OFFSET
    50361341U,	// t2STC2_OPTION
    50361341U,	// t2STC2_POST
    50361341U,	// t2STC2_PRE
    50362408U,	// t2STCL_OFFSET
    50362408U,	// t2STCL_OPTION
    50362408U,	// t2STCL_POST
    50362408U,	// t2STCL_PRE
    50362014U,	// t2STC_OFFSET
    50362014U,	// t2STC_OPTION
    50362014U,	// t2STC_POST
    50362014U,	// t2STC_PRE
    18575U,	// t2STL
    17893U,	// t2STLB
    27519U,	// t2STLEX
    26211U,	// t2STLEXB
    30479U,	// t2STLEXD
    26548U,	// t2STLEXH
    18290U,	// t2STLH
    34253U,	// t2STMDB
    33572301U,	// t2STMDB_UPD
    7768238U,	// t2STMIA
    41306286U,	// t2STMIA_UPD
    27194U,	// t2STRBT
    33584632U,	// t2STRB_POST
    33584632U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    7759352U,	// t2STRBi12
    26104U,	// t2STRBi8
    7763448U,	// t2STRBs
    33621751U,	// t2STRD_POST
    33621751U,	// t2STRD_PRE
    30455U,	// t2STRDi8
    31633U,	// t2STREX
    26225U,	// t2STREXB
    30493U,	// t2STREXD
    26562U,	// t2STREXH
    27224U,	// t2STRHT
    33585037U,	// t2STRH_POST
    33585037U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    7759757U,	// t2STRHi12
    26509U,	// t2STRHi8
    7763853U,	// t2STRHs
    27273U,	// t2STRT
    33585584U,	// t2STR_POST
    33585584U,	// t2STR_PRE
    0U,	// t2STR_preidx
    7760304U,	// t2STRi12
    27056U,	// t2STRi8
    7764400U,	// t2STRs
    8161733U,	// t2SUBS_PC_LR
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    7738937U,	// t2SUBri
    27372U,	// t2SUBri12
    7738937U,	// t2SUBrr
    7743033U,	// t2SUBrs
    30105U,	// t2SXTAB
    29763U,	// t2SXTAB16
    30562U,	// t2SXTAH
    7759405U,	// t2SXTB
    25683U,	// t2SXTB16
    7759779U,	// t2SXTH
    889210299U,	// t2TBB
    0U,	// t2TBB_JT
    905987950U,	// t2TBH
    0U,	// t2TBH_JT
    7752027U,	// t2TEQri
    7752027U,	// t2TEQrr
    7760219U,	// t2TEQrs
    7752335U,	// t2TSTri
    7752335U,	// t2TSTrr
    7760527U,	// t2TSTrs
    25766U,	// t2UADD16
    25867U,	// t2UADD8
    27584U,	// t2UASX
    31644U,	// t2UBFX
    27356U,	// t2UDIV
    25743U,	// t2UHADD16
    25847U,	// t2UHADD8
    27567U,	// t2UHASX
    27426U,	// t2UHSAX
    25705U,	// t2UHSUB16
    25808U,	// t2UHSUB8
    30699U,	// t2UMAAL
    43020U,	// t2UMLAL
    30832U,	// t2UMULL
    25751U,	// t2UQADD16
    25854U,	// t2UQADD8
    27573U,	// t2UQASX
    27432U,	// t2UQSAX
    25713U,	// t2UQSUB16
    25815U,	// t2UQSUB8
    25834U,	// t2USAD8
    29890U,	// t2USADA8
    31251U,	// t2USAT
    25780U,	// t2USAT16
    27443U,	// t2USAX
    25728U,	// t2USUB16
    25828U,	// t2USUB8
    30111U,	// t2UXTAB
    29771U,	// t2UXTAB16
    30568U,	// t2UXTAH
    7759410U,	// t2UXTB
    25690U,	// t2UXTB16
    7759784U,	// t2UXTH
    931120764U,	// tADC
    26297U,	// tADDhirr
    25151161U,	// tADDi3
    931120825U,	// tADDi8
    26297U,	// tADDrSP
    26297U,	// tADDrSPi
    25151161U,	// tADDrr
    26297U,	// tADDspi
    26297U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    18794U,	// tADR
    931120878U,	// tAND
    25151896U,	// tASRri
    931121560U,	// tASRrr
    1073776023U,	// tB
    931120777U,	// tBIC
    414537U,	// tBKPT
    1090557978U,	// tBL
    1090558881U,	// tBLXi
    1090558881U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    1073777469U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    1073776023U,	// tBcc
    0U,	// tBfar
    1107448692U,	// tCBNZ
    1107448687U,	// tCBZ
    18651U,	// tCMNz
    18751U,	// tCMPhir
    18751U,	// tCMPi8
    18751U,	// tCMPr
    1157941742U,	// tCPS
    931121542U,	// tEOR
    1073777273U,	// tHINT
    414532U,	// tHLT
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    34986U,	// tLDMIA
    0U,	// tLDMIA_UPD
    26099U,	// tLDRBi
    26099U,	// tLDRBr
    26504U,	// tLDRHi
    26504U,	// tLDRHr
    0U,	// tLDRLIT_ga_abs
    0U,	// tLDRLIT_ga_pcrel
    26117U,	// tLDRSB
    26514U,	// tLDRSH
    26991U,	// tLDRi
    18799U,	// tLDRpci
    0U,	// tLDRpci_pic
    26991U,	// tLDRr
    26991U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    25151621U,	// tLSLri
    931121285U,	// tLSLrr
    25151903U,	// tLSRri
    931121567U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    1107448638U,	// tMOVSr
    276941543U,	// tMOVi8
    19175U,	// tMOVr
    25151637U,	// tMUL
    276941087U,	// tMVN
    931121556U,	// tORR
    0U,	// tPICADD
    939563331U,	// tPOP
    0U,	// tPOP_RET
    939562904U,	// tPUSH
    19155U,	// tREV
    17596U,	// tREV16
    18333U,	// tREVSH
    931121546U,	// tROR
    260163079U,	// tRSB
    931120760U,	// tSBC
    86793U,	// tSETEND
    33573038U,	// tSTMIA_UPD
    26104U,	// tSTRBi
    26104U,	// tSTRBr
    26509U,	// tSTRHi
    26509U,	// tSTRHr
    27056U,	// tSTRi
    27056U,	// tSTRr
    27056U,	// tSTRspi
    25151033U,	// tSUBi3
    931120697U,	// tSUBi8
    25151033U,	// tSUBrr
    26169U,	// tSUBspi
    1073776290U,	// tSVC
    17965U,	// tSXTB
    18339U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    2352U,	// tTRAP
    19087U,	// tTST
    17970U,	// tUXTB
    18344U,	// tUXTH
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// ABS
    0U,	// ADCri
    0U,	// ADCrr
    16384U,	// ADCrsi
    0U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    0U,	// ADDri
    0U,	// ADDrr
    16384U,	// ADDrsi
    0U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    8U,	// ADR
    0U,	// AESD
    0U,	// AESE
    0U,	// AESIMC
    0U,	// AESMC
    0U,	// ANDri
    0U,	// ANDrr
    16384U,	// ANDrsi
    0U,	// ANDrsr
    0U,	// ASRi
    0U,	// ASRr
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_I64
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_STORE_I64
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    16U,	// BFC
    32792U,	// BFI
    0U,	// BICri
    0U,	// BICrr
    16384U,	// BICrsi
    0U,	// BICrsr
    0U,	// BKPT
    0U,	// BL
    0U,	// BLX
    0U,	// BLX_pred
    0U,	// BLXi
    0U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    0U,	// BX
    0U,	// BXJ
    0U,	// BX_CALL
    0U,	// BX_RET
    0U,	// BX_pred
    0U,	// Bcc
    544U,	// CDP
    0U,	// CDP2
    0U,	// CLREX
    1024U,	// CLZ
    1024U,	// CMNri
    1024U,	// CMNzrr
    40U,	// CMNzrsi
    48U,	// CMNzrsr
    1024U,	// CMPri
    1024U,	// CMPrr
    40U,	// CMPrsi
    48U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_STRUCT_BYVAL_I32
    0U,	// CPS1p
    0U,	// CPS2p
    1048U,	// CPS3p
    1048U,	// CRC32B
    1048U,	// CRC32CB
    1048U,	// CRC32CH
    1048U,	// CRC32CW
    1048U,	// CRC32H
    1048U,	// CRC32W
    0U,	// DBG
    0U,	// DMB
    0U,	// DSB
    0U,	// EORri
    0U,	// EORrr
    16384U,	// EORrsi
    0U,	// EORrsr
    0U,	// FCONSTD
    0U,	// FCONSTS
    57U,	// FLDMXDB_UPD
    1088U,	// FLDMXIA
    57U,	// FLDMXIA_UPD
    0U,	// FMSTAT
    57U,	// FSTMXDB_UPD
    1088U,	// FSTMXIA
    57U,	// FSTMXIA_UPD
    0U,	// HINT
    0U,	// HLT
    0U,	// ISB
    0U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    72U,	// LDA
    72U,	// LDAB
    72U,	// LDAEX
    72U,	// LDAEXB
    1U,	// LDAEXD
    72U,	// LDAEXH
    72U,	// LDAH
    0U,	// LDC2L_OFFSET
    1U,	// LDC2L_OPTION
    1U,	// LDC2L_POST
    0U,	// LDC2L_PRE
    0U,	// LDC2_OFFSET
    1U,	// LDC2_OPTION
    1U,	// LDC2_POST
    0U,	// LDC2_PRE
    82U,	// LDCL_OFFSET
    49242U,	// LDCL_OPTION
    65626U,	// LDCL_POST
    98U,	// LDCL_PRE
    82U,	// LDC_OFFSET
    49242U,	// LDC_OPTION
    65626U,	// LDC_POST
    98U,	// LDC_PRE
    1088U,	// LDMDA
    57U,	// LDMDA_UPD
    1088U,	// LDMDB
    57U,	// LDMDB_UPD
    1088U,	// LDMIA
    0U,	// LDMIA_RET
    57U,	// LDMIA_UPD
    1088U,	// LDMIB
    57U,	// LDMIB_UPD
    72U,	// LDRBT_POST
    82008U,	// LDRBT_POST_IMM
    82008U,	// LDRBT_POST_REG
    82008U,	// LDRB_POST_IMM
    82008U,	// LDRB_POST_REG
    104U,	// LDRB_PRE_IMM
    112U,	// LDRB_PRE_REG
    120U,	// LDRBi12
    128U,	// LDRBrs
    98304U,	// LDRD
    2U,	// LDRD_PAIR
    1163264U,	// LDRD_POST
    131072U,	// LDRD_PRE
    72U,	// LDREX
    72U,	// LDREXB
    1U,	// LDREXD
    72U,	// LDREXH
    136U,	// LDRH
    147544U,	// LDRHTi
    163928U,	// LDRHTr
    180312U,	// LDRH_POST
    144U,	// LDRH_PRE
    0U,	// LDRLIT_ga_abs
    0U,	// LDRLIT_ga_pcrel
    0U,	// LDRLIT_ga_pcrel_ldr
    136U,	// LDRSB
    147544U,	// LDRSBTi
    163928U,	// LDRSBTr
    180312U,	// LDRSB_POST
    144U,	// LDRSB_PRE
    136U,	// LDRSH
    147544U,	// LDRSHTi
    163928U,	// LDRSHTr
    180312U,	// LDRSH_POST
    144U,	// LDRSH_PRE
    72U,	// LDRT_POST
    82008U,	// LDRT_POST_IMM
    82008U,	// LDRT_POST_REG
    82008U,	// LDR_POST_IMM
    82008U,	// LDR_POST_REG
    104U,	// LDR_PRE_IMM
    112U,	// LDR_PRE_REG
    120U,	// LDRcp
    120U,	// LDRi12
    128U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    0U,	// LSLi
    0U,	// LSLr
    0U,	// LSRi
    0U,	// LSRr
    2295328U,	// MCR
    152U,	// MCR2
    3343904U,	// MCRR
    213152U,	// MCRR2
    17825792U,	// MLA
    0U,	// MLAv5
    17825792U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    0U,	// MOVPCLR
    0U,	// MOVPCRX
    1048U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    1024U,	// MOVi
    1024U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    1024U,	// MOVr
    1024U,	// MOVr_TC
    40U,	// MOVsi
    48U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    0U,	// MRC
    0U,	// MRC2
    3343904U,	// MRRC
    213152U,	// MRRC2
    2U,	// MRS
    2U,	// MRSsys
    0U,	// MSR
    0U,	// MSRi
    0U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    1024U,	// MVNi
    1024U,	// MVNr
    40U,	// MVNsi
    48U,	// MVNsr
    0U,	// ORRri
    0U,	// ORRrr
    16384U,	// ORRrsi
    0U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    4194304U,	// PKHBT
    5242880U,	// PKHTB
    0U,	// PLDWi12
    0U,	// PLDWrs
    0U,	// PLDi12
    0U,	// PLDrs
    0U,	// PLIi12
    0U,	// PLIrs
    0U,	// QADD
    0U,	// QADD16
    0U,	// QADD8
    0U,	// QASX
    0U,	// QDADD
    0U,	// QDSUB
    0U,	// QSAX
    0U,	// QSUB
    0U,	// QSUB16
    0U,	// QSUB8
    1024U,	// RBIT
    1024U,	// REV
    1024U,	// REV16
    1024U,	// REVSH
    0U,	// RFEDA
    0U,	// RFEDA_UPD
    0U,	// RFEDB
    0U,	// RFEDB_UPD
    0U,	// RFEIA
    0U,	// RFEIA_UPD
    0U,	// RFEIB
    0U,	// RFEIB_UPD
    0U,	// RORi
    0U,	// RORr
    0U,	// RRX
    1024U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    0U,	// RSBri
    0U,	// RSBrr
    16384U,	// RSBrsi
    0U,	// RSBrsr
    0U,	// RSCri
    0U,	// RSCrr
    16384U,	// RSCrsi
    0U,	// RSCrsr
    0U,	// SADD16
    0U,	// SADD8
    0U,	// SASX
    0U,	// SBCri
    0U,	// SBCrr
    16384U,	// SBCrsi
    0U,	// SBCrsr
    34603008U,	// SBFX
    0U,	// SDIV
    0U,	// SEL
    0U,	// SETEND
    1184U,	// SHA1C
    0U,	// SHA1H
    1184U,	// SHA1M
    1184U,	// SHA1P
    1184U,	// SHA1SU0
    0U,	// SHA1SU1
    1184U,	// SHA256H
    1184U,	// SHA256H2
    0U,	// SHA256SU0
    1184U,	// SHA256SU1
    0U,	// SHADD16
    0U,	// SHADD8
    0U,	// SHASX
    0U,	// SHSAX
    0U,	// SHSUB16
    0U,	// SHSUB8
    0U,	// SMC
    17825792U,	// SMLABB
    17825792U,	// SMLABT
    17825792U,	// SMLAD
    17825792U,	// SMLADX
    0U,	// SMLAL
    17825792U,	// SMLALBB
    17825792U,	// SMLALBT
    17825792U,	// SMLALD
    17825792U,	// SMLALDX
    17825792U,	// SMLALTB
    17825792U,	// SMLALTT
    0U,	// SMLALv5
    17825792U,	// SMLATB
    17825792U,	// SMLATT
    17825792U,	// SMLAWB
    17825792U,	// SMLAWT
    17825792U,	// SMLSD
    17825792U,	// SMLSDX
    17825792U,	// SMLSLD
    17825792U,	// SMLSLDX
    17825792U,	// SMMLA
    17825792U,	// SMMLAR
    17825792U,	// SMMLS
    17825792U,	// SMMLSR
    0U,	// SMMUL
    0U,	// SMMULR
    0U,	// SMUAD
    0U,	// SMUADX
    0U,	// SMULBB
    0U,	// SMULBT
    17825792U,	// SMULL
    0U,	// SMULLv5
    0U,	// SMULTB
    0U,	// SMULTT
    0U,	// SMULWB
    0U,	// SMULWT
    0U,	// SMUSD
    0U,	// SMUSDX
    0U,	// SRSDA
    0U,	// SRSDA_UPD
    0U,	// SRSDB
    0U,	// SRSDB_UPD
    0U,	// SRSIA
    0U,	// SRSIA_UPD
    0U,	// SRSIB
    0U,	// SRSIB_UPD
    2216U,	// SSAT
    1192U,	// SSAT16
    0U,	// SSAX
    0U,	// SSUB16
    0U,	// SSUB8
    0U,	// STC2L_OFFSET
    1U,	// STC2L_OPTION
    1U,	// STC2L_POST
    0U,	// STC2L_PRE
    0U,	// STC2_OFFSET
    1U,	// STC2_OPTION
    1U,	// STC2_POST
    0U,	// STC2_PRE
    82U,	// STCL_OFFSET
    49242U,	// STCL_OPTION
    65626U,	// STCL_POST
    98U,	// STCL_PRE
    82U,	// STC_OFFSET
    49242U,	// STC_OPTION
    65626U,	// STC_POST
    98U,	// STC_PRE
    72U,	// STL
    72U,	// STLB
    229376U,	// STLEX
    229376U,	// STLEXB
    176U,	// STLEXD
    229376U,	// STLEXH
    72U,	// STLH
    1088U,	// STMDA
    57U,	// STMDA_UPD
    1088U,	// STMDB
    57U,	// STMDB_UPD
    1088U,	// STMIA
    57U,	// STMIA_UPD
    1088U,	// STMIB
    57U,	// STMIB_UPD
    72U,	// STRBT_POST
    82008U,	// STRBT_POST_IMM
    82008U,	// STRBT_POST_REG
    82008U,	// STRB_POST_IMM
    82008U,	// STRB_POST_REG
    104U,	// STRB_PRE_IMM
    112U,	// STRB_PRE_REG
    120U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    128U,	// STRBrs
    98304U,	// STRD
    2U,	// STRD_PAIR
    1163288U,	// STRD_POST
    131096U,	// STRD_PRE
    229376U,	// STREX
    229376U,	// STREXB
    176U,	// STREXD
    229376U,	// STREXH
    136U,	// STRH
    147544U,	// STRHTi
    163928U,	// STRHTr
    180312U,	// STRH_POST
    144U,	// STRH_PRE
    0U,	// STRH_preidx
    72U,	// STRT_POST
    82008U,	// STRT_POST_IMM
    82008U,	// STRT_POST_REG
    82008U,	// STR_POST_IMM
    82008U,	// STR_POST_REG
    104U,	// STR_PRE_IMM
    112U,	// STR_PRE_REG
    120U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    128U,	// STRrs
    0U,	// SUBS_PC_LR
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    0U,	// SUBri
    0U,	// SUBrr
    16384U,	// SUBrsi
    0U,	// SUBrsr
    0U,	// SVC
    229376U,	// SWP
    229376U,	// SWPB
    6291456U,	// SXTAB
    6291456U,	// SXTAB16
    6291456U,	// SXTAH
    2560U,	// SXTB
    2560U,	// SXTB16
    2560U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1024U,	// TEQri
    1024U,	// TEQrr
    40U,	// TEQrsi
    48U,	// TEQrsr
    0U,	// TPsoft
    0U,	// TRAP
    0U,	// TRAPNaCl
    1024U,	// TSTri
    1024U,	// TSTrr
    40U,	// TSTrsi
    48U,	// TSTrsr
    0U,	// UADD16
    0U,	// UADD8
    0U,	// UASX
    34603008U,	// UBFX
    0U,	// UDIV
    0U,	// UHADD16
    0U,	// UHADD8
    0U,	// UHASX
    0U,	// UHSAX
    0U,	// UHSUB16
    0U,	// UHSUB8
    17825792U,	// UMAAL
    0U,	// UMLAL
    0U,	// UMLALv5
    17825792U,	// UMULL
    0U,	// UMULLv5
    0U,	// UQADD16
    0U,	// UQADD8
    0U,	// UQASX
    0U,	// UQSAX
    0U,	// UQSUB16
    0U,	// UQSUB8
    0U,	// USAD8
    17825792U,	// USADA8
    7340032U,	// USAT
    0U,	// USAT16
    0U,	// USAX
    0U,	// USUB16
    0U,	// USUB8
    6291456U,	// UXTAB
    6291456U,	// UXTAB16
    6291456U,	// UXTAH
    2560U,	// UXTB
    2560U,	// UXTB16
    2560U,	// UXTH
    1184U,	// VABALsv2i64
    1184U,	// VABALsv4i32
    1184U,	// VABALsv8i16
    1184U,	// VABALuv2i64
    1184U,	// VABALuv4i32
    1184U,	// VABALuv8i16
    1184U,	// VABAsv16i8
    1184U,	// VABAsv2i32
    1184U,	// VABAsv4i16
    1184U,	// VABAsv4i32
    1184U,	// VABAsv8i16
    1184U,	// VABAsv8i8
    1184U,	// VABAuv16i8
    1184U,	// VABAuv2i32
    1184U,	// VABAuv4i16
    1184U,	// VABAuv4i32
    1184U,	// VABAuv8i16
    1184U,	// VABAuv8i8
    1048U,	// VABDLsv2i64
    1048U,	// VABDLsv4i32
    1048U,	// VABDLsv8i16
    1048U,	// VABDLuv2i64
    1048U,	// VABDLuv4i32
    1048U,	// VABDLuv8i16
    247328U,	// VABDfd
    247328U,	// VABDfq
    1048U,	// VABDsv16i8
    1048U,	// VABDsv2i32
    1048U,	// VABDsv4i16
    1048U,	// VABDsv4i32
    1048U,	// VABDsv8i16
    1048U,	// VABDsv8i8
    1048U,	// VABDuv16i8
    1048U,	// VABDuv2i32
    1048U,	// VABDuv4i16
    1048U,	// VABDuv4i32
    1048U,	// VABDuv8i16
    1048U,	// VABDuv8i8
    56U,	// VABSD
    56U,	// VABSS
    56U,	// VABSfd
    56U,	// VABSfq
    0U,	// VABSv16i8
    0U,	// VABSv2i32
    0U,	// VABSv4i16
    0U,	// VABSv4i32
    0U,	// VABSv8i16
    0U,	// VABSv8i8
    247328U,	// VACGEd
    247328U,	// VACGEq
    247328U,	// VACGTd
    247328U,	// VACGTq
    247328U,	// VADDD
    1048U,	// VADDHNv2i32
    1048U,	// VADDHNv4i16
    1048U,	// VADDHNv8i8
    1048U,	// VADDLsv2i64
    1048U,	// VADDLsv4i32
    1048U,	// VADDLsv8i16
    1048U,	// VADDLuv2i64
    1048U,	// VADDLuv4i32
    1048U,	// VADDLuv8i16
    247328U,	// VADDS
    1048U,	// VADDWsv2i64
    1048U,	// VADDWsv4i32
    1048U,	// VADDWsv8i16
    1048U,	// VADDWuv2i64
    1048U,	// VADDWuv4i32
    1048U,	// VADDWuv8i16
    247328U,	// VADDfd
    247328U,	// VADDfq
    1048U,	// VADDv16i8
    1048U,	// VADDv1i64
    1048U,	// VADDv2i32
    1048U,	// VADDv2i64
    1048U,	// VADDv4i16
    1048U,	// VADDv4i32
    1048U,	// VADDv8i16
    1048U,	// VADDv8i8
    0U,	// VANDd
    0U,	// VANDq
    0U,	// VBICd
    0U,	// VBICiv2i32
    0U,	// VBICiv4i16
    0U,	// VBICiv4i32
    0U,	// VBICiv8i16
    0U,	// VBICq
    262168U,	// VBIFd
    262168U,	// VBIFq
    262168U,	// VBITd
    262168U,	// VBITq
    262168U,	// VBSLd
    262168U,	// VBSLq
    247328U,	// VCEQfd
    247328U,	// VCEQfq
    1048U,	// VCEQv16i8
    1048U,	// VCEQv2i32
    1048U,	// VCEQv4i16
    1048U,	// VCEQv4i32
    1048U,	// VCEQv8i16
    1048U,	// VCEQv8i8
    3U,	// VCEQzv16i8
    184U,	// VCEQzv2f32
    3U,	// VCEQzv2i32
    184U,	// VCEQzv4f32
    3U,	// VCEQzv4i16
    3U,	// VCEQzv4i32
    3U,	// VCEQzv8i16
    3U,	// VCEQzv8i8
    247328U,	// VCGEfd
    247328U,	// VCGEfq
    1048U,	// VCGEsv16i8
    1048U,	// VCGEsv2i32
    1048U,	// VCGEsv4i16
    1048U,	// VCGEsv4i32
    1048U,	// VCGEsv8i16
    1048U,	// VCGEsv8i8
    1048U,	// VCGEuv16i8
    1048U,	// VCGEuv2i32
    1048U,	// VCGEuv4i16
    1048U,	// VCGEuv4i32
    1048U,	// VCGEuv8i16
    1048U,	// VCGEuv8i8
    3U,	// VCGEzv16i8
    184U,	// VCGEzv2f32
    3U,	// VCGEzv2i32
    184U,	// VCGEzv4f32
    3U,	// VCGEzv4i16
    3U,	// VCGEzv4i32
    3U,	// VCGEzv8i16
    3U,	// VCGEzv8i8
    247328U,	// VCGTfd
    247328U,	// VCGTfq
    1048U,	// VCGTsv16i8
    1048U,	// VCGTsv2i32
    1048U,	// VCGTsv4i16
    1048U,	// VCGTsv4i32
    1048U,	// VCGTsv8i16
    1048U,	// VCGTsv8i8
    1048U,	// VCGTuv16i8
    1048U,	// VCGTuv2i32
    1048U,	// VCGTuv4i16
    1048U,	// VCGTuv4i32
    1048U,	// VCGTuv8i16
    1048U,	// VCGTuv8i8
    3U,	// VCGTzv16i8
    184U,	// VCGTzv2f32
    3U,	// VCGTzv2i32
    184U,	// VCGTzv4f32
    3U,	// VCGTzv4i16
    3U,	// VCGTzv4i32
    3U,	// VCGTzv8i16
    3U,	// VCGTzv8i8
    3U,	// VCLEzv16i8
    184U,	// VCLEzv2f32
    3U,	// VCLEzv2i32
    184U,	// VCLEzv4f32
    3U,	// VCLEzv4i16
    3U,	// VCLEzv4i32
    3U,	// VCLEzv8i16
    3U,	// VCLEzv8i8
    0U,	// VCLSv16i8
    0U,	// VCLSv2i32
    0U,	// VCLSv4i16
    0U,	// VCLSv4i32
    0U,	// VCLSv8i16
    0U,	// VCLSv8i8
    3U,	// VCLTzv16i8
    184U,	// VCLTzv2f32
    3U,	// VCLTzv2i32
    184U,	// VCLTzv4f32
    3U,	// VCLTzv4i16
    3U,	// VCLTzv4i32
    3U,	// VCLTzv8i16
    3U,	// VCLTzv8i8
    0U,	// VCLZv16i8
    0U,	// VCLZv2i32
    0U,	// VCLZv4i16
    0U,	// VCLZv4i32
    0U,	// VCLZv8i16
    0U,	// VCLZv8i8
    56U,	// VCMPD
    56U,	// VCMPED
    56U,	// VCMPES
    0U,	// VCMPEZD
    0U,	// VCMPEZS
    56U,	// VCMPS
    0U,	// VCMPZD
    0U,	// VCMPZS
    1024U,	// VCNTd
    1024U,	// VCNTq
    0U,	// VCVTANSD
    0U,	// VCVTANSQ
    0U,	// VCVTANUD
    0U,	// VCVTANUQ
    0U,	// VCVTASD
    0U,	// VCVTASS
    0U,	// VCVTAUD
    0U,	// VCVTAUS
    0U,	// VCVTBDH
    0U,	// VCVTBHD
    0U,	// VCVTBHS
    0U,	// VCVTBSH
    0U,	// VCVTDS
    0U,	// VCVTMNSD
    0U,	// VCVTMNSQ
    0U,	// VCVTMNUD
    0U,	// VCVTMNUQ
    0U,	// VCVTMSD
    0U,	// VCVTMSS
    0U,	// VCVTMUD
    0U,	// VCVTMUS
    0U,	// VCVTNNSD
    0U,	// VCVTNNSQ
    0U,	// VCVTNNUD
    0U,	// VCVTNNUQ
    0U,	// VCVTNSD
    0U,	// VCVTNSS
    0U,	// VCVTNUD
    0U,	// VCVTNUS
    0U,	// VCVTPNSD
    0U,	// VCVTPNSQ
    0U,	// VCVTPNUD
    0U,	// VCVTPNUQ
    0U,	// VCVTPSD
    0U,	// VCVTPSS
    0U,	// VCVTPUD
    0U,	// VCVTPUS
    0U,	// VCVTSD
    0U,	// VCVTTDH
    0U,	// VCVTTHD
    0U,	// VCVTTHS
    0U,	// VCVTTSH
    0U,	// VCVTf2h
    0U,	// VCVTf2sd
    0U,	// VCVTf2sq
    0U,	// VCVTf2ud
    0U,	// VCVTf2uq
    59U,	// VCVTf2xsd
    59U,	// VCVTf2xsq
    59U,	// VCVTf2xud
    59U,	// VCVTf2xuq
    0U,	// VCVTh2f
    0U,	// VCVTs2fd
    0U,	// VCVTs2fq
    0U,	// VCVTu2fd
    0U,	// VCVTu2fq
    59U,	// VCVTxs2fd
    59U,	// VCVTxs2fq
    59U,	// VCVTxu2fd
    59U,	// VCVTxu2fq
    247328U,	// VDIVD
    247328U,	// VDIVS
    1024U,	// VDUP16d
    1024U,	// VDUP16q
    1024U,	// VDUP32d
    1024U,	// VDUP32q
    1024U,	// VDUP8d
    1024U,	// VDUP8q
    3072U,	// VDUPLN16d
    3072U,	// VDUPLN16q
    3072U,	// VDUPLN32d
    3072U,	// VDUPLN32q
    3072U,	// VDUPLN8d
    3072U,	// VDUPLN8q
    0U,	// VEORd
    0U,	// VEORq
    17825792U,	// VEXTd16
    17825792U,	// VEXTd32
    17825792U,	// VEXTd8
    17825792U,	// VEXTq16
    17825792U,	// VEXTq32
    17825792U,	// VEXTq64
    17825792U,	// VEXTq8
    249379U,	// VFMAD
    249379U,	// VFMAS
    249379U,	// VFMAfd
    249379U,	// VFMAfq
    249379U,	// VFMSD
    249379U,	// VFMSS
    249379U,	// VFMSfd
    249379U,	// VFMSfq
    249379U,	// VFNMAD
    249379U,	// VFNMAS
    249379U,	// VFNMSD
    249379U,	// VFNMSS
    3072U,	// VGETLNi32
    3U,	// VGETLNs16
    3U,	// VGETLNs8
    3U,	// VGETLNu16
    3U,	// VGETLNu8
    1048U,	// VHADDsv16i8
    1048U,	// VHADDsv2i32
    1048U,	// VHADDsv4i16
    1048U,	// VHADDsv4i32
    1048U,	// VHADDsv8i16
    1048U,	// VHADDsv8i8
    1048U,	// VHADDuv16i8
    1048U,	// VHADDuv2i32
    1048U,	// VHADDuv4i16
    1048U,	// VHADDuv4i32
    1048U,	// VHADDuv8i16
    1048U,	// VHADDuv8i8
    1048U,	// VHSUBsv16i8
    1048U,	// VHSUBsv2i32
    1048U,	// VHSUBsv4i16
    1048U,	// VHSUBsv4i32
    1048U,	// VHSUBsv8i16
    1048U,	// VHSUBsv8i8
    1048U,	// VHSUBuv16i8
    1048U,	// VHSUBuv2i32
    1048U,	// VHSUBuv4i16
    1048U,	// VHSUBuv4i32
    1048U,	// VHSUBuv8i16
    1048U,	// VHSUBuv8i8
    59U,	// VLD1DUPd16
    196U,	// VLD1DUPd16wb_fixed
    4132U,	// VLD1DUPd16wb_register
    59U,	// VLD1DUPd32
    196U,	// VLD1DUPd32wb_fixed
    4132U,	// VLD1DUPd32wb_register
    59U,	// VLD1DUPd8
    196U,	// VLD1DUPd8wb_fixed
    4132U,	// VLD1DUPd8wb_register
    59U,	// VLD1DUPq16
    196U,	// VLD1DUPq16wb_fixed
    4132U,	// VLD1DUPq16wb_register
    59U,	// VLD1DUPq32
    196U,	// VLD1DUPq32wb_fixed
    4132U,	// VLD1DUPq32wb_register
    59U,	// VLD1DUPq8
    196U,	// VLD1DUPq8wb_fixed
    4132U,	// VLD1DUPq8wb_register
    283340U,	// VLD1LNd16
    299732U,	// VLD1LNd16_UPD
    283340U,	// VLD1LNd32
    299732U,	// VLD1LNd32_UPD
    283340U,	// VLD1LNd8
    299732U,	// VLD1LNd8_UPD
    1240U,	// VLD1LNdAsm_16
    1240U,	// VLD1LNdAsm_32
    1240U,	// VLD1LNdAsm_8
    5336U,	// VLD1LNdWB_fixed_Asm_16
    5336U,	// VLD1LNdWB_fixed_Asm_32
    5336U,	// VLD1LNdWB_fixed_Asm_8
    311512U,	// VLD1LNdWB_register_Asm_16
    311512U,	// VLD1LNdWB_register_Asm_32
    311512U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    59U,	// VLD1d16
    59U,	// VLD1d16Q
    196U,	// VLD1d16Qwb_fixed
    4132U,	// VLD1d16Qwb_register
    59U,	// VLD1d16T
    196U,	// VLD1d16Twb_fixed
    4132U,	// VLD1d16Twb_register
    196U,	// VLD1d16wb_fixed
    4132U,	// VLD1d16wb_register
    59U,	// VLD1d32
    59U,	// VLD1d32Q
    196U,	// VLD1d32Qwb_fixed
    4132U,	// VLD1d32Qwb_register
    59U,	// VLD1d32T
    196U,	// VLD1d32Twb_fixed
    4132U,	// VLD1d32Twb_register
    196U,	// VLD1d32wb_fixed
    4132U,	// VLD1d32wb_register
    59U,	// VLD1d64
    59U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudoWB_fixed
    0U,	// VLD1d64QPseudoWB_register
    196U,	// VLD1d64Qwb_fixed
    4132U,	// VLD1d64Qwb_register
    59U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudoWB_fixed
    0U,	// VLD1d64TPseudoWB_register
    196U,	// VLD1d64Twb_fixed
    4132U,	// VLD1d64Twb_register
    196U,	// VLD1d64wb_fixed
    4132U,	// VLD1d64wb_register
    59U,	// VLD1d8
    59U,	// VLD1d8Q
    196U,	// VLD1d8Qwb_fixed
    4132U,	// VLD1d8Qwb_register
    59U,	// VLD1d8T
    196U,	// VLD1d8Twb_fixed
    4132U,	// VLD1d8Twb_register
    196U,	// VLD1d8wb_fixed
    4132U,	// VLD1d8wb_register
    59U,	// VLD1q16
    196U,	// VLD1q16wb_fixed
    4132U,	// VLD1q16wb_register
    59U,	// VLD1q32
    196U,	// VLD1q32wb_fixed
    4132U,	// VLD1q32wb_register
    59U,	// VLD1q64
    196U,	// VLD1q64wb_fixed
    4132U,	// VLD1q64wb_register
    59U,	// VLD1q8
    196U,	// VLD1q8wb_fixed
    4132U,	// VLD1q8wb_register
    59U,	// VLD2DUPd16
    196U,	// VLD2DUPd16wb_fixed
    4132U,	// VLD2DUPd16wb_register
    59U,	// VLD2DUPd16x2
    196U,	// VLD2DUPd16x2wb_fixed
    4132U,	// VLD2DUPd16x2wb_register
    59U,	// VLD2DUPd32
    196U,	// VLD2DUPd32wb_fixed
    4132U,	// VLD2DUPd32wb_register
    59U,	// VLD2DUPd32x2
    196U,	// VLD2DUPd32x2wb_fixed
    4132U,	// VLD2DUPd32x2wb_register
    59U,	// VLD2DUPd8
    196U,	// VLD2DUPd8wb_fixed
    4132U,	// VLD2DUPd8wb_register
    59U,	// VLD2DUPd8x2
    196U,	// VLD2DUPd8x2wb_fixed
    4132U,	// VLD2DUPd8x2wb_register
    333524U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    350436U,	// VLD2LNd16_UPD
    333524U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    350436U,	// VLD2LNd32_UPD
    333524U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    350436U,	// VLD2LNd8_UPD
    1240U,	// VLD2LNdAsm_16
    1240U,	// VLD2LNdAsm_32
    1240U,	// VLD2LNdAsm_8
    5336U,	// VLD2LNdWB_fixed_Asm_16
    5336U,	// VLD2LNdWB_fixed_Asm_32
    5336U,	// VLD2LNdWB_fixed_Asm_8
    311512U,	// VLD2LNdWB_register_Asm_16
    311512U,	// VLD2LNdWB_register_Asm_32
    311512U,	// VLD2LNdWB_register_Asm_8
    333524U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    350436U,	// VLD2LNq16_UPD
    333524U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    350436U,	// VLD2LNq32_UPD
    1240U,	// VLD2LNqAsm_16
    1240U,	// VLD2LNqAsm_32
    5336U,	// VLD2LNqWB_fixed_Asm_16
    5336U,	// VLD2LNqWB_fixed_Asm_32
    311512U,	// VLD2LNqWB_register_Asm_16
    311512U,	// VLD2LNqWB_register_Asm_32
    59U,	// VLD2b16
    196U,	// VLD2b16wb_fixed
    4132U,	// VLD2b16wb_register
    59U,	// VLD2b32
    196U,	// VLD2b32wb_fixed
    4132U,	// VLD2b32wb_register
    59U,	// VLD2b8
    196U,	// VLD2b8wb_fixed
    4132U,	// VLD2b8wb_register
    59U,	// VLD2d16
    196U,	// VLD2d16wb_fixed
    4132U,	// VLD2d16wb_register
    59U,	// VLD2d32
    196U,	// VLD2d32wb_fixed
    4132U,	// VLD2d32wb_register
    59U,	// VLD2d8
    196U,	// VLD2d8wb_fixed
    4132U,	// VLD2d8wb_register
    59U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    196U,	// VLD2q16wb_fixed
    4132U,	// VLD2q16wb_register
    59U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    196U,	// VLD2q32wb_fixed
    4132U,	// VLD2q32wb_register
    59U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    196U,	// VLD2q8wb_fixed
    4132U,	// VLD2q8wb_register
    6892U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    367852U,	// VLD3DUPd16_UPD
    6892U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    367852U,	// VLD3DUPd32_UPD
    6892U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    367852U,	// VLD3DUPd8_UPD
    0U,	// VLD3DUPdAsm_16
    0U,	// VLD3DUPdAsm_32
    0U,	// VLD3DUPdAsm_8
    4U,	// VLD3DUPdWB_fixed_Asm_16
    4U,	// VLD3DUPdWB_fixed_Asm_32
    4U,	// VLD3DUPdWB_fixed_Asm_8
    1184U,	// VLD3DUPdWB_register_Asm_16
    1184U,	// VLD3DUPdWB_register_Asm_32
    1184U,	// VLD3DUPdWB_register_Asm_8
    6892U,	// VLD3DUPq16
    367852U,	// VLD3DUPq16_UPD
    6892U,	// VLD3DUPq32
    367852U,	// VLD3DUPq32_UPD
    6892U,	// VLD3DUPq8
    367852U,	// VLD3DUPq8_UPD
    0U,	// VLD3DUPqAsm_16
    0U,	// VLD3DUPqAsm_32
    0U,	// VLD3DUPqAsm_8
    4U,	// VLD3DUPqWB_fixed_Asm_16
    4U,	// VLD3DUPqWB_fixed_Asm_32
    4U,	// VLD3DUPqWB_fixed_Asm_8
    1184U,	// VLD3DUPqWB_register_Asm_16
    1184U,	// VLD3DUPqWB_register_Asm_32
    1184U,	// VLD3DUPqWB_register_Asm_8
    383204U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    398068U,	// VLD3LNd16_UPD
    383204U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    398068U,	// VLD3LNd32_UPD
    383204U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    398068U,	// VLD3LNd8_UPD
    1240U,	// VLD3LNdAsm_16
    1240U,	// VLD3LNdAsm_32
    1240U,	// VLD3LNdAsm_8
    5336U,	// VLD3LNdWB_fixed_Asm_16
    5336U,	// VLD3LNdWB_fixed_Asm_32
    5336U,	// VLD3LNdWB_fixed_Asm_8
    311512U,	// VLD3LNdWB_register_Asm_16
    311512U,	// VLD3LNdWB_register_Asm_32
    311512U,	// VLD3LNdWB_register_Asm_8
    383204U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    398068U,	// VLD3LNq16_UPD
    383204U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    398068U,	// VLD3LNq32_UPD
    1240U,	// VLD3LNqAsm_16
    1240U,	// VLD3LNqAsm_32
    5336U,	// VLD3LNqWB_fixed_Asm_16
    5336U,	// VLD3LNqWB_fixed_Asm_32
    311512U,	// VLD3LNqWB_register_Asm_16
    311512U,	// VLD3LNqWB_register_Asm_32
    58720256U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    75497472U,	// VLD3d16_UPD
    58720256U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    75497472U,	// VLD3d32_UPD
    58720256U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    75497472U,	// VLD3d8_UPD
    59U,	// VLD3dAsm_16
    59U,	// VLD3dAsm_32
    59U,	// VLD3dAsm_8
    195U,	// VLD3dWB_fixed_Asm_16
    195U,	// VLD3dWB_fixed_Asm_32
    195U,	// VLD3dWB_fixed_Asm_8
    249379U,	// VLD3dWB_register_Asm_16
    249379U,	// VLD3dWB_register_Asm_32
    249379U,	// VLD3dWB_register_Asm_8
    58720256U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    75497472U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    58720256U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    75497472U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    58720256U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    75497472U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    0U,	// VLD3qAsm_16
    0U,	// VLD3qAsm_32
    0U,	// VLD3qAsm_8
    4U,	// VLD3qWB_fixed_Asm_16
    4U,	// VLD3qWB_fixed_Asm_32
    4U,	// VLD3qWB_fixed_Asm_8
    1184U,	// VLD3qWB_register_Asm_16
    1184U,	// VLD3qWB_register_Asm_32
    1184U,	// VLD3qWB_register_Asm_8
    253180U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    7932U,	// VLD4DUPd16_UPD
    253180U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    7932U,	// VLD4DUPd32_UPD
    253180U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    7932U,	// VLD4DUPd8_UPD
    0U,	// VLD4DUPdAsm_16
    0U,	// VLD4DUPdAsm_32
    0U,	// VLD4DUPdAsm_8
    4U,	// VLD4DUPdWB_fixed_Asm_16
    4U,	// VLD4DUPdWB_fixed_Asm_32
    4U,	// VLD4DUPdWB_fixed_Asm_8
    1184U,	// VLD4DUPdWB_register_Asm_16
    1184U,	// VLD4DUPdWB_register_Asm_32
    1184U,	// VLD4DUPdWB_register_Asm_8
    253180U,	// VLD4DUPq16
    7932U,	// VLD4DUPq16_UPD
    253180U,	// VLD4DUPq32
    7932U,	// VLD4DUPq32_UPD
    253180U,	// VLD4DUPq8
    7932U,	// VLD4DUPq8_UPD
    0U,	// VLD4DUPqAsm_16
    0U,	// VLD4DUPqAsm_32
    0U,	// VLD4DUPqAsm_8
    4U,	// VLD4DUPqWB_fixed_Asm_16
    4U,	// VLD4DUPqWB_fixed_Asm_32
    4U,	// VLD4DUPqWB_fixed_Asm_8
    1184U,	// VLD4DUPqWB_register_Asm_16
    1184U,	// VLD4DUPqWB_register_Asm_32
    1184U,	// VLD4DUPqWB_register_Asm_8
    93591284U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    260U,	// VLD4LNd16_UPD
    93591284U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    260U,	// VLD4LNd32_UPD
    93591284U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    260U,	// VLD4LNd8_UPD
    1240U,	// VLD4LNdAsm_16
    1240U,	// VLD4LNdAsm_32
    1240U,	// VLD4LNdAsm_8
    5336U,	// VLD4LNdWB_fixed_Asm_16
    5336U,	// VLD4LNdWB_fixed_Asm_32
    5336U,	// VLD4LNdWB_fixed_Asm_8
    311512U,	// VLD4LNdWB_register_Asm_16
    311512U,	// VLD4LNdWB_register_Asm_32
    311512U,	// VLD4LNdWB_register_Asm_8
    93591284U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    260U,	// VLD4LNq16_UPD
    93591284U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    260U,	// VLD4LNq32_UPD
    1240U,	// VLD4LNqAsm_16
    1240U,	// VLD4LNqAsm_32
    5336U,	// VLD4LNqWB_fixed_Asm_16
    5336U,	// VLD4LNqWB_fixed_Asm_32
    311512U,	// VLD4LNqWB_register_Asm_16
    311512U,	// VLD4LNqWB_register_Asm_32
    286261248U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    823132160U,	// VLD4d16_UPD
    286261248U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    823132160U,	// VLD4d32_UPD
    286261248U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    823132160U,	// VLD4d8_UPD
    59U,	// VLD4dAsm_16
    59U,	// VLD4dAsm_32
    59U,	// VLD4dAsm_8
    195U,	// VLD4dWB_fixed_Asm_16
    195U,	// VLD4dWB_fixed_Asm_32
    195U,	// VLD4dWB_fixed_Asm_8
    249379U,	// VLD4dWB_register_Asm_16
    249379U,	// VLD4dWB_register_Asm_32
    249379U,	// VLD4dWB_register_Asm_8
    286261248U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    823132160U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    286261248U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    823132160U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    286261248U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    823132160U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    0U,	// VLD4qAsm_16
    0U,	// VLD4qAsm_32
    0U,	// VLD4qAsm_8
    4U,	// VLD4qWB_fixed_Asm_16
    4U,	// VLD4qWB_fixed_Asm_32
    4U,	// VLD4qWB_fixed_Asm_8
    1184U,	// VLD4qWB_register_Asm_16
    1184U,	// VLD4qWB_register_Asm_32
    1184U,	// VLD4qWB_register_Asm_8
    57U,	// VLDMDDB_UPD
    1088U,	// VLDMDIA
    57U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    57U,	// VLDMSDB_UPD
    1088U,	// VLDMSIA
    57U,	// VLDMSIA_UPD
    264U,	// VLDRD
    264U,	// VLDRS
    1048U,	// VMAXNMD
    1048U,	// VMAXNMND
    1048U,	// VMAXNMNQ
    1048U,	// VMAXNMS
    247328U,	// VMAXfd
    247328U,	// VMAXfq
    1048U,	// VMAXsv16i8
    1048U,	// VMAXsv2i32
    1048U,	// VMAXsv4i16
    1048U,	// VMAXsv4i32
    1048U,	// VMAXsv8i16
    1048U,	// VMAXsv8i8
    1048U,	// VMAXuv16i8
    1048U,	// VMAXuv2i32
    1048U,	// VMAXuv4i16
    1048U,	// VMAXuv4i32
    1048U,	// VMAXuv8i16
    1048U,	// VMAXuv8i8
    1048U,	// VMINNMD
    1048U,	// VMINNMND
    1048U,	// VMINNMNQ
    1048U,	// VMINNMS
    247328U,	// VMINfd
    247328U,	// VMINfq
    1048U,	// VMINsv16i8
    1048U,	// VMINsv2i32
    1048U,	// VMINsv4i16
    1048U,	// VMINsv4i32
    1048U,	// VMINsv8i16
    1048U,	// VMINsv8i8
    1048U,	// VMINuv16i8
    1048U,	// VMINuv2i32
    1048U,	// VMINuv4i16
    1048U,	// VMINuv4i32
    1048U,	// VMINuv8i16
    1048U,	// VMINuv8i8
    249379U,	// VMLAD
    8352U,	// VMLALslsv2i32
    8352U,	// VMLALslsv4i16
    8352U,	// VMLALsluv2i32
    8352U,	// VMLALsluv4i16
    1184U,	// VMLALsv2i64
    1184U,	// VMLALsv4i32
    1184U,	// VMLALsv8i16
    1184U,	// VMLALuv2i64
    1184U,	// VMLALuv4i32
    1184U,	// VMLALuv8i16
    249379U,	// VMLAS
    249379U,	// VMLAfd
    249379U,	// VMLAfq
    413219U,	// VMLAslfd
    413219U,	// VMLAslfq
    8352U,	// VMLAslv2i32
    8352U,	// VMLAslv4i16
    8352U,	// VMLAslv4i32
    8352U,	// VMLAslv8i16
    1184U,	// VMLAv16i8
    1184U,	// VMLAv2i32
    1184U,	// VMLAv4i16
    1184U,	// VMLAv4i32
    1184U,	// VMLAv8i16
    1184U,	// VMLAv8i8
    249379U,	// VMLSD
    8352U,	// VMLSLslsv2i32
    8352U,	// VMLSLslsv4i16
    8352U,	// VMLSLsluv2i32
    8352U,	// VMLSLsluv4i16
    1184U,	// VMLSLsv2i64
    1184U,	// VMLSLsv4i32
    1184U,	// VMLSLsv8i16
    1184U,	// VMLSLuv2i64
    1184U,	// VMLSLuv4i32
    1184U,	// VMLSLuv8i16
    249379U,	// VMLSS
    249379U,	// VMLSfd
    249379U,	// VMLSfq
    413219U,	// VMLSslfd
    413219U,	// VMLSslfq
    8352U,	// VMLSslv2i32
    8352U,	// VMLSslv4i16
    8352U,	// VMLSslv4i32
    8352U,	// VMLSslv8i16
    1184U,	// VMLSv16i8
    1184U,	// VMLSv2i32
    1184U,	// VMLSv4i16
    1184U,	// VMLSv4i32
    1184U,	// VMLSv8i16
    1184U,	// VMLSv8i8
    56U,	// VMOVD
    0U,	// VMOVDRR
    0U,	// VMOVDcc
    0U,	// VMOVLsv2i64
    0U,	// VMOVLsv4i32
    0U,	// VMOVLsv8i16
    0U,	// VMOVLuv2i64
    0U,	// VMOVLuv4i32
    0U,	// VMOVLuv8i16
    0U,	// VMOVNv2i32
    0U,	// VMOVNv4i16
    0U,	// VMOVNv8i8
    0U,	// VMOVRRD
    17825792U,	// VMOVRRS
    1024U,	// VMOVRS
    56U,	// VMOVS
    1024U,	// VMOVSR
    17825792U,	// VMOVSRR
    0U,	// VMOVScc
    0U,	// VMOVv16i8
    0U,	// VMOVv1i64
    0U,	// VMOVv2f32
    0U,	// VMOVv2i32
    0U,	// VMOVv2i64
    0U,	// VMOVv4f32
    0U,	// VMOVv4i16
    0U,	// VMOVv4i32
    0U,	// VMOVv8i16
    0U,	// VMOVv8i8
    5U,	// VMRS
    5U,	// VMRS_FPEXC
    5U,	// VMRS_FPINST
    5U,	// VMRS_FPINST2
    6U,	// VMRS_FPSID
    6U,	// VMRS_MVFR0
    6U,	// VMRS_MVFR1
    6U,	// VMRS_MVFR2
    0U,	// VMSR
    0U,	// VMSR_FPEXC
    0U,	// VMSR_FPINST
    0U,	// VMSR_FPINST2
    0U,	// VMSR_FPSID
    247328U,	// VMULD
    1048U,	// VMULLp64
    0U,	// VMULLp8
    8728U,	// VMULLslsv2i32
    8728U,	// VMULLslsv4i16
    8728U,	// VMULLsluv2i32
    8728U,	// VMULLsluv4i16
    1048U,	// VMULLsv2i64
    1048U,	// VMULLsv4i32
    1048U,	// VMULLsv8i16
    1048U,	// VMULLuv2i64
    1048U,	// VMULLuv4i32
    1048U,	// VMULLuv8i16
    247328U,	// VMULS
    247328U,	// VMULfd
    247328U,	// VMULfq
    0U,	// VMULpd
    0U,	// VMULpq
    427552U,	// VMULslfd
    427552U,	// VMULslfq
    8728U,	// VMULslv2i32
    8728U,	// VMULslv4i16
    8728U,	// VMULslv4i32
    8728U,	// VMULslv8i16
    1048U,	// VMULv16i8
    1048U,	// VMULv2i32
    1048U,	// VMULv4i16
    1048U,	// VMULv4i32
    1048U,	// VMULv8i16
    1048U,	// VMULv8i8
    1024U,	// VMVNd
    1024U,	// VMVNq
    0U,	// VMVNv2i32
    0U,	// VMVNv4i16
    0U,	// VMVNv4i32
    0U,	// VMVNv8i16
    56U,	// VNEGD
    56U,	// VNEGS
    56U,	// VNEGf32q
    56U,	// VNEGfd
    0U,	// VNEGs16d
    0U,	// VNEGs16q
    0U,	// VNEGs32d
    0U,	// VNEGs32q
    0U,	// VNEGs8d
    0U,	// VNEGs8q
    249379U,	// VNMLAD
    249379U,	// VNMLAS
    249379U,	// VNMLSD
    249379U,	// VNMLSS
    247328U,	// VNMULD
    247328U,	// VNMULS
    0U,	// VORNd
    0U,	// VORNq
    0U,	// VORRd
    0U,	// VORRiv2i32
    0U,	// VORRiv4i16
    0U,	// VORRiv4i32
    0U,	// VORRiv8i16
    0U,	// VORRq
    0U,	// VPADALsv16i8
    0U,	// VPADALsv2i32
    0U,	// VPADALsv4i16
    0U,	// VPADALsv4i32
    0U,	// VPADALsv8i16
    0U,	// VPADALsv8i8
    0U,	// VPADALuv16i8
    0U,	// VPADALuv2i32
    0U,	// VPADALuv4i16
    0U,	// VPADALuv4i32
    0U,	// VPADALuv8i16
    0U,	// VPADALuv8i8
    0U,	// VPADDLsv16i8
    0U,	// VPADDLsv2i32
    0U,	// VPADDLsv4i16
    0U,	// VPADDLsv4i32
    0U,	// VPADDLsv8i16
    0U,	// VPADDLsv8i8
    0U,	// VPADDLuv16i8
    0U,	// VPADDLuv2i32
    0U,	// VPADDLuv4i16
    0U,	// VPADDLuv4i32
    0U,	// VPADDLuv8i16
    0U,	// VPADDLuv8i8
    247328U,	// VPADDf
    1048U,	// VPADDi16
    1048U,	// VPADDi32
    1048U,	// VPADDi8
    247328U,	// VPMAXf
    1048U,	// VPMAXs16
    1048U,	// VPMAXs32
    1048U,	// VPMAXs8
    1048U,	// VPMAXu16
    1048U,	// VPMAXu32
    1048U,	// VPMAXu8
    247328U,	// VPMINf
    1048U,	// VPMINs16
    1048U,	// VPMINs32
    1048U,	// VPMINs8
    1048U,	// VPMINu16
    1048U,	// VPMINu32
    1048U,	// VPMINu8
    0U,	// VQABSv16i8
    0U,	// VQABSv2i32
    0U,	// VQABSv4i16
    0U,	// VQABSv4i32
    0U,	// VQABSv8i16
    0U,	// VQABSv8i8
    1048U,	// VQADDsv16i8
    1048U,	// VQADDsv1i64
    1048U,	// VQADDsv2i32
    1048U,	// VQADDsv2i64
    1048U,	// VQADDsv4i16
    1048U,	// VQADDsv4i32
    1048U,	// VQADDsv8i16
    1048U,	// VQADDsv8i8
    1048U,	// VQADDuv16i8
    1048U,	// VQADDuv1i64
    1048U,	// VQADDuv2i32
    1048U,	// VQADDuv2i64
    1048U,	// VQADDuv4i16
    1048U,	// VQADDuv4i32
    1048U,	// VQADDuv8i16
    1048U,	// VQADDuv8i8
    8352U,	// VQDMLALslv2i32
    8352U,	// VQDMLALslv4i16
    1184U,	// VQDMLALv2i64
    1184U,	// VQDMLALv4i32
    8352U,	// VQDMLSLslv2i32
    8352U,	// VQDMLSLslv4i16
    1184U,	// VQDMLSLv2i64
    1184U,	// VQDMLSLv4i32
    8728U,	// VQDMULHslv2i32
    8728U,	// VQDMULHslv4i16
    8728U,	// VQDMULHslv4i32
    8728U,	// VQDMULHslv8i16
    1048U,	// VQDMULHv2i32
    1048U,	// VQDMULHv4i16
    1048U,	// VQDMULHv4i32
    1048U,	// VQDMULHv8i16
    8728U,	// VQDMULLslv2i32
    8728U,	// VQDMULLslv4i16
    1048U,	// VQDMULLv2i64
    1048U,	// VQDMULLv4i32
    0U,	// VQMOVNsuv2i32
    0U,	// VQMOVNsuv4i16
    0U,	// VQMOVNsuv8i8
    0U,	// VQMOVNsv2i32
    0U,	// VQMOVNsv4i16
    0U,	// VQMOVNsv8i8
    0U,	// VQMOVNuv2i32
    0U,	// VQMOVNuv4i16
    0U,	// VQMOVNuv8i8
    0U,	// VQNEGv16i8
    0U,	// VQNEGv2i32
    0U,	// VQNEGv4i16
    0U,	// VQNEGv4i32
    0U,	// VQNEGv8i16
    0U,	// VQNEGv8i8
    8728U,	// VQRDMULHslv2i32
    8728U,	// VQRDMULHslv4i16
    8728U,	// VQRDMULHslv4i32
    8728U,	// VQRDMULHslv8i16
    1048U,	// VQRDMULHv2i32
    1048U,	// VQRDMULHv4i16
    1048U,	// VQRDMULHv4i32
    1048U,	// VQRDMULHv8i16
    1048U,	// VQRSHLsv16i8
    1048U,	// VQRSHLsv1i64
    1048U,	// VQRSHLsv2i32
    1048U,	// VQRSHLsv2i64
    1048U,	// VQRSHLsv4i16
    1048U,	// VQRSHLsv4i32
    1048U,	// VQRSHLsv8i16
    1048U,	// VQRSHLsv8i8
    1048U,	// VQRSHLuv16i8
    1048U,	// VQRSHLuv1i64
    1048U,	// VQRSHLuv2i32
    1048U,	// VQRSHLuv2i64
    1048U,	// VQRSHLuv4i16
    1048U,	// VQRSHLuv4i32
    1048U,	// VQRSHLuv8i16
    1048U,	// VQRSHLuv8i8
    1048U,	// VQRSHRNsv2i32
    1048U,	// VQRSHRNsv4i16
    1048U,	// VQRSHRNsv8i8
    1048U,	// VQRSHRNuv2i32
    1048U,	// VQRSHRNuv4i16
    1048U,	// VQRSHRNuv8i8
    1048U,	// VQRSHRUNv2i32
    1048U,	// VQRSHRUNv4i16
    1048U,	// VQRSHRUNv8i8
    1048U,	// VQSHLsiv16i8
    1048U,	// VQSHLsiv1i64
    1048U,	// VQSHLsiv2i32
    1048U,	// VQSHLsiv2i64
    1048U,	// VQSHLsiv4i16
    1048U,	// VQSHLsiv4i32
    1048U,	// VQSHLsiv8i16
    1048U,	// VQSHLsiv8i8
    1048U,	// VQSHLsuv16i8
    1048U,	// VQSHLsuv1i64
    1048U,	// VQSHLsuv2i32
    1048U,	// VQSHLsuv2i64
    1048U,	// VQSHLsuv4i16
    1048U,	// VQSHLsuv4i32
    1048U,	// VQSHLsuv8i16
    1048U,	// VQSHLsuv8i8
    1048U,	// VQSHLsv16i8
    1048U,	// VQSHLsv1i64
    1048U,	// VQSHLsv2i32
    1048U,	// VQSHLsv2i64
    1048U,	// VQSHLsv4i16
    1048U,	// VQSHLsv4i32
    1048U,	// VQSHLsv8i16
    1048U,	// VQSHLsv8i8
    1048U,	// VQSHLuiv16i8
    1048U,	// VQSHLuiv1i64
    1048U,	// VQSHLuiv2i32
    1048U,	// VQSHLuiv2i64
    1048U,	// VQSHLuiv4i16
    1048U,	// VQSHLuiv4i32
    1048U,	// VQSHLuiv8i16
    1048U,	// VQSHLuiv8i8
    1048U,	// VQSHLuv16i8
    1048U,	// VQSHLuv1i64
    1048U,	// VQSHLuv2i32
    1048U,	// VQSHLuv2i64
    1048U,	// VQSHLuv4i16
    1048U,	// VQSHLuv4i32
    1048U,	// VQSHLuv8i16
    1048U,	// VQSHLuv8i8
    1048U,	// VQSHRNsv2i32
    1048U,	// VQSHRNsv4i16
    1048U,	// VQSHRNsv8i8
    1048U,	// VQSHRNuv2i32
    1048U,	// VQSHRNuv4i16
    1048U,	// VQSHRNuv8i8
    1048U,	// VQSHRUNv2i32
    1048U,	// VQSHRUNv4i16
    1048U,	// VQSHRUNv8i8
    1048U,	// VQSUBsv16i8
    1048U,	// VQSUBsv1i64
    1048U,	// VQSUBsv2i32
    1048U,	// VQSUBsv2i64
    1048U,	// VQSUBsv4i16
    1048U,	// VQSUBsv4i32
    1048U,	// VQSUBsv8i16
    1048U,	// VQSUBsv8i8
    1048U,	// VQSUBuv16i8
    1048U,	// VQSUBuv1i64
    1048U,	// VQSUBuv2i32
    1048U,	// VQSUBuv2i64
    1048U,	// VQSUBuv4i16
    1048U,	// VQSUBuv4i32
    1048U,	// VQSUBuv8i16
    1048U,	// VQSUBuv8i8
    1048U,	// VRADDHNv2i32
    1048U,	// VRADDHNv4i16
    1048U,	// VRADDHNv8i8
    0U,	// VRECPEd
    56U,	// VRECPEfd
    56U,	// VRECPEfq
    0U,	// VRECPEq
    247328U,	// VRECPSfd
    247328U,	// VRECPSfq
    1024U,	// VREV16d8
    1024U,	// VREV16q8
    1024U,	// VREV32d16
    1024U,	// VREV32d8
    1024U,	// VREV32q16
    1024U,	// VREV32q8
    1024U,	// VREV64d16
    1024U,	// VREV64d32
    1024U,	// VREV64d8
    1024U,	// VREV64q16
    1024U,	// VREV64q32
    1024U,	// VREV64q8
    1048U,	// VRHADDsv16i8
    1048U,	// VRHADDsv2i32
    1048U,	// VRHADDsv4i16
    1048U,	// VRHADDsv4i32
    1048U,	// VRHADDsv8i16
    1048U,	// VRHADDsv8i8
    1048U,	// VRHADDuv16i8
    1048U,	// VRHADDuv2i32
    1048U,	// VRHADDuv4i16
    1048U,	// VRHADDuv4i32
    1048U,	// VRHADDuv8i16
    1048U,	// VRHADDuv8i8
    0U,	// VRINTAD
    0U,	// VRINTAND
    0U,	// VRINTANQ
    0U,	// VRINTAS
    0U,	// VRINTMD
    0U,	// VRINTMND
    0U,	// VRINTMNQ
    0U,	// VRINTMS
    0U,	// VRINTND
    0U,	// VRINTNND
    0U,	// VRINTNNQ
    0U,	// VRINTNS
    0U,	// VRINTPD
    0U,	// VRINTPND
    0U,	// VRINTPNQ
    0U,	// VRINTPS
    56U,	// VRINTRD
    56U,	// VRINTRS
    56U,	// VRINTXD
    0U,	// VRINTXND
    0U,	// VRINTXNQ
    56U,	// VRINTXS
    56U,	// VRINTZD
    0U,	// VRINTZND
    0U,	// VRINTZNQ
    56U,	// VRINTZS
    1048U,	// VRSHLsv16i8
    1048U,	// VRSHLsv1i64
    1048U,	// VRSHLsv2i32
    1048U,	// VRSHLsv2i64
    1048U,	// VRSHLsv4i16
    1048U,	// VRSHLsv4i32
    1048U,	// VRSHLsv8i16
    1048U,	// VRSHLsv8i8
    1048U,	// VRSHLuv16i8
    1048U,	// VRSHLuv1i64
    1048U,	// VRSHLuv2i32
    1048U,	// VRSHLuv2i64
    1048U,	// VRSHLuv4i16
    1048U,	// VRSHLuv4i32
    1048U,	// VRSHLuv8i16
    1048U,	// VRSHLuv8i8
    1048U,	// VRSHRNv2i32
    1048U,	// VRSHRNv4i16
    1048U,	// VRSHRNv8i8
    1048U,	// VRSHRsv16i8
    1048U,	// VRSHRsv1i64
    1048U,	// VRSHRsv2i32
    1048U,	// VRSHRsv2i64
    1048U,	// VRSHRsv4i16
    1048U,	// VRSHRsv4i32
    1048U,	// VRSHRsv8i16
    1048U,	// VRSHRsv8i8
    1048U,	// VRSHRuv16i8
    1048U,	// VRSHRuv1i64
    1048U,	// VRSHRuv2i32
    1048U,	// VRSHRuv2i64
    1048U,	// VRSHRuv4i16
    1048U,	// VRSHRuv4i32
    1048U,	// VRSHRuv8i16
    1048U,	// VRSHRuv8i8
    0U,	// VRSQRTEd
    56U,	// VRSQRTEfd
    56U,	// VRSQRTEfq
    0U,	// VRSQRTEq
    247328U,	// VRSQRTSfd
    247328U,	// VRSQRTSfq
    1184U,	// VRSRAsv16i8
    1184U,	// VRSRAsv1i64
    1184U,	// VRSRAsv2i32
    1184U,	// VRSRAsv2i64
    1184U,	// VRSRAsv4i16
    1184U,	// VRSRAsv4i32
    1184U,	// VRSRAsv8i16
    1184U,	// VRSRAsv8i8
    1184U,	// VRSRAuv16i8
    1184U,	// VRSRAuv1i64
    1184U,	// VRSRAuv2i32
    1184U,	// VRSRAuv2i64
    1184U,	// VRSRAuv4i16
    1184U,	// VRSRAuv4i32
    1184U,	// VRSRAuv8i16
    1184U,	// VRSRAuv8i8
    1048U,	// VRSUBHNv2i32
    1048U,	// VRSUBHNv4i16
    1048U,	// VRSUBHNv8i8
    1048U,	// VSELEQD
    1048U,	// VSELEQS
    1048U,	// VSELGED
    1048U,	// VSELGES
    1048U,	// VSELGTD
    1048U,	// VSELGTS
    1048U,	// VSELVSD
    1048U,	// VSELVSS
    7U,	// VSETLNi16
    7U,	// VSETLNi32
    7U,	// VSETLNi8
    1048U,	// VSHLLi16
    1048U,	// VSHLLi32
    1048U,	// VSHLLi8
    1048U,	// VSHLLsv2i64
    1048U,	// VSHLLsv4i32
    1048U,	// VSHLLsv8i16
    1048U,	// VSHLLuv2i64
    1048U,	// VSHLLuv4i32
    1048U,	// VSHLLuv8i16
    1048U,	// VSHLiv16i8
    1048U,	// VSHLiv1i64
    1048U,	// VSHLiv2i32
    1048U,	// VSHLiv2i64
    1048U,	// VSHLiv4i16
    1048U,	// VSHLiv4i32
    1048U,	// VSHLiv8i16
    1048U,	// VSHLiv8i8
    1048U,	// VSHLsv16i8
    1048U,	// VSHLsv1i64
    1048U,	// VSHLsv2i32
    1048U,	// VSHLsv2i64
    1048U,	// VSHLsv4i16
    1048U,	// VSHLsv4i32
    1048U,	// VSHLsv8i16
    1048U,	// VSHLsv8i8
    1048U,	// VSHLuv16i8
    1048U,	// VSHLuv1i64
    1048U,	// VSHLuv2i32
    1048U,	// VSHLuv2i64
    1048U,	// VSHLuv4i16
    1048U,	// VSHLuv4i32
    1048U,	// VSHLuv8i16
    1048U,	// VSHLuv8i8
    1048U,	// VSHRNv2i32
    1048U,	// VSHRNv4i16
    1048U,	// VSHRNv8i8
    1048U,	// VSHRsv16i8
    1048U,	// VSHRsv1i64
    1048U,	// VSHRsv2i32
    1048U,	// VSHRsv2i64
    1048U,	// VSHRsv4i16
    1048U,	// VSHRsv4i32
    1048U,	// VSHRsv8i16
    1048U,	// VSHRsv8i8
    1048U,	// VSHRuv16i8
    1048U,	// VSHRuv1i64
    1048U,	// VSHRuv2i32
    1048U,	// VSHRuv2i64
    1048U,	// VSHRuv4i16
    1048U,	// VSHRuv4i32
    1048U,	// VSHRuv8i16
    1048U,	// VSHRuv8i8
    0U,	// VSHTOD
    0U,	// VSHTOS
    0U,	// VSITOD
    0U,	// VSITOS
    262168U,	// VSLIv16i8
    262168U,	// VSLIv1i64
    262168U,	// VSLIv2i32
    262168U,	// VSLIv2i64
    262168U,	// VSLIv4i16
    262168U,	// VSLIv4i32
    262168U,	// VSLIv8i16
    262168U,	// VSLIv8i8
    7U,	// VSLTOD
    7U,	// VSLTOS
    56U,	// VSQRTD
    56U,	// VSQRTS
    1184U,	// VSRAsv16i8
    1184U,	// VSRAsv1i64
    1184U,	// VSRAsv2i32
    1184U,	// VSRAsv2i64
    1184U,	// VSRAsv4i16
    1184U,	// VSRAsv4i32
    1184U,	// VSRAsv8i16
    1184U,	// VSRAsv8i8
    1184U,	// VSRAuv16i8
    1184U,	// VSRAuv1i64
    1184U,	// VSRAuv2i32
    1184U,	// VSRAuv2i64
    1184U,	// VSRAuv4i16
    1184U,	// VSRAuv4i32
    1184U,	// VSRAuv8i16
    1184U,	// VSRAuv8i8
    262168U,	// VSRIv16i8
    262168U,	// VSRIv1i64
    262168U,	// VSRIv2i32
    262168U,	// VSRIv2i64
    262168U,	// VSRIv4i16
    262168U,	// VSRIv4i32
    262168U,	// VSRIv8i16
    262168U,	// VSRIv8i8
    276U,	// VST1LNd16
    10769180U,	// VST1LNd16_UPD
    276U,	// VST1LNd32
    10769180U,	// VST1LNd32_UPD
    276U,	// VST1LNd8
    10769180U,	// VST1LNd8_UPD
    1240U,	// VST1LNdAsm_16
    1240U,	// VST1LNdAsm_32
    1240U,	// VST1LNdAsm_8
    5336U,	// VST1LNdWB_fixed_Asm_16
    5336U,	// VST1LNdWB_fixed_Asm_32
    5336U,	// VST1LNdWB_fixed_Asm_8
    311512U,	// VST1LNdWB_register_Asm_16
    311512U,	// VST1LNdWB_register_Asm_32
    311512U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    0U,	// VST1d16
    0U,	// VST1d16Q
    0U,	// VST1d16Qwb_fixed
    0U,	// VST1d16Qwb_register
    0U,	// VST1d16T
    0U,	// VST1d16Twb_fixed
    0U,	// VST1d16Twb_register
    0U,	// VST1d16wb_fixed
    0U,	// VST1d16wb_register
    0U,	// VST1d32
    0U,	// VST1d32Q
    0U,	// VST1d32Qwb_fixed
    0U,	// VST1d32Qwb_register
    0U,	// VST1d32T
    0U,	// VST1d32Twb_fixed
    0U,	// VST1d32Twb_register
    0U,	// VST1d32wb_fixed
    0U,	// VST1d32wb_register
    0U,	// VST1d64
    0U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    0U,	// VST1d64Qwb_fixed
    0U,	// VST1d64Qwb_register
    0U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    0U,	// VST1d64Twb_fixed
    0U,	// VST1d64Twb_register
    0U,	// VST1d64wb_fixed
    0U,	// VST1d64wb_register
    0U,	// VST1d8
    0U,	// VST1d8Q
    0U,	// VST1d8Qwb_fixed
    0U,	// VST1d8Qwb_register
    0U,	// VST1d8T
    0U,	// VST1d8Twb_fixed
    0U,	// VST1d8Twb_register
    0U,	// VST1d8wb_fixed
    0U,	// VST1d8wb_register
    0U,	// VST1q16
    0U,	// VST1q16wb_fixed
    0U,	// VST1q16wb_register
    0U,	// VST1q32
    0U,	// VST1q32wb_fixed
    0U,	// VST1q32wb_register
    0U,	// VST1q64
    0U,	// VST1q64wb_fixed
    0U,	// VST1q64wb_register
    0U,	// VST1q8
    0U,	// VST1q8wb_fixed
    0U,	// VST1q8wb_register
    110368460U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    448212U,	// VST2LNd16_UPD
    110368460U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    448212U,	// VST2LNd32_UPD
    110368460U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    448212U,	// VST2LNd8_UPD
    1240U,	// VST2LNdAsm_16
    1240U,	// VST2LNdAsm_32
    1240U,	// VST2LNdAsm_8
    5336U,	// VST2LNdWB_fixed_Asm_16
    5336U,	// VST2LNdWB_fixed_Asm_32
    5336U,	// VST2LNdWB_fixed_Asm_8
    311512U,	// VST2LNdWB_register_Asm_16
    311512U,	// VST2LNdWB_register_Asm_32
    311512U,	// VST2LNdWB_register_Asm_8
    110368460U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    448212U,	// VST2LNq16_UPD
    110368460U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    448212U,	// VST2LNq32_UPD
    1240U,	// VST2LNqAsm_16
    1240U,	// VST2LNqAsm_32
    5336U,	// VST2LNqWB_fixed_Asm_16
    5336U,	// VST2LNqWB_fixed_Asm_32
    311512U,	// VST2LNqWB_register_Asm_16
    311512U,	// VST2LNqWB_register_Asm_32
    0U,	// VST2b16
    0U,	// VST2b16wb_fixed
    0U,	// VST2b16wb_register
    0U,	// VST2b32
    0U,	// VST2b32wb_fixed
    0U,	// VST2b32wb_register
    0U,	// VST2b8
    0U,	// VST2b8wb_fixed
    0U,	// VST2b8wb_register
    0U,	// VST2d16
    0U,	// VST2d16wb_fixed
    0U,	// VST2d16wb_register
    0U,	// VST2d32
    0U,	// VST2d32wb_fixed
    0U,	// VST2d32wb_register
    0U,	// VST2d8
    0U,	// VST2d8wb_fixed
    0U,	// VST2d8wb_register
    0U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    0U,	// VST2q16wb_fixed
    0U,	// VST2q16wb_register
    0U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    0U,	// VST2q32wb_fixed
    0U,	// VST2q32wb_register
    0U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    0U,	// VST2q8wb_fixed
    0U,	// VST2q8wb_register
    127145756U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    292U,	// VST3LNd16_UPD
    127145756U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    292U,	// VST3LNd32_UPD
    127145756U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    292U,	// VST3LNd8_UPD
    1240U,	// VST3LNdAsm_16
    1240U,	// VST3LNdAsm_32
    1240U,	// VST3LNdAsm_8
    5336U,	// VST3LNdWB_fixed_Asm_16
    5336U,	// VST3LNdWB_fixed_Asm_32
    5336U,	// VST3LNdWB_fixed_Asm_8
    311512U,	// VST3LNdWB_register_Asm_16
    311512U,	// VST3LNdWB_register_Asm_32
    311512U,	// VST3LNdWB_register_Asm_8
    127145756U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    292U,	// VST3LNq16_UPD
    127145756U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    292U,	// VST3LNq32_UPD
    1240U,	// VST3LNqAsm_16
    1240U,	// VST3LNqAsm_32
    5336U,	// VST3LNqWB_fixed_Asm_16
    5336U,	// VST3LNqWB_fixed_Asm_32
    311512U,	// VST3LNqWB_register_Asm_16
    311512U,	// VST3LNqWB_register_Asm_32
    142917792U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    9512U,	// VST3d16_UPD
    142917792U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    9512U,	// VST3d32_UPD
    142917792U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    9512U,	// VST3d8_UPD
    59U,	// VST3dAsm_16
    59U,	// VST3dAsm_32
    59U,	// VST3dAsm_8
    195U,	// VST3dWB_fixed_Asm_16
    195U,	// VST3dWB_fixed_Asm_32
    195U,	// VST3dWB_fixed_Asm_8
    249379U,	// VST3dWB_register_Asm_16
    249379U,	// VST3dWB_register_Asm_32
    249379U,	// VST3dWB_register_Asm_8
    142917792U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    9512U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    142917792U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    9512U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    142917792U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    9512U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    0U,	// VST3qAsm_16
    0U,	// VST3qAsm_32
    0U,	// VST3qAsm_8
    4U,	// VST3qWB_fixed_Asm_16
    4U,	// VST3qWB_fixed_Asm_32
    4U,	// VST3qWB_fixed_Asm_8
    1184U,	// VST3qWB_register_Asm_16
    1184U,	// VST3qWB_register_Asm_32
    1184U,	// VST3qWB_register_Asm_8
    160700116U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    9956U,	// VST4LNd16_UPD
    160700116U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    9956U,	// VST4LNd32_UPD
    160700116U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    9956U,	// VST4LNd8_UPD
    1240U,	// VST4LNdAsm_16
    1240U,	// VST4LNdAsm_32
    1240U,	// VST4LNdAsm_8
    5336U,	// VST4LNdWB_fixed_Asm_16
    5336U,	// VST4LNdWB_fixed_Asm_32
    5336U,	// VST4LNdWB_fixed_Asm_8
    311512U,	// VST4LNdWB_register_Asm_16
    311512U,	// VST4LNdWB_register_Asm_32
    311512U,	// VST4LNdWB_register_Asm_8
    160700116U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    9956U,	// VST4LNq16_UPD
    160700116U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    9956U,	// VST4LNq32_UPD
    1240U,	// VST4LNqAsm_16
    1240U,	// VST4LNqAsm_32
    5336U,	// VST4LNqWB_fixed_Asm_16
    5336U,	// VST4LNqWB_fixed_Asm_32
    311512U,	// VST4LNqWB_register_Asm_16
    311512U,	// VST4LNqWB_register_Asm_32
    169132192U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    459048U,	// VST4d16_UPD
    169132192U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    459048U,	// VST4d32_UPD
    169132192U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    459048U,	// VST4d8_UPD
    59U,	// VST4dAsm_16
    59U,	// VST4dAsm_32
    59U,	// VST4dAsm_8
    195U,	// VST4dWB_fixed_Asm_16
    195U,	// VST4dWB_fixed_Asm_32
    195U,	// VST4dWB_fixed_Asm_8
    249379U,	// VST4dWB_register_Asm_16
    249379U,	// VST4dWB_register_Asm_32
    249379U,	// VST4dWB_register_Asm_8
    169132192U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    459048U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    169132192U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    459048U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    169132192U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    459048U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    0U,	// VST4qAsm_16
    0U,	// VST4qAsm_32
    0U,	// VST4qAsm_8
    4U,	// VST4qWB_fixed_Asm_16
    4U,	// VST4qWB_fixed_Asm_32
    4U,	// VST4qWB_fixed_Asm_8
    1184U,	// VST4qWB_register_Asm_16
    1184U,	// VST4qWB_register_Asm_32
    1184U,	// VST4qWB_register_Asm_8
    57U,	// VSTMDDB_UPD
    1088U,	// VSTMDIA
    57U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    57U,	// VSTMSDB_UPD
    1088U,	// VSTMSIA
    57U,	// VSTMSIA_UPD
    264U,	// VSTRD
    264U,	// VSTRS
    247328U,	// VSUBD
    1048U,	// VSUBHNv2i32
    1048U,	// VSUBHNv4i16
    1048U,	// VSUBHNv8i8
    1048U,	// VSUBLsv2i64
    1048U,	// VSUBLsv4i32
    1048U,	// VSUBLsv8i16
    1048U,	// VSUBLuv2i64
    1048U,	// VSUBLuv4i32
    1048U,	// VSUBLuv8i16
    247328U,	// VSUBS
    1048U,	// VSUBWsv2i64
    1048U,	// VSUBWsv4i32
    1048U,	// VSUBWsv8i16
    1048U,	// VSUBWuv2i64
    1048U,	// VSUBWuv4i32
    1048U,	// VSUBWuv8i16
    247328U,	// VSUBfd
    247328U,	// VSUBfq
    1048U,	// VSUBv16i8
    1048U,	// VSUBv1i64
    1048U,	// VSUBv2i32
    1048U,	// VSUBv2i64
    1048U,	// VSUBv4i16
    1048U,	// VSUBv4i32
    1048U,	// VSUBv8i16
    1048U,	// VSUBv8i8
    1024U,	// VSWPd
    1024U,	// VSWPq
    304U,	// VTBL1
    312U,	// VTBL2
    320U,	// VTBL3
    0U,	// VTBL3Pseudo
    328U,	// VTBL4
    0U,	// VTBL4Pseudo
    336U,	// VTBX1
    344U,	// VTBX2
    352U,	// VTBX3
    0U,	// VTBX3Pseudo
    360U,	// VTBX4
    0U,	// VTBX4Pseudo
    0U,	// VTOSHD
    0U,	// VTOSHS
    0U,	// VTOSIRD
    0U,	// VTOSIRS
    0U,	// VTOSIZD
    0U,	// VTOSIZS
    7U,	// VTOSLD
    7U,	// VTOSLS
    0U,	// VTOUHD
    0U,	// VTOUHS
    0U,	// VTOUIRD
    0U,	// VTOUIRS
    0U,	// VTOUIZD
    0U,	// VTOUIZS
    7U,	// VTOULD
    7U,	// VTOULS
    1024U,	// VTRNd16
    1024U,	// VTRNd32
    1024U,	// VTRNd8
    1024U,	// VTRNq16
    1024U,	// VTRNq32
    1024U,	// VTRNq8
    0U,	// VTSTv16i8
    0U,	// VTSTv2i32
    0U,	// VTSTv4i16
    0U,	// VTSTv4i32
    0U,	// VTSTv8i16
    0U,	// VTSTv8i8
    0U,	// VUHTOD
    0U,	// VUHTOS
    0U,	// VUITOD
    0U,	// VUITOS
    7U,	// VULTOD
    7U,	// VULTOS
    1024U,	// VUZPd16
    1024U,	// VUZPd8
    1024U,	// VUZPq16
    1024U,	// VUZPq32
    1024U,	// VUZPq8
    1024U,	// VZIPd16
    1024U,	// VZIPd8
    1024U,	// VZIPq16
    1024U,	// VZIPq32
    1024U,	// VZIPq8
    10304U,	// sysLDMDA
    369U,	// sysLDMDA_UPD
    10304U,	// sysLDMDB
    369U,	// sysLDMDB_UPD
    10304U,	// sysLDMIA
    369U,	// sysLDMIA_UPD
    10304U,	// sysLDMIB
    369U,	// sysLDMIB_UPD
    10304U,	// sysSTMDA
    369U,	// sysSTMDA_UPD
    10304U,	// sysSTMDB
    369U,	// sysSTMDB_UPD
    10304U,	// sysSTMIA
    369U,	// sysSTMIA_UPD
    10304U,	// sysSTMIB
    369U,	// sysSTMIB_UPD
    0U,	// t2ABS
    0U,	// t2ADCri
    0U,	// t2ADCrr
    475136U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    0U,	// t2ADDri
    0U,	// t2ADDri12
    0U,	// t2ADDrr
    475136U,	// t2ADDrs
    8U,	// t2ADR
    0U,	// t2ANDri
    0U,	// t2ANDrr
    475136U,	// t2ANDrs
    491520U,	// t2ASRri
    0U,	// t2ASRrr
    0U,	// t2B
    16U,	// t2BFC
    32792U,	// t2BFI
    0U,	// t2BICri
    0U,	// t2BICrr
    475136U,	// t2BICrs
    0U,	// t2BR_JT
    0U,	// t2BXJ
    0U,	// t2Bcc
    544U,	// t2CDP
    544U,	// t2CDP2
    0U,	// t2CLREX
    1024U,	// t2CLZ
    1024U,	// t2CMNri
    1024U,	// t2CMNzrr
    376U,	// t2CMNzrs
    1024U,	// t2CMPri
    1024U,	// t2CMPrr
    376U,	// t2CMPrs
    0U,	// t2CPS1p
    0U,	// t2CPS2p
    1048U,	// t2CPS3p
    1048U,	// t2CRC32B
    1048U,	// t2CRC32CB
    1048U,	// t2CRC32CH
    1048U,	// t2CRC32CW
    1048U,	// t2CRC32H
    1048U,	// t2CRC32W
    0U,	// t2DBG
    0U,	// t2DCPS1
    0U,	// t2DCPS2
    0U,	// t2DCPS3
    0U,	// t2DMB
    0U,	// t2DSB
    0U,	// t2EORri
    0U,	// t2EORrr
    475136U,	// t2EORrs
    0U,	// t2HINT
    0U,	// t2ISB
    0U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    72U,	// t2LDA
    72U,	// t2LDAB
    72U,	// t2LDAEX
    72U,	// t2LDAEXB
    229376U,	// t2LDAEXD
    72U,	// t2LDAEXH
    72U,	// t2LDAH
    82U,	// t2LDC2L_OFFSET
    49242U,	// t2LDC2L_OPTION
    65626U,	// t2LDC2L_POST
    98U,	// t2LDC2L_PRE
    82U,	// t2LDC2_OFFSET
    49242U,	// t2LDC2_OPTION
    65626U,	// t2LDC2_POST
    98U,	// t2LDC2_PRE
    82U,	// t2LDCL_OFFSET
    49242U,	// t2LDCL_OPTION
    65626U,	// t2LDCL_POST
    98U,	// t2LDCL_PRE
    82U,	// t2LDC_OFFSET
    49242U,	// t2LDC_OPTION
    65626U,	// t2LDC_POST
    98U,	// t2LDC_PRE
    1088U,	// t2LDMDB
    57U,	// t2LDMDB_UPD
    1088U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    57U,	// t2LDMIA_UPD
    384U,	// t2LDRBT
    10840U,	// t2LDRB_POST
    392U,	// t2LDRB_PRE
    120U,	// t2LDRBi12
    384U,	// t2LDRBi8
    400U,	// t2LDRBpci
    1024U,	// t2LDRBpcrel
    408U,	// t2LDRBs
    11649024U,	// t2LDRD_POST
    507904U,	// t2LDRD_PRE
    524288U,	// t2LDRDi8
    416U,	// t2LDREX
    72U,	// t2LDREXB
    229376U,	// t2LDREXD
    72U,	// t2LDREXH
    384U,	// t2LDRHT
    10840U,	// t2LDRH_POST
    392U,	// t2LDRH_PRE
    120U,	// t2LDRHi12
    384U,	// t2LDRHi8
    400U,	// t2LDRHpci
    1024U,	// t2LDRHpcrel
    408U,	// t2LDRHs
    384U,	// t2LDRSBT
    10840U,	// t2LDRSB_POST
    392U,	// t2LDRSB_PRE
    120U,	// t2LDRSBi12
    384U,	// t2LDRSBi8
    400U,	// t2LDRSBpci
    1024U,	// t2LDRSBpcrel
    408U,	// t2LDRSBs
    384U,	// t2LDRSHT
    10840U,	// t2LDRSH_POST
    392U,	// t2LDRSH_PRE
    120U,	// t2LDRSHi12
    384U,	// t2LDRSHi8
    400U,	// t2LDRSHpci
    1024U,	// t2LDRSHpcrel
    408U,	// t2LDRSHs
    384U,	// t2LDRT
    10840U,	// t2LDR_POST
    392U,	// t2LDR_PRE
    120U,	// t2LDRi12
    384U,	// t2LDRi8
    400U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    1024U,	// t2LDRpcrel
    408U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    0U,	// t2LSLri
    0U,	// t2LSLrr
    491520U,	// t2LSRri
    0U,	// t2LSRrr
    2295328U,	// t2MCR
    2295328U,	// t2MCR2
    3343904U,	// t2MCRR
    3343904U,	// t2MCRR2
    17825792U,	// t2MLA
    17825792U,	// t2MLS
    0U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    0U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    0U,	// t2MOVCClsl
    0U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    0U,	// t2MOVCCror
    376U,	// t2MOVSsi
    48U,	// t2MOVSsr
    1048U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_pcrel
    1024U,	// t2MOVi
    1024U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    1024U,	// t2MOVr
    376U,	// t2MOVsi
    48U,	// t2MOVsr
    11264U,	// t2MOVsra_flag
    11264U,	// t2MOVsrl_flag
    0U,	// t2MRC
    0U,	// t2MRC2
    3343904U,	// t2MRRC
    3343904U,	// t2MRRC2
    2U,	// t2MRS_AR
    424U,	// t2MRS_M
    2U,	// t2MRSsys_AR
    0U,	// t2MSR_AR
    0U,	// t2MSR_M
    0U,	// t2MUL
    0U,	// t2MVNCCi
    1024U,	// t2MVNi
    1024U,	// t2MVNr
    376U,	// t2MVNs
    0U,	// t2ORNri
    0U,	// t2ORNrr
    475136U,	// t2ORNrs
    0U,	// t2ORRri
    0U,	// t2ORRrr
    475136U,	// t2ORRrs
    4194304U,	// t2PKHBT
    5242880U,	// t2PKHTB
    0U,	// t2PLDWi12
    0U,	// t2PLDWi8
    0U,	// t2PLDWs
    0U,	// t2PLDi12
    0U,	// t2PLDi8
    0U,	// t2PLDpci
    0U,	// t2PLDs
    0U,	// t2PLIi12
    0U,	// t2PLIi8
    0U,	// t2PLIpci
    0U,	// t2PLIs
    0U,	// t2QADD
    0U,	// t2QADD16
    0U,	// t2QADD8
    0U,	// t2QASX
    0U,	// t2QDADD
    0U,	// t2QDSUB
    0U,	// t2QSAX
    0U,	// t2QSUB
    0U,	// t2QSUB16
    0U,	// t2QSUB8
    1024U,	// t2RBIT
    1024U,	// t2REV
    1024U,	// t2REV16
    1024U,	// t2REVSH
    0U,	// t2RFEDB
    4U,	// t2RFEDBW
    0U,	// t2RFEIA
    4U,	// t2RFEIAW
    0U,	// t2RORri
    0U,	// t2RORrr
    1024U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    0U,	// t2RSBri
    0U,	// t2RSBrr
    475136U,	// t2RSBrs
    0U,	// t2SADD16
    0U,	// t2SADD8
    0U,	// t2SASX
    0U,	// t2SBCri
    0U,	// t2SBCrr
    475136U,	// t2SBCrs
    34603008U,	// t2SBFX
    0U,	// t2SDIV
    0U,	// t2SEL
    0U,	// t2SHADD16
    0U,	// t2SHADD8
    0U,	// t2SHASX
    0U,	// t2SHSAX
    0U,	// t2SHSUB16
    0U,	// t2SHSUB8
    0U,	// t2SMC
    17825792U,	// t2SMLABB
    17825792U,	// t2SMLABT
    17825792U,	// t2SMLAD
    17825792U,	// t2SMLADX
    17825792U,	// t2SMLAL
    17825792U,	// t2SMLALBB
    17825792U,	// t2SMLALBT
    17825792U,	// t2SMLALD
    17825792U,	// t2SMLALDX
    17825792U,	// t2SMLALTB
    17825792U,	// t2SMLALTT
    17825792U,	// t2SMLATB
    17825792U,	// t2SMLATT
    17825792U,	// t2SMLAWB
    17825792U,	// t2SMLAWT
    17825792U,	// t2SMLSD
    17825792U,	// t2SMLSDX
    17825792U,	// t2SMLSLD
    185860096U,	// t2SMLSLDX
    17825792U,	// t2SMMLA
    17825792U,	// t2SMMLAR
    17825792U,	// t2SMMLS
    17825792U,	// t2SMMLSR
    0U,	// t2SMMUL
    0U,	// t2SMMULR
    0U,	// t2SMUAD
    0U,	// t2SMUADX
    0U,	// t2SMULBB
    0U,	// t2SMULBT
    17825792U,	// t2SMULL
    0U,	// t2SMULTB
    0U,	// t2SMULTT
    0U,	// t2SMULWB
    0U,	// t2SMULWT
    0U,	// t2SMUSD
    0U,	// t2SMUSDX
    0U,	// t2SRSDB
    0U,	// t2SRSDB_UPD
    0U,	// t2SRSIA
    0U,	// t2SRSIA_UPD
    2216U,	// t2SSAT
    1192U,	// t2SSAT16
    0U,	// t2SSAX
    0U,	// t2SSUB16
    0U,	// t2SSUB8
    82U,	// t2STC2L_OFFSET
    49242U,	// t2STC2L_OPTION
    65626U,	// t2STC2L_POST
    98U,	// t2STC2L_PRE
    82U,	// t2STC2_OFFSET
    49242U,	// t2STC2_OPTION
    65626U,	// t2STC2_POST
    98U,	// t2STC2_PRE
    82U,	// t2STCL_OFFSET
    49242U,	// t2STCL_OPTION
    65626U,	// t2STCL_POST
    98U,	// t2STCL_PRE
    82U,	// t2STC_OFFSET
    49242U,	// t2STC_OPTION
    65626U,	// t2STC_POST
    98U,	// t2STC_PRE
    72U,	// t2STL
    72U,	// t2STLB
    229376U,	// t2STLEX
    229376U,	// t2STLEXB
    202375168U,	// t2STLEXD
    229376U,	// t2STLEXH
    72U,	// t2STLH
    1088U,	// t2STMDB
    57U,	// t2STMDB_UPD
    1088U,	// t2STMIA
    57U,	// t2STMIA_UPD
    384U,	// t2STRBT
    10840U,	// t2STRB_POST
    392U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    120U,	// t2STRBi12
    384U,	// t2STRBi8
    408U,	// t2STRBs
    11649048U,	// t2STRD_POST
    507928U,	// t2STRD_PRE
    524288U,	// t2STRDi8
    540672U,	// t2STREX
    229376U,	// t2STREXB
    202375168U,	// t2STREXD
    229376U,	// t2STREXH
    384U,	// t2STRHT
    10840U,	// t2STRH_POST
    392U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    120U,	// t2STRHi12
    384U,	// t2STRHi8
    408U,	// t2STRHs
    384U,	// t2STRT
    10840U,	// t2STR_POST
    392U,	// t2STR_PRE
    0U,	// t2STR_preidx
    120U,	// t2STRi12
    384U,	// t2STRi8
    408U,	// t2STRs
    0U,	// t2SUBS_PC_LR
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    0U,	// t2SUBri
    0U,	// t2SUBri12
    0U,	// t2SUBrr
    475136U,	// t2SUBrs
    6291456U,	// t2SXTAB
    6291456U,	// t2SXTAB16
    6291456U,	// t2SXTAH
    2560U,	// t2SXTB
    2560U,	// t2SXTB16
    2560U,	// t2SXTH
    0U,	// t2TBB
    0U,	// t2TBB_JT
    0U,	// t2TBH
    0U,	// t2TBH_JT
    1024U,	// t2TEQri
    1024U,	// t2TEQrr
    376U,	// t2TEQrs
    1024U,	// t2TSTri
    1024U,	// t2TSTrr
    376U,	// t2TSTrs
    0U,	// t2UADD16
    0U,	// t2UADD8
    0U,	// t2UASX
    34603008U,	// t2UBFX
    0U,	// t2UDIV
    0U,	// t2UHADD16
    0U,	// t2UHADD8
    0U,	// t2UHASX
    0U,	// t2UHSAX
    0U,	// t2UHSUB16
    0U,	// t2UHSUB8
    17825792U,	// t2UMAAL
    17825792U,	// t2UMLAL
    17825792U,	// t2UMULL
    0U,	// t2UQADD16
    0U,	// t2UQADD8
    0U,	// t2UQASX
    0U,	// t2UQSAX
    0U,	// t2UQSUB16
    0U,	// t2UQSUB8
    0U,	// t2USAD8
    17825792U,	// t2USADA8
    7340032U,	// t2USAT
    0U,	// t2USAT16
    0U,	// t2USAX
    0U,	// t2USUB16
    0U,	// t2USUB8
    6291456U,	// t2UXTAB
    6291456U,	// t2UXTAB16
    6291456U,	// t2UXTAH
    2560U,	// t2UXTB
    2560U,	// t2UXTB16
    2560U,	// t2UXTH
    0U,	// tADC
    1048U,	// tADDhirr
    1184U,	// tADDi3
    0U,	// tADDi8
    0U,	// tADDrSP
    557056U,	// tADDrSPi
    1184U,	// tADDrr
    432U,	// tADDspi
    1048U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    440U,	// tADR
    0U,	// tAND
    448U,	// tASRri
    0U,	// tASRrr
    0U,	// tB
    0U,	// tBIC
    0U,	// tBKPT
    0U,	// tBL
    0U,	// tBLXi
    0U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    0U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    0U,	// tBcc
    0U,	// tBfar
    0U,	// tCBNZ
    0U,	// tCBZ
    1024U,	// tCMNz
    1024U,	// tCMPhir
    1024U,	// tCMPi8
    1024U,	// tCMPr
    0U,	// tCPS
    0U,	// tEOR
    0U,	// tHINT
    0U,	// tHLT
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    1088U,	// tLDMIA
    0U,	// tLDMIA_UPD
    456U,	// tLDRBi
    464U,	// tLDRBr
    472U,	// tLDRHi
    464U,	// tLDRHr
    0U,	// tLDRLIT_ga_abs
    0U,	// tLDRLIT_ga_pcrel
    464U,	// tLDRSB
    464U,	// tLDRSH
    480U,	// tLDRi
    400U,	// tLDRpci
    0U,	// tLDRpci_pic
    464U,	// tLDRr
    488U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    1184U,	// tLSLri
    0U,	// tLSLrr
    448U,	// tLSRri
    0U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    0U,	// tMOVSr
    0U,	// tMOVi8
    1024U,	// tMOVr
    1184U,	// tMUL
    0U,	// tMVN
    0U,	// tORR
    0U,	// tPICADD
    0U,	// tPOP
    0U,	// tPOP_RET
    0U,	// tPUSH
    1024U,	// tREV
    1024U,	// tREV16
    1024U,	// tREVSH
    0U,	// tROR
    0U,	// tRSB
    0U,	// tSBC
    0U,	// tSETEND
    57U,	// tSTMIA_UPD
    456U,	// tSTRBi
    464U,	// tSTRBr
    472U,	// tSTRHi
    464U,	// tSTRHr
    480U,	// tSTRi
    464U,	// tSTRr
    488U,	// tSTRspi
    1184U,	// tSUBi3
    0U,	// tSUBi8
    1184U,	// tSUBrr
    432U,	// tSUBspi
    0U,	// tSVC
    1024U,	// tSXTB
    1024U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    0U,	// tTRAP
    1024U,	// tTST
    1024U,	// tUXTB
    1024U,	// tUXTH
    0U
  };

#ifndef CAPSTONE_DIET
  static char AsmStrs[] = {
  /* 0 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '3', '2', 9, 0,
  /* 12 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '3', '2', 9, 0,
  /* 26 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '3', '2', 9, 0,
  /* 38 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '3', '2', 9, 0,
  /* 52 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '3', '2', 9, 0,
  /* 65 */ 's', 'h', 'a', '1', 'c', '.', '3', '2', 9, 0,
  /* 75 */ 's', 'h', 'a', '1', 'h', '.', '3', '2', 9, 0,
  /* 85 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '3', '2', 9, 0,
  /* 97 */ 's', 'h', 'a', '1', 'm', '.', '3', '2', 9, 0,
  /* 107 */ 's', 'h', 'a', '1', 'p', '.', '3', '2', 9, 0,
  /* 117 */ 'v', 'c', 'v', 't', 'a', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 132 */ 'v', 'c', 'v', 't', 'm', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 147 */ 'v', 'c', 'v', 't', 'n', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 162 */ 'v', 'c', 'v', 't', 'p', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 177 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 192 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 207 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 222 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 237 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '3', '2', 9, 0,
  /* 249 */ 'v', 's', 'e', 'l', 'g', 'e', '.', 'f', '3', '2', 9, 0,
  /* 261 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '3', '2', 9, 0,
  /* 273 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '3', '2', 9, 0,
  /* 285 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '3', '2', 9, 0,
  /* 297 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '3', '2', 9, 0,
  /* 309 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '3', '2', 9, 0,
  /* 321 */ 'v', 's', 'e', 'l', 'e', 'q', '.', 'f', '3', '2', 9, 0,
  /* 333 */ 'v', 's', 'e', 'l', 'v', 's', '.', 'f', '3', '2', 9, 0,
  /* 345 */ 'v', 's', 'e', 'l', 'g', 't', '.', 'f', '3', '2', 9, 0,
  /* 357 */ 'v', 'r', 'i', 'n', 't', 'x', '.', 'f', '3', '2', 9, 0,
  /* 369 */ 'v', 'r', 'i', 'n', 't', 'z', '.', 'f', '3', '2', 9, 0,
  /* 381 */ 'l', 'd', 'c', '2', 9, 0,
  /* 387 */ 'm', 'r', 'c', '2', 9, 0,
  /* 393 */ 'm', 'r', 'r', 'c', '2', 9, 0,
  /* 400 */ 's', 't', 'c', '2', 9, 0,
  /* 406 */ 'c', 'd', 'p', '2', 9, 0,
  /* 412 */ 'm', 'c', 'r', '2', 9, 0,
  /* 418 */ 'm', 'c', 'r', 'r', '2', 9, 0,
  /* 425 */ 'v', 'c', 'v', 't', 'a', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 440 */ 'v', 'c', 'v', 't', 'm', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 455 */ 'v', 'c', 'v', 't', 'n', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 470 */ 'v', 'c', 'v', 't', 'p', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 485 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 500 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 515 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 530 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 545 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '6', '4', 9, 0,
  /* 557 */ 'v', 's', 'e', 'l', 'g', 'e', '.', 'f', '6', '4', 9, 0,
  /* 569 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '6', '4', 9, 0,
  /* 581 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '6', '4', 9, 0,
  /* 593 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '6', '4', 9, 0,
  /* 605 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '6', '4', 9, 0,
  /* 617 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '6', '4', 9, 0,
  /* 629 */ 'v', 's', 'e', 'l', 'e', 'q', '.', 'f', '6', '4', 9, 0,
  /* 641 */ 'v', 's', 'e', 'l', 'v', 's', '.', 'f', '6', '4', 9, 0,
  /* 653 */ 'v', 's', 'e', 'l', 'g', 't', '.', 'f', '6', '4', 9, 0,
  /* 665 */ 'v', 'm', 'u', 'l', 'l', '.', 'p', '6', '4', 9, 0,
  /* 676 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '8', 9, 0,
  /* 686 */ 'a', 'e', 's', 'm', 'c', '.', '8', 9, 0,
  /* 695 */ 'a', 'e', 's', 'd', '.', '8', 9, 0,
  /* 703 */ 'a', 'e', 's', 'e', '.', '8', 9, 0,
  /* 711 */ 'r', 'f', 'e', 'd', 'a', 9, 0,
  /* 718 */ 'r', 'f', 'e', 'i', 'a', 9, 0,
  /* 725 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 733 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 742 */ 'r', 'f', 'e', 'd', 'b', 9, 0,
  /* 749 */ 'r', 'f', 'e', 'i', 'b', 9, 0,
  /* 756 */ 'd', 'm', 'b', 9, 0,
  /* 761 */ 'd', 's', 'b', 9, 0,
  /* 766 */ 'i', 's', 'b', 9, 0,
  /* 771 */ 'p', 'l', 'd', 9, 0,
  /* 776 */ 's', 'e', 't', 'e', 'n', 'd', 9, 0,
  /* 784 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 792 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 801 */ 'p', 'l', 'i', 9, 0,
  /* 806 */ 'l', 'd', 'c', '2', 'l', 9, 0,
  /* 813 */ 's', 't', 'c', '2', 'l', 9, 0,
  /* 820 */ 'b', 'l', 9, 0,
  /* 824 */ 'c', 'p', 's', 9, 0,
  /* 829 */ 'm', 'o', 'v', 's', 9, 0,
  /* 835 */ 'h', 'l', 't', 9, 0,
  /* 840 */ 'b', 'k', 'p', 't', 9, 0,
  /* 846 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 854 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 863 */ 'p', 'l', 'd', 'w', 9, 0,
  /* 869 */ 'b', 'x', 9, 0,
  /* 873 */ 'b', 'l', 'x', 9, 0,
  /* 878 */ 'c', 'b', 'z', 9, 0,
  /* 883 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 889 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 901 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 913 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 925 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 937 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', ',', 32, 0,
  /* 948 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', ',', 32, 0,
  /* 959 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', ',', 32, 0,
  /* 970 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', ',', 32, 0,
  /* 981 */ 'v', 'l', 'd', '1', 0,
  /* 986 */ 'd', 'c', 'p', 's', '1', 0,
  /* 992 */ 'v', 's', 't', '1', 0,
  /* 997 */ 'v', 'r', 'e', 'v', '3', '2', 0,
  /* 1004 */ 'l', 'd', 'c', '2', 0,
  /* 1009 */ 'm', 'r', 'c', '2', 0,
  /* 1014 */ 'm', 'r', 'r', 'c', '2', 0,
  /* 1020 */ 's', 't', 'c', '2', 0,
  /* 1025 */ 'v', 'l', 'd', '2', 0,
  /* 1030 */ 'c', 'd', 'p', '2', 0,
  /* 1035 */ 'm', 'c', 'r', '2', 0,
  /* 1040 */ 'm', 'c', 'r', 'r', '2', 0,
  /* 1046 */ 'd', 'c', 'p', 's', '2', 0,
  /* 1052 */ 'v', 's', 't', '2', 0,
  /* 1057 */ 'v', 'l', 'd', '3', 0,
  /* 1062 */ 'd', 'c', 'p', 's', '3', 0,
  /* 1068 */ 'v', 's', 't', '3', 0,
  /* 1073 */ 'v', 'r', 'e', 'v', '6', '4', 0,
  /* 1080 */ 'v', 'l', 'd', '4', 0,
  /* 1085 */ 'v', 's', 't', '4', 0,
  /* 1090 */ 's', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 1098 */ 'u', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 1106 */ 's', 'x', 't', 'b', '1', '6', 0,
  /* 1113 */ 'u', 'x', 't', 'b', '1', '6', 0,
  /* 1120 */ 's', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 1128 */ 'u', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 1136 */ 'u', 'q', 's', 'u', 'b', '1', '6', 0,
  /* 1144 */ 's', 's', 'u', 'b', '1', '6', 0,
  /* 1151 */ 'u', 's', 'u', 'b', '1', '6', 0,
  /* 1158 */ 's', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 1166 */ 'u', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 1174 */ 'u', 'q', 'a', 'd', 'd', '1', '6', 0,
  /* 1182 */ 's', 'a', 'd', 'd', '1', '6', 0,
  /* 1189 */ 'u', 'a', 'd', 'd', '1', '6', 0,
  /* 1196 */ 's', 's', 'a', 't', '1', '6', 0,
  /* 1203 */ 'u', 's', 'a', 't', '1', '6', 0,
  /* 1210 */ 'v', 'r', 'e', 'v', '1', '6', 0,
  /* 1217 */ 'u', 's', 'a', 'd', 'a', '8', 0,
  /* 1224 */ 's', 'h', 's', 'u', 'b', '8', 0,
  /* 1231 */ 'u', 'h', 's', 'u', 'b', '8', 0,
  /* 1238 */ 'u', 'q', 's', 'u', 'b', '8', 0,
  /* 1245 */ 's', 's', 'u', 'b', '8', 0,
  /* 1251 */ 'u', 's', 'u', 'b', '8', 0,
  /* 1257 */ 'u', 's', 'a', 'd', '8', 0,
  /* 1263 */ 's', 'h', 'a', 'd', 'd', '8', 0,
  /* 1270 */ 'u', 'h', 'a', 'd', 'd', '8', 0,
  /* 1277 */ 'u', 'q', 'a', 'd', 'd', '8', 0,
  /* 1284 */ 's', 'a', 'd', 'd', '8', 0,
  /* 1290 */ 'u', 'a', 'd', 'd', '8', 0,
  /* 1296 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1309 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1316 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1326 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1341 */ 'v', 'a', 'b', 'a', 0,
  /* 1346 */ 'l', 'd', 'a', 0,
  /* 1350 */ 'l', 'd', 'm', 'd', 'a', 0,
  /* 1356 */ 's', 't', 'm', 'd', 'a', 0,
  /* 1362 */ 'r', 'f', 'e', 'i', 'a', 0,
  /* 1368 */ 'v', 'l', 'd', 'm', 'i', 'a', 0,
  /* 1375 */ 'v', 's', 't', 'm', 'i', 'a', 0,
  /* 1382 */ 's', 'r', 's', 'i', 'a', 0,
  /* 1388 */ 's', 'm', 'm', 'l', 'a', 0,
  /* 1394 */ 'v', 'n', 'm', 'l', 'a', 0,
  /* 1400 */ 'v', 'm', 'l', 'a', 0,
  /* 1405 */ 'v', 'f', 'm', 'a', 0,
  /* 1410 */ 'v', 'f', 'n', 'm', 'a', 0,
  /* 1416 */ 'v', 'r', 's', 'r', 'a', 0,
  /* 1422 */ 'v', 's', 'r', 'a', 0,
  /* 1427 */ 'l', 'd', 'a', 'b', 0,
  /* 1432 */ 's', 'x', 't', 'a', 'b', 0,
  /* 1438 */ 'u', 'x', 't', 'a', 'b', 0,
  /* 1444 */ 's', 'm', 'l', 'a', 'b', 'b', 0,
  /* 1451 */ 's', 'm', 'l', 'a', 'l', 'b', 'b', 0,
  /* 1459 */ 's', 'm', 'u', 'l', 'b', 'b', 0,
  /* 1466 */ 't', 'b', 'b', 0,
  /* 1470 */ 'r', 'f', 'e', 'd', 'b', 0,
  /* 1476 */ 'v', 'l', 'd', 'm', 'd', 'b', 0,
  /* 1483 */ 'v', 's', 't', 'm', 'd', 'b', 0,
  /* 1490 */ 's', 'r', 's', 'd', 'b', 0,
  /* 1496 */ 'l', 'd', 'm', 'i', 'b', 0,
  /* 1502 */ 's', 't', 'm', 'i', 'b', 0,
  /* 1508 */ 's', 't', 'l', 'b', 0,
  /* 1513 */ 'd', 'm', 'b', 0,
  /* 1517 */ 's', 'w', 'p', 'b', 0,
  /* 1522 */ 'l', 'd', 'r', 'b', 0,
  /* 1527 */ 's', 't', 'r', 'b', 0,
  /* 1532 */ 'd', 's', 'b', 0,
  /* 1536 */ 'i', 's', 'b', 0,
  /* 1540 */ 'l', 'd', 'r', 's', 'b', 0,
  /* 1546 */ 's', 'm', 'l', 'a', 't', 'b', 0,
  /* 1553 */ 'p', 'k', 'h', 't', 'b', 0,
  /* 1559 */ 's', 'm', 'l', 'a', 'l', 't', 'b', 0,
  /* 1567 */ 's', 'm', 'u', 'l', 't', 'b', 0,
  /* 1574 */ 'v', 'c', 'v', 't', 'b', 0,
  /* 1580 */ 's', 'x', 't', 'b', 0,
  /* 1585 */ 'u', 'x', 't', 'b', 0,
  /* 1590 */ 'q', 'd', 's', 'u', 'b', 0,
  /* 1596 */ 'v', 'h', 's', 'u', 'b', 0,
  /* 1602 */ 'v', 'q', 's', 'u', 'b', 0,
  /* 1608 */ 'v', 's', 'u', 'b', 0,
  /* 1613 */ 's', 'm', 'l', 'a', 'w', 'b', 0,
  /* 1620 */ 's', 'm', 'u', 'l', 'w', 'b', 0,
  /* 1627 */ 'l', 'd', 'a', 'e', 'x', 'b', 0,
  /* 1634 */ 's', 't', 'l', 'e', 'x', 'b', 0,
  /* 1641 */ 'l', 'd', 'r', 'e', 'x', 'b', 0,
  /* 1648 */ 's', 't', 'r', 'e', 'x', 'b', 0,
  /* 1655 */ 's', 'b', 'c', 0,
  /* 1659 */ 'a', 'd', 'c', 0,
  /* 1663 */ 'l', 'd', 'c', 0,
  /* 1667 */ 'b', 'f', 'c', 0,
  /* 1671 */ 'v', 'b', 'i', 'c', 0,
  /* 1676 */ 's', 'm', 'c', 0,
  /* 1680 */ 'm', 'r', 'c', 0,
  /* 1684 */ 'm', 'r', 'r', 'c', 0,
  /* 1689 */ 'r', 's', 'c', 0,
  /* 1693 */ 's', 't', 'c', 0,
  /* 1697 */ 's', 'v', 'c', 0,
  /* 1701 */ 's', 'm', 'l', 'a', 'd', 0,
  /* 1707 */ 's', 'm', 'u', 'a', 'd', 0,
  /* 1713 */ 'v', 'a', 'b', 'd', 0,
  /* 1718 */ 'q', 'd', 'a', 'd', 'd', 0,
  /* 1724 */ 'v', 'r', 'h', 'a', 'd', 'd', 0,
  /* 1731 */ 'v', 'h', 'a', 'd', 'd', 0,
  /* 1737 */ 'v', 'p', 'a', 'd', 'd', 0,
  /* 1743 */ 'v', 'q', 'a', 'd', 'd', 0,
  /* 1749 */ 'v', 'a', 'd', 'd', 0,
  /* 1754 */ 's', 'm', 'l', 'a', 'l', 'd', 0,
  /* 1761 */ 'p', 'l', 'd', 0,
  /* 1765 */ 's', 'm', 'l', 's', 'l', 'd', 0,
  /* 1772 */ 'v', 'a', 'n', 'd', 0,
  /* 1777 */ 'l', 'd', 'r', 'd', 0,
  /* 1782 */ 's', 't', 'r', 'd', 0,
  /* 1787 */ 's', 'm', 'l', 's', 'd', 0,
  /* 1793 */ 's', 'm', 'u', 's', 'd', 0,
  /* 1799 */ 'l', 'd', 'a', 'e', 'x', 'd', 0,
  /* 1806 */ 's', 't', 'l', 'e', 'x', 'd', 0,
  /* 1813 */ 'l', 'd', 'r', 'e', 'x', 'd', 0,
  /* 1820 */ 's', 't', 'r', 'e', 'x', 'd', 0,
  /* 1827 */ 'v', 'a', 'c', 'g', 'e', 0,
  /* 1833 */ 'v', 'c', 'g', 'e', 0,
  /* 1838 */ 'v', 'c', 'l', 'e', 0,
  /* 1843 */ 'v', 'r', 'e', 'c', 'p', 'e', 0,
  /* 1850 */ 'v', 'c', 'm', 'p', 'e', 0,
  /* 1856 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 0,
  /* 1864 */ 'v', 'b', 'i', 'f', 0,
  /* 1869 */ 'd', 'b', 'g', 0,
  /* 1873 */ 'v', 'q', 'n', 'e', 'g', 0,
  /* 1879 */ 'v', 'n', 'e', 'g', 0,
  /* 1884 */ 'l', 'd', 'a', 'h', 0,
  /* 1889 */ 's', 'x', 't', 'a', 'h', 0,
  /* 1895 */ 'u', 'x', 't', 'a', 'h', 0,
  /* 1901 */ 't', 'b', 'h', 0,
  /* 1905 */ 's', 't', 'l', 'h', 0,
  /* 1910 */ 'v', 'q', 'd', 'm', 'u', 'l', 'h', 0,
  /* 1918 */ 'v', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 0,
  /* 1927 */ 'l', 'd', 'r', 'h', 0,
  /* 1932 */ 's', 't', 'r', 'h', 0,
  /* 1937 */ 'l', 'd', 'r', 's', 'h', 0,
  /* 1943 */ 'p', 'u', 's', 'h', 0,
  /* 1948 */ 'r', 'e', 'v', 's', 'h', 0,
  /* 1954 */ 's', 'x', 't', 'h', 0,
  /* 1959 */ 'u', 'x', 't', 'h', 0,
  /* 1964 */ 'l', 'd', 'a', 'e', 'x', 'h', 0,
  /* 1971 */ 's', 't', 'l', 'e', 'x', 'h', 0,
  /* 1978 */ 'l', 'd', 'r', 'e', 'x', 'h', 0,
  /* 1985 */ 's', 't', 'r', 'e', 'x', 'h', 0,
  /* 1992 */ 'b', 'f', 'i', 0,
  /* 1996 */ 'p', 'l', 'i', 0,
  /* 2000 */ 'v', 's', 'l', 'i', 0,
  /* 2005 */ 'v', 's', 'r', 'i', 0,
  /* 2010 */ 'b', 'x', 'j', 0,
  /* 2014 */ 'l', 'd', 'c', '2', 'l', 0,
  /* 2020 */ 's', 't', 'c', '2', 'l', 0,
  /* 2026 */ 'u', 'm', 'a', 'a', 'l', 0,
  /* 2032 */ 'v', 'a', 'b', 'a', 'l', 0,
  /* 2038 */ 'v', 'p', 'a', 'd', 'a', 'l', 0,
  /* 2045 */ 'v', 'q', 'd', 'm', 'l', 'a', 'l', 0,
  /* 2053 */ 's', 'm', 'l', 'a', 'l', 0,
  /* 2059 */ 'u', 'm', 'l', 'a', 'l', 0,
  /* 2065 */ 'v', 'm', 'l', 'a', 'l', 0,
  /* 2071 */ 'v', 't', 'b', 'l', 0,
  /* 2076 */ 'v', 's', 'u', 'b', 'l', 0,
  /* 2082 */ 'l', 'd', 'c', 'l', 0,
  /* 2087 */ 's', 't', 'c', 'l', 0,
  /* 2092 */ 'v', 'a', 'b', 'd', 'l', 0,
  /* 2098 */ 'v', 'p', 'a', 'd', 'd', 'l', 0,
  /* 2105 */ 'v', 'a', 'd', 'd', 'l', 0,
  /* 2111 */ 's', 'e', 'l', 0,
  /* 2115 */ 'v', 'q', 's', 'h', 'l', 0,
  /* 2121 */ 'v', 'q', 'r', 's', 'h', 'l', 0,
  /* 2128 */ 'v', 'r', 's', 'h', 'l', 0,
  /* 2134 */ 'v', 's', 'h', 'l', 0,
  /* 2139 */ 'v', 's', 'h', 'l', 'l', 0,
  /* 2145 */ 'v', 'q', 'd', 'm', 'u', 'l', 'l', 0,
  /* 2153 */ 's', 'm', 'u', 'l', 'l', 0,
  /* 2159 */ 'u', 'm', 'u', 'l', 'l', 0,
  /* 2165 */ 'v', 'm', 'u', 'l', 'l', 0,
  /* 2171 */ 'v', 'b', 's', 'l', 0,
  /* 2176 */ 'v', 'q', 'd', 'm', 'l', 's', 'l', 0,
  /* 2184 */ 'v', 'm', 'l', 's', 'l', 0,
  /* 2190 */ 's', 't', 'l', 0,
  /* 2194 */ 's', 'm', 'm', 'u', 'l', 0,
  /* 2200 */ 'v', 'n', 'm', 'u', 'l', 0,
  /* 2206 */ 'v', 'm', 'u', 'l', 0,
  /* 2211 */ 'v', 'm', 'o', 'v', 'l', 0,
  /* 2217 */ 'l', 'd', 'm', 0,
  /* 2221 */ 's', 't', 'm', 0,
  /* 2225 */ 'v', 'r', 's', 'u', 'b', 'h', 'n', 0,
  /* 2233 */ 'v', 's', 'u', 'b', 'h', 'n', 0,
  /* 2240 */ 'v', 'r', 'a', 'd', 'd', 'h', 'n', 0,
  /* 2248 */ 'v', 'a', 'd', 'd', 'h', 'n', 0,
  /* 2255 */ 'v', 'p', 'm', 'i', 'n', 0,
  /* 2261 */ 'v', 'm', 'i', 'n', 0,
  /* 2266 */ 'c', 'm', 'n', 0,
  /* 2270 */ 'v', 'q', 's', 'h', 'r', 'n', 0,
  /* 2277 */ 'v', 'q', 'r', 's', 'h', 'r', 'n', 0,
  /* 2285 */ 'v', 'r', 's', 'h', 'r', 'n', 0,
  /* 2292 */ 'v', 's', 'h', 'r', 'n', 0,
  /* 2298 */ 'v', 'o', 'r', 'n', 0,
  /* 2303 */ 'v', 't', 'r', 'n', 0,
  /* 2308 */ 'v', 'q', 's', 'h', 'r', 'u', 'n', 0,
  /* 2316 */ 'v', 'q', 'r', 's', 'h', 'r', 'u', 'n', 0,
  /* 2325 */ 'v', 'q', 'm', 'o', 'v', 'u', 'n', 0,
  /* 2333 */ 'v', 'm', 'v', 'n', 0,
  /* 2338 */ 'v', 'q', 'm', 'o', 'v', 'n', 0,
  /* 2345 */ 'v', 'm', 'o', 'v', 'n', 0,
  /* 2351 */ 't', 'r', 'a', 'p', 0,
  /* 2356 */ 'c', 'd', 'p', 0,
  /* 2360 */ 'v', 'z', 'i', 'p', 0,
  /* 2365 */ 'v', 'c', 'm', 'p', 0,
  /* 2370 */ 'p', 'o', 'p', 0,
  /* 2374 */ 'v', 'd', 'u', 'p', 0,
  /* 2379 */ 'v', 's', 'w', 'p', 0,
  /* 2384 */ 'v', 'u', 'z', 'p', 0,
  /* 2389 */ 'v', 'c', 'e', 'q', 0,
  /* 2394 */ 't', 'e', 'q', 0,
  /* 2398 */ 's', 'm', 'm', 'l', 'a', 'r', 0,
  /* 2405 */ 'm', 'c', 'r', 0,
  /* 2409 */ 'a', 'd', 'r', 0,
  /* 2413 */ 'v', 'l', 'd', 'r', 0,
  /* 2418 */ 'v', 'r', 's', 'h', 'r', 0,
  /* 2424 */ 'v', 's', 'h', 'r', 0,
  /* 2429 */ 's', 'm', 'm', 'u', 'l', 'r', 0,
  /* 2436 */ 'v', 'e', 'o', 'r', 0,
  /* 2441 */ 'r', 'o', 'r', 0,
  /* 2445 */ 'm', 'c', 'r', 'r', 0,
  /* 2450 */ 'v', 'o', 'r', 'r', 0,
  /* 2455 */ 'a', 's', 'r', 0,
  /* 2459 */ 's', 'm', 'm', 'l', 's', 'r', 0,
  /* 2466 */ 'v', 'm', 's', 'r', 0,
  /* 2471 */ 'v', 'r', 'i', 'n', 't', 'r', 0,
  /* 2478 */ 'v', 's', 't', 'r', 0,
  /* 2483 */ 'v', 'c', 'v', 't', 'r', 0,
  /* 2489 */ 'v', 'q', 'a', 'b', 's', 0,
  /* 2495 */ 'v', 'a', 'b', 's', 0,
  /* 2500 */ 's', 'u', 'b', 's', 0,
  /* 2505 */ 'v', 'c', 'l', 's', 0,
  /* 2510 */ 's', 'm', 'm', 'l', 's', 0,
  /* 2516 */ 'v', 'n', 'm', 'l', 's', 0,
  /* 2522 */ 'v', 'm', 'l', 's', 0,
  /* 2527 */ 'v', 'f', 'm', 's', 0,
  /* 2532 */ 'v', 'f', 'n', 'm', 's', 0,
  /* 2538 */ 'v', 'r', 'e', 'c', 'p', 's', 0,
  /* 2545 */ 'v', 'm', 'r', 's', 0,
  /* 2550 */ 'a', 's', 'r', 's', 0,
  /* 2555 */ 'l', 's', 'r', 's', 0,
  /* 2560 */ 'v', 'r', 's', 'q', 'r', 't', 's', 0,
  /* 2568 */ 'm', 'o', 'v', 's', 0,
  /* 2573 */ 's', 's', 'a', 't', 0,
  /* 2578 */ 'u', 's', 'a', 't', 0,
  /* 2583 */ 's', 'm', 'l', 'a', 'b', 't', 0,
  /* 2590 */ 'p', 'k', 'h', 'b', 't', 0,
  /* 2596 */ 's', 'm', 'l', 'a', 'l', 'b', 't', 0,
  /* 2604 */ 's', 'm', 'u', 'l', 'b', 't', 0,
  /* 2611 */ 'l', 'd', 'r', 'b', 't', 0,
  /* 2617 */ 's', 't', 'r', 'b', 't', 0,
  /* 2623 */ 'l', 'd', 'r', 's', 'b', 't', 0,
  /* 2630 */ 'v', 'a', 'c', 'g', 't', 0,
  /* 2636 */ 'v', 'c', 'g', 't', 0,
  /* 2641 */ 'l', 'd', 'r', 'h', 't', 0,
  /* 2647 */ 's', 't', 'r', 'h', 't', 0,
  /* 2653 */ 'l', 'd', 'r', 's', 'h', 't', 0,
  /* 2660 */ 'r', 'b', 'i', 't', 0,
  /* 2665 */ 'v', 'b', 'i', 't', 0,
  /* 2670 */ 'v', 'c', 'l', 't', 0,
  /* 2675 */ 'v', 'c', 'n', 't', 0,
  /* 2680 */ 'h', 'i', 'n', 't', 0,
  /* 2685 */ 'l', 'd', 'r', 't', 0,
  /* 2690 */ 'v', 's', 'q', 'r', 't', 0,
  /* 2696 */ 's', 't', 'r', 't', 0,
  /* 2701 */ 'v', 't', 's', 't', 0,
  /* 2706 */ 's', 'm', 'l', 'a', 't', 't', 0,
  /* 2713 */ 's', 'm', 'l', 'a', 'l', 't', 't', 0,
  /* 2721 */ 's', 'm', 'u', 'l', 't', 't', 0,
  /* 2728 */ 'v', 'c', 'v', 't', 't', 0,
  /* 2734 */ 'v', 'c', 'v', 't', 0,
  /* 2739 */ 'm', 'o', 'v', 't', 0,
  /* 2744 */ 's', 'm', 'l', 'a', 'w', 't', 0,
  /* 2751 */ 's', 'm', 'u', 'l', 'w', 't', 0,
  /* 2758 */ 'v', 'e', 'x', 't', 0,
  /* 2763 */ 'v', 'q', 's', 'h', 'l', 'u', 0,
  /* 2770 */ 'r', 'e', 'v', 0,
  /* 2774 */ 's', 'd', 'i', 'v', 0,
  /* 2779 */ 'u', 'd', 'i', 'v', 0,
  /* 2784 */ 'v', 'd', 'i', 'v', 0,
  /* 2789 */ 'v', 'm', 'o', 'v', 0,
  /* 2794 */ 'v', 's', 'u', 'b', 'w', 0,
  /* 2800 */ 'v', 'a', 'd', 'd', 'w', 0,
  /* 2806 */ 'p', 'l', 'd', 'w', 0,
  /* 2811 */ 'm', 'o', 'v', 'w', 0,
  /* 2816 */ 'f', 'l', 'd', 'm', 'i', 'a', 'x', 0,
  /* 2824 */ 'f', 's', 't', 'm', 'i', 'a', 'x', 0,
  /* 2832 */ 'v', 'p', 'm', 'a', 'x', 0,
  /* 2838 */ 'v', 'm', 'a', 'x', 0,
  /* 2843 */ 's', 'h', 's', 'a', 'x', 0,
  /* 2849 */ 'u', 'h', 's', 'a', 'x', 0,
  /* 2855 */ 'u', 'q', 's', 'a', 'x', 0,
  /* 2861 */ 's', 's', 'a', 'x', 0,
  /* 2866 */ 'u', 's', 'a', 'x', 0,
  /* 2871 */ 'f', 'l', 'd', 'm', 'd', 'b', 'x', 0,
  /* 2879 */ 'f', 's', 't', 'm', 'd', 'b', 'x', 0,
  /* 2887 */ 'v', 't', 'b', 'x', 0,
  /* 2892 */ 's', 'm', 'l', 'a', 'd', 'x', 0,
  /* 2899 */ 's', 'm', 'u', 'a', 'd', 'x', 0,
  /* 2906 */ 's', 'm', 'l', 'a', 'l', 'd', 'x', 0,
  /* 2914 */ 's', 'm', 'l', 's', 'l', 'd', 'x', 0,
  /* 2922 */ 's', 'm', 'l', 's', 'd', 'x', 0,
  /* 2929 */ 's', 'm', 'u', 's', 'd', 'x', 0,
  /* 2936 */ 'l', 'd', 'a', 'e', 'x', 0,
  /* 2942 */ 's', 't', 'l', 'e', 'x', 0,
  /* 2948 */ 'l', 'd', 'r', 'e', 'x', 0,
  /* 2954 */ 'c', 'l', 'r', 'e', 'x', 0,
  /* 2960 */ 's', 't', 'r', 'e', 'x', 0,
  /* 2966 */ 's', 'b', 'f', 'x', 0,
  /* 2971 */ 'u', 'b', 'f', 'x', 0,
  /* 2976 */ 'b', 'l', 'x', 0,
  /* 2980 */ 'r', 'r', 'x', 0,
  /* 2984 */ 's', 'h', 'a', 's', 'x', 0,
  /* 2990 */ 'u', 'h', 'a', 's', 'x', 0,
  /* 2996 */ 'u', 'q', 'a', 's', 'x', 0,
  /* 3002 */ 's', 'a', 's', 'x', 0,
  /* 3007 */ 'u', 'a', 's', 'x', 0,
  /* 3012 */ 'v', 'r', 'i', 'n', 't', 'x', 0,
  /* 3019 */ 'v', 'c', 'l', 'z', 0,
  /* 3024 */ 'v', 'r', 'i', 'n', 't', 'z', 0,
  };
#endif

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MCInst_getOpcode(MI)];
  uint64_t Bits2 = OpInfo2[MCInst_getOpcode(MI)];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  // assert(Bits != 0 && "Cannot print this instruction.");
#ifndef CAPSTONE_DIET
  SStream_concat(O, "%s", AsmStrs+(Bits & 4095)-1);
#endif


  // Fragment 0 encoded into 5 bits for 29 unique commands.
  //printf("Frag-0: %"PRIu64"\n", (Bits >> 12) & 31);
  switch ((Bits >> 12) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, CLREX, TRAP, TRAPNaCl...
    return;
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, MLA, MOVsr, MVNsr, ORRrsi, RSB...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 3:
    // ADCrsr, ADDrsr, ANDrsr, BICrsr, EORrsr, ORRrsr, RSBrsr, RSCrsr, SBCrsr...
    printSBitModifierOperand(MI, 7, O); 
    printPredicateOperand(MI, 5, O); 
    SStream_concat(O, "%s", "\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printSORegRegOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ADR, CLZ, CMNri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, FLDMXDB_UPD, ...
    printPredicateOperand(MI, 2, O); 
    break;
  case 5:
    // AESD, AESE, AESIMC, AESMC, BKPT, BL, BLX, BLXi, BX, CPS1p, CRC32B, CRC...
    printOperand(MI, 0, O); 
    break;
  case 6:
    // BFC, CMNzrsi, CMPrsi, LDRBi12, LDRcp, LDRi12, MOVTi16, QADD, QADD16, Q...
    printPredicateOperand(MI, 3, O); 
    break;
  case 7:
    // BFI, CMNzrsr, CMPrsr, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, L...
    printPredicateOperand(MI, 4, O); 
    break;
  case 8:
    // BLX_pred, BL_pred, BXJ, BX_pred, Bcc, DBG, FLDMXIA, FSTMXIA, HINT, LDM...
    printPredicateOperand(MI, 1, O); 
    break;
  case 9:
    // BX_RET, FMSTAT, MOVPCLR, t2CLREX, t2DCPS1, t2DCPS2, t2DCPS3, tBL, tBLX...
    printPredicateOperand(MI, 0, O); 
    break;
  case 10:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD4DUPd16, V...
    printPredicateOperand(MI, 6, O); 
    break;
  case 11:
    // CDP2, LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, ...
    printPImmediate(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 12:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, O); 
    break;
  case 13:
    // DMB, DSB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 14:
    // ISB
    printInstSyncBOption(MI, 0, O); 
    return;
    break;
  case 15:
    // ITasm, t2IT
    printThumbITMask(MI, 1, O); 
    break;
  case 16:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRB_PRE...
    printPredicateOperand(MI, 5, O); 
    break;
  case 17:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, RRXi, t2MOVi, t2MOVr, t2MVNi, t2MVNr,...
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 18:
    // MRC2
    printPImmediate(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 5, O); 
    return;
    break;
  case 19:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand(MI, 0, O, false); 
    return;
    break;
  case 20:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, O); 
    return;
    break;
  case 21:
    // SETEND, tSETEND
    printSetendOperand(MI, 0, O); 
    return;
    break;
  case 22:
    // SMLAL, UMLAL
    printSBitModifierOperand(MI, 8, O); 
    printPredicateOperand(MI, 6, O); 
    SStream_concat(O, "%s", "\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 23:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printPredicateOperand(MI, 7, O); 
    break;
  case 24:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 25:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 26:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printPredicateOperand(MI, 8, O); 
    break;
  case 27:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 28:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 7 bits for 65 unique commands.
  //printf("Frag-1: %"PRIu64"\n", (Bits >> 17) & 127);
  switch ((Bits >> 17) & 127) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    SStream_concat(O, "%s", "\t"); 
    break;
  case 1:
    // AESD, AESE, AESIMC, AESMC, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, ...
    SStream_concat(O, "%s", ", "); 
    break;
  case 2:
    // ASRi, ASRr, ITasm, LDRBT_POST, LDRT_POST, LSLi, LSLr, LSRi, LSRr, RORi...
    SStream_concat(O, "%s", " "); 
    break;
  case 3:
    // BKPT, BL, BLX, BLXi, BX, CPS1p, HLT, RFEDA, RFEDB, RFEIA, RFEIB, SRSDA...
    return;
    break;
  case 4:
    // BX_RET
    SStream_concat(O, "%s", "\tlr"); 
    return;
    break;
  case 5:
    // CDP2, MCR2, MCRR2, MRRC2
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 6:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VFMAD, V...
    SStream_concat(O, "%s", ".f64\t"); 
    printOperand(MI, 0, O); 
    break;
  case 7:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEd, VACGEq, VACGTd...
    SStream_concat(O, "%s", ".f32\t"); 
    printOperand(MI, 0, O); 
    break;
  case 8:
    // FMSTAT
    SStream_concat(O, "%s", "\tAPSR_nzcv, fpscr"); 
    return;
    break;
  case 9:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    printCImmediate(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 10:
    // MOVPCLR
    SStream_concat(O, "%s", "\tpc, lr"); 
    return;
    break;
  case 11:
    // RFEDA_UPD, RFEDB_UPD, RFEIA_UPD, RFEIB_UPD
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 12:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    SStream_concat(O, "%s", ".s32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 13:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    SStream_concat(O, "%s", ".s16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 14:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    SStream_concat(O, "%s", ".s8\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 15:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    SStream_concat(O, "%s", ".u32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 16:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    SStream_concat(O, "%s", ".u16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 17:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    SStream_concat(O, "%s", ".u8\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 18:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    SStream_concat(O, "%s", ".i64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 19:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    SStream_concat(O, "%s", ".i32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 20:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    SStream_concat(O, "%s", ".i16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 21:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    SStream_concat(O, "%s", ".i8\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 22:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    SStream_concat(O, "%s", ".8\t"); 
    break;
  case 23:
    // VCVTBDH, VCVTTDH
    SStream_concat(O, "%s", ".f16.f64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // VCVTBHD, VCVTTHD
    SStream_concat(O, "%s", ".f64.f16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // VCVTBHS, VCVTTHS, VCVTh2f
    SStream_concat(O, "%s", ".f32.f16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 26:
    // VCVTBSH, VCVTTSH, VCVTf2h
    SStream_concat(O, "%s", ".f16.f32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 27:
    // VCVTDS
    SStream_concat(O, "%s", ".f64.f32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 28:
    // VCVTSD
    SStream_concat(O, "%s", ".f32.f64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 29:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    SStream_concat(O, "%s", ".s32.f32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 30:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    SStream_concat(O, "%s", ".u32.f32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    SStream_concat(O, "%s", ".f32.s32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    SStream_concat(O, "%s", ".f32.u32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1DUPd16, ...
    SStream_concat(O, "%s", ".16\t"); 
    break;
  case 34:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VEXTd32, VEXTq32, VGETLNi32, V...
    SStream_concat(O, "%s", ".32\t"); 
    break;
  case 35:
    // VEXTq64, VLD1d64, VLD1d64Q, VLD1d64Qwb_fixed, VLD1d64Qwb_register, VLD...
    SStream_concat(O, "%s", ".64\t"); 
    break;
  case 36:
    // VLD1LNd16, VLD1LNd16_UPD, VLD2LNd16, VLD2LNd16_UPD, VLD2LNq16, VLD2LNq...
    SStream_concat(O, "%s", ".16\t{"); 
    break;
  case 37:
    // VLD1LNd32, VLD1LNd32_UPD, VLD2LNd32, VLD2LNd32_UPD, VLD2LNq32, VLD2LNq...
    SStream_concat(O, "%s", ".32\t{"); 
    break;
  case 38:
    // VLD1LNd8, VLD1LNd8_UPD, VLD2LNd8, VLD2LNd8_UPD, VLD3DUPd8, VLD3DUPd8_U...
    SStream_concat(O, "%s", ".8\t{"); 
    break;
  case 39:
    // VMSR
    SStream_concat(O, "%s", "\tfpscr, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 40:
    // VMSR_FPEXC
    SStream_concat(O, "%s", "\tfpexc, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 41:
    // VMSR_FPINST
    SStream_concat(O, "%s", "\tfpinst, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 42:
    // VMSR_FPINST2
    SStream_concat(O, "%s", "\tfpinst2, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 43:
    // VMSR_FPSID
    SStream_concat(O, "%s", "\tfpsid, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 44:
    // VMULLp8, VMULpd, VMULpq
    SStream_concat(O, "%s", ".p8\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    return;
    break;
  case 45:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    SStream_concat(O, "%s", ".s64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 46:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    SStream_concat(O, "%s", ".u64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 47:
    // VSHTOD
    SStream_concat(O, "%s", ".f64.s16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 48:
    // VSHTOS
    SStream_concat(O, "%s", ".f32.s16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 49:
    // VSITOD, VSLTOD
    SStream_concat(O, "%s", ".f64.s32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // VTOSHD
    SStream_concat(O, "%s", ".s16.f64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 51:
    // VTOSHS
    SStream_concat(O, "%s", ".s16.f32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 52:
    // VTOSIRD, VTOSIZD, VTOSLD
    SStream_concat(O, "%s", ".s32.f64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 53:
    // VTOUHD
    SStream_concat(O, "%s", ".u16.f64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 54:
    // VTOUHS
    SStream_concat(O, "%s", ".u16.f32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 55:
    // VTOUIRD, VTOUIZD, VTOULD
    SStream_concat(O, "%s", ".u32.f64\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // VUHTOD
    SStream_concat(O, "%s", ".f64.u16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 57:
    // VUHTOS
    SStream_concat(O, "%s", ".f32.u16\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 58:
    // VUITOD, VULTOD
    SStream_concat(O, "%s", ".f64.u32\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    break;
  case 59:
    // t2ADCrr, t2ADCrs, t2ADDri, t2ADDrr, t2ADDrs, t2ADR, t2ANDrr, t2ANDrs, ...
    SStream_concat(O, "%s", ".w\t"); 
    break;
  case 60:
    // t2SRSDB, t2SRSIA
    SStream_concat(O, "%s", "\tsp, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 61:
    // t2SRSDB_UPD, t2SRSIA_UPD
    SStream_concat(O, "%s", "\tsp!, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 62:
    // t2SUBS_PC_LR
    SStream_concat(O, "%s", "\tpc, lr, "); 
    printOperand(MI, 0, O); 
    return;
    break;
  case 63:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    SStream_concat(O, "%s", "\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 64:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    SStream_concat(O, "%s", "\t"); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 2 encoded into 6 bits for 57 unique commands.
  //printf("Frag-2: %"PRIu64"\n", (Bits >> 24) & 63);
  switch ((Bits >> 24) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    printOperand(MI, 0, O); 
    break;
  case 1:
    // AESD, AESE, MCR2, MCRR2, MRRC2, SHA1C, SHA1M, SHA1P, SHA1SU0, SHA1SU1,...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AESIMC, AESMC, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, CRC32W, FLDM...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // CDP, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OP...
    printPImmediate(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 4:
    // CDP2
    printCImmediate(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 5, O); 
    return;
    break;
  case 5:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIFlag(MI, 1, O); 
    break;
  case 6:
    // FCONSTD, FCONSTS, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VACGEd...
    SStream_concat(O, "%s", ", "); 
    break;
  case 7:
    // ITasm, t2IT
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // LDAEXD, LDRD_PAIR, LDREXD, STRD_PAIR
    printGPRPairOperand(MI, 0, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 9:
    // LDC2L_OFFSET, LDC2_OFFSET, STC2L_OFFSET, STC2_OFFSET
    printAddrMode5Operand(MI, 2, O, false); 
    return;
    break;
  case 10:
    // LDC2L_OPTION, LDC2L_POST, LDC2_OPTION, LDC2_POST, STC2L_OPTION, STC2L_...
    printAddrMode7Operand(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 11:
    // LDC2L_PRE, LDC2_PRE, STC2L_PRE, STC2_PRE
    printAddrMode5Operand(MI, 2, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 12:
    // MRC, t2MRC, t2MRC2
    printPImmediate(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 5, O); 
    return;
    break;
  case 13:
    // MSR, MSRi, t2MSR_AR, t2MSR_M
    printMSRMaskOperand(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    SStream_concat(O, "%s", ", #0"); 
    return;
    break;
  case 16:
    // VCVTf2sd, VCVTf2sq, VCVTf2ud, VCVTf2uq, VCVTs2fd, VCVTs2fq, VCVTu2fd, ...
    return;
    break;
  case 17:
    // VLD1DUPd16, VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32, VLD...
    printVectorListOneAllLanes(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 18:
    // VLD1DUPq16, VLD1DUPq16wb_fixed, VLD1DUPq16wb_register, VLD1DUPq32, VLD...
    printVectorListTwoAllLanes(MI, 0, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 19:
    // VLD1d16, VLD1d16wb_fixed, VLD1d16wb_register, VLD1d32, VLD1d32wb_fixed...
    printVectorListOne(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 20:
    // VLD1d16Q, VLD1d16Qwb_fixed, VLD1d16Qwb_register, VLD1d32Q, VLD1d32Qwb_...
    printVectorListFour(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 21:
    // VLD1d16T, VLD1d16Twb_fixed, VLD1d16Twb_register, VLD1d32T, VLD1d32Twb_...
    printVectorListThree(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 22:
    // VLD1q16, VLD1q16wb_fixed, VLD1q16wb_register, VLD1q32, VLD1q32wb_fixed...
    printVectorListTwo(MI, 0, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 23:
    // VLD2DUPd16x2, VLD2DUPd16x2wb_fixed, VLD2DUPd16x2wb_register, VLD2DUPd3...
    printVectorListTwoSpacedAllLanes(MI, 0, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 24:
    // VLD2b16, VLD2b16wb_fixed, VLD2b16wb_register, VLD2b32, VLD2b32wb_fixed...
    printVectorListTwoSpaced(MI, 0, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 25:
    // VLD3DUPdAsm_16, VLD3DUPdAsm_32, VLD3DUPdAsm_8, VLD3DUPdWB_fixed_Asm_16...
    printVectorListThreeAllLanes(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 26:
    // VLD3DUPqAsm_16, VLD3DUPqAsm_32, VLD3DUPqAsm_8, VLD3DUPqWB_fixed_Asm_16...
    printVectorListThreeSpacedAllLanes(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 27:
    // VLD3qAsm_16, VLD3qAsm_32, VLD3qAsm_8, VLD3qWB_fixed_Asm_16, VLD3qWB_fi...
    printVectorListThreeSpaced(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 28:
    // VLD4DUPdAsm_16, VLD4DUPdAsm_32, VLD4DUPdAsm_8, VLD4DUPdWB_fixed_Asm_16...
    printVectorListFourAllLanes(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 29:
    // VLD4DUPqAsm_16, VLD4DUPqAsm_32, VLD4DUPqAsm_8, VLD4DUPqWB_fixed_Asm_16...
    printVectorListFourSpacedAllLanes(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 30:
    // VLD4qAsm_16, VLD4qAsm_32, VLD4qAsm_8, VLD4qWB_fixed_Asm_16, VLD4qWB_fi...
    printVectorListFourSpaced(MI, 0, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 31:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST2LNd16_UPD, VST2LNd32_U...
    printOperand(MI, 4, O); 
    break;
  case 32:
    // VST1d16, VST1d32, VST1d64, VST1d8
    printVectorListOne(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 33:
    // VST1d16Q, VST1d32Q, VST1d64Q, VST1d8Q, VST2q16, VST2q32, VST2q8
    printVectorListFour(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 34:
    // VST1d16Qwb_fixed, VST1d32Qwb_fixed, VST1d64Qwb_fixed, VST1d8Qwb_fixed,...
    printVectorListFour(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 35:
    // VST1d16Qwb_register, VST1d32Qwb_register, VST1d64Qwb_register, VST1d8Q...
    printVectorListFour(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 36:
    // VST1d16T, VST1d32T, VST1d64T, VST1d8T
    printVectorListThree(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 37:
    // VST1d16Twb_fixed, VST1d32Twb_fixed, VST1d64Twb_fixed, VST1d8Twb_fixed
    printVectorListThree(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 38:
    // VST1d16Twb_register, VST1d32Twb_register, VST1d64Twb_register, VST1d8T...
    printVectorListThree(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 39:
    // VST1d16wb_fixed, VST1d32wb_fixed, VST1d64wb_fixed, VST1d8wb_fixed
    printVectorListOne(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 40:
    // VST1d16wb_register, VST1d32wb_register, VST1d64wb_register, VST1d8wb_r...
    printVectorListOne(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 41:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST2d16, VST2d32, VST2d8
    printVectorListTwo(MI, 2, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 42:
    // VST1q16wb_fixed, VST1q32wb_fixed, VST1q64wb_fixed, VST1q8wb_fixed, VST...
    printVectorListTwo(MI, 3, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 43:
    // VST1q16wb_register, VST1q32wb_register, VST1q64wb_register, VST1q8wb_r...
    printVectorListTwo(MI, 4, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 44:
    // VST2b16, VST2b32, VST2b8
    printVectorListTwoSpaced(MI, 2, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 45:
    // VST2b16wb_fixed, VST2b32wb_fixed, VST2b8wb_fixed
    printVectorListTwoSpaced(MI, 3, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 46:
    // VST2b16wb_register, VST2b32wb_register, VST2b8wb_register
    printVectorListTwoSpaced(MI, 4, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode6Operand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 47:
    // t2DMB, t2DSB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 48:
    // t2ISB
    printInstSyncBOption(MI, 0, O); 
    return;
    break;
  case 49:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand(MI, 0, O, false); 
    return;
    break;
  case 50:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand(MI, 0, O, false); 
    return;
    break;
  case 51:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, O); 
    return;
    break;
  case 52:
    // t2PLDpci, t2PLIpci
    printThumbLdrLabelOperand(MI, 0, O); 
    return;
    break;
  case 53:
    // t2TBB
    printAddrModeTBB(MI, 0, O); 
    return;
    break;
  case 54:
    // t2TBH
    printAddrModeTBH(MI, 0, O); 
    return;
    break;
  case 55:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tORR, tROR, tS...
    printOperand(MI, 3, O); 
    return;
    break;
  case 56:
    // tPOP, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 30 unique commands.
  //printf("Frag-3: %"PRIu64"\n", (Bits >> 30) & 31);
  switch ((Bits >> 30) & 31) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    SStream_concat(O, "%s", ", "); 
    break;
  case 1:
    // AESD, AESE, AESIMC, AESMC, BLX_pred, BL_pred, BXJ, BX_pred, Bcc, CPS2p...
    return;
    break;
  case 2:
    // CDP, MCR, MCRR, MRRC, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VA...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // FCONSTD, FCONSTS, VMOVv2f32, VMOVv4f32
    printFPImmOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    SStream_concat(O, "%s", "!, "); 
    printRegisterList(MI, 4, O); 
    break;
  case 5:
    // LDAEXD, LDREXD
    printAddrMode7Operand(MI, 1, O); 
    return;
    break;
  case 6:
    // LDC2L_OPTION, LDC2_OPTION, STC2L_OPTION, STC2_OPTION
    printCoprocOptionImm(MI, 3, O); 
    return;
    break;
  case 7:
    // LDC2L_POST, LDC2_POST, STC2L_POST, STC2_POST
    printPostIdxImm8s4Operand(MI, 3, O); 
    return;
    break;
  case 8:
    // LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OPTION,...
    printCImmediate(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 9:
    // LDRD_PAIR, STRD_PAIR
    printAddrMode3Operand(MI, 1, O, false); 
    return;
    break;
  case 10:
    // MRS, t2MRS_AR
    SStream_concat(O, "%s", ", apsr"); 
    return;
    break;
  case 11:
    // MRSsys, t2MRSsys_AR
    SStream_concat(O, "%s", ", spsr"); 
    return;
    break;
  case 12:
    // VCEQzv16i8, VCEQzv2i32, VCEQzv4i16, VCEQzv4i32, VCEQzv8i16, VCEQzv8i8,...
    SStream_concat(O, "%s", ", #0"); 
    return;
    break;
  case 13:
    // VCVTf2xsd, VCVTf2xsq, VCVTf2xud, VCVTf2xuq, VCVTxs2fd, VCVTxs2fq, VCVT...
    printOperand(MI, 2, O); 
    break;
  case 14:
    // VGETLNs16, VGETLNs8, VGETLNu16, VGETLNu8
    printVectorIndex(MI, 2, O); 
    return;
    break;
  case 15:
    // VLD1DUPd16, VLD1DUPd32, VLD1DUPd8, VLD1DUPq16, VLD1DUPq32, VLD1DUPq8, ...
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 16:
    // VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32wb_fixed, VLD1DUP...
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 17:
    // VLD1LNd16, VLD1LNd16_UPD, VLD1LNd32, VLD1LNd32_UPD, VLD1LNd8, VLD1LNd8...
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    break;
  case 18:
    // VLD3DUPd16, VLD3DUPd16_UPD, VLD3DUPd32, VLD3DUPd32_UPD, VLD3DUPd8, VLD...
    SStream_concat(O, "%s", "[], "); 
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", "[], "); 
    printOperand(MI, 2, O); 
    break;
  case 19:
    // VLD3DUPdWB_fixed_Asm_16, VLD3DUPdWB_fixed_Asm_32, VLD3DUPdWB_fixed_Asm...
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 20:
    // VMRS
    SStream_concat(O, "%s", ", fpscr"); 
    return;
    break;
  case 21:
    // VMRS_FPEXC
    SStream_concat(O, "%s", ", fpexc"); 
    return;
    break;
  case 22:
    // VMRS_FPINST
    SStream_concat(O, "%s", ", fpinst"); 
    return;
    break;
  case 23:
    // VMRS_FPINST2
    SStream_concat(O, "%s", ", fpinst2"); 
    return;
    break;
  case 24:
    // VMRS_FPSID
    SStream_concat(O, "%s", ", fpsid"); 
    return;
    break;
  case 25:
    // VMRS_MVFR0
    SStream_concat(O, "%s", ", mvfr0"); 
    return;
    break;
  case 26:
    // VMRS_MVFR1
    SStream_concat(O, "%s", ", mvfr1"); 
    return;
    break;
  case 27:
    // VMRS_MVFR2
    SStream_concat(O, "%s", ", mvfr2"); 
    return;
    break;
  case 28:
    // VSETLNi16, VSETLNi32, VSETLNi8
    printVectorIndex(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    return;
    break;
  case 29:
    // VSLTOD, VSLTOS, VTOSLD, VTOSLS, VTOULD, VTOULS, VULTOD, VULTOS
    printFBits32(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 62 unique commands.
  //printf("Frag-4: %"PRIu64"\n", (Bits >> 35) & 63);
  switch ((Bits >> 35) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ANDri, ANDrr, ANDrsi, ASRi...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADR, t2ADR
    printAdrLabelOperand(MI, 1, O, 0); 
    return;
    break;
  case 2:
    // BFC, t2BFC
    printBitfieldInvMaskImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // BFI, CPS3p, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, CRC32W, MOVTi16...
    printOperand(MI, 2, O); 
    break;
  case 4:
    // CDP, MCR, MCRR, MRRC, VABDfd, VABDfq, VACGEd, VACGEq, VACGTd, VACGTq, ...
    SStream_concat(O, "%s", ", "); 
    break;
  case 5:
    // CMNzrsi, CMPrsi, MOVsi, MVNsi, TEQrsi, TSTrsi
    printSORegImmOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // CMNzrsr, CMPrsr, MOVsr, MVNsr, TEQrsr, TSTrsr, t2MOVSsr, t2MOVsr
    printSORegRegOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    return;
    break;
  case 8:
    // FLDMXIA, FSTMXIA, LDMDA, LDMDB, LDMIA, LDMIB, STMDA, STMDB, STMIA, STM...
    printRegisterList(MI, 3, O); 
    break;
  case 9:
    // LDA, LDAB, LDAEX, LDAEXB, LDAEXH, LDAH, LDRBT_POST, LDREX, LDREXB, LDR...
    printAddrMode7Operand(MI, 1, O); 
    return;
    break;
  case 10:
    // LDCL_OFFSET, LDC_OFFSET, STCL_OFFSET, STC_OFFSET, t2LDC2L_OFFSET, t2LD...
    printAddrMode5Operand(MI, 2, O, false); 
    return;
    break;
  case 11:
    // LDCL_OPTION, LDCL_POST, LDC_OPTION, LDC_POST, LDRBT_POST_IMM, LDRBT_PO...
    printAddrMode7Operand(MI, 2, O); 
    break;
  case 12:
    // LDCL_PRE, LDC_PRE, STCL_PRE, STC_PRE, t2LDC2L_PRE, t2LDC2_PRE, t2LDCL_...
    printAddrMode5Operand(MI, 2, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 13:
    // LDRB_PRE_IMM, LDR_PRE_IMM, STRB_PRE_IMM, STR_PRE_IMM
    printAddrModeImm12Operand(MI, 2, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 14:
    // LDRB_PRE_REG, LDR_PRE_REG, STRB_PRE_REG, STR_PRE_REG
    printAddrMode2Operand(MI, 2, O); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 15:
    // LDRBi12, LDRcp, LDRi12, STRBi12, STRi12, t2LDRBi12, t2LDRHi12, t2LDRSB...
    printAddrModeImm12Operand(MI, 1, O, false); 
    return;
    break;
  case 16:
    // LDRBrs, LDRrs, STRBrs, STRrs
    printAddrMode2Operand(MI, 1, O); 
    return;
    break;
  case 17:
    // LDRH, LDRSB, LDRSH, STRH
    printAddrMode3Operand(MI, 1, O, false); 
    return;
    break;
  case 18:
    // LDRH_PRE, LDRSB_PRE, LDRSH_PRE, STRH_PRE
    printAddrMode3Operand(MI, 2, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 19:
    // MCR2
    printCImmediate(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 5, O); 
    return;
    break;
  case 20:
    // MCRR2, MRRC2, SHA1C, SHA1M, SHA1P, SHA1SU0, SHA256H, SHA256H2, SHA256S...
    printOperand(MI, 3, O); 
    break;
  case 21:
    // SSAT, SSAT16, t2SSAT, t2SSAT16
    printImmPlusOneOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    break;
  case 22:
    // STLEXD, STREXD
    printGPRPairOperand(MI, 1, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printAddrMode7Operand(MI, 2, O); 
    return;
    break;
  case 23:
    // VCEQzv2f32, VCEQzv4f32, VCGEzv2f32, VCGEzv4f32, VCGTzv2f32, VCGTzv4f32...
    SStream_concat(O, "%s", ", #0"); 
    return;
    break;
  case 24:
    // VLD1DUPd16wb_fixed, VLD1DUPd32wb_fixed, VLD1DUPd8wb_fixed, VLD1DUPq16w...
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 25:
    // VLD1LNd16, VLD1LNd32, VLD1LNd8, VST2LNd16, VST2LNd32, VST2LNd8, VST2LN...
    printNoHashImmediate(MI, 4, O); 
    break;
  case 26:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printNoHashImmediate(MI, 6, O); 
    break;
  case 27:
    // VLD1LNdAsm_16, VLD1LNdAsm_32, VLD1LNdAsm_8, VLD1LNdWB_fixed_Asm_16, VL...
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 28:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printNoHashImmediate(MI, 8, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    break;
  case 29:
    // VLD3DUPd16, VLD3DUPd16_UPD, VLD3DUPd32, VLD3DUPd32_UPD, VLD3DUPd8, VLD...
    SStream_concat(O, "%s", "[]}, "); 
    break;
  case 30:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printNoHashImmediate(MI, 10, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 10, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 10, O); 
    break;
  case 31:
    // VLD4DUPd16, VLD4DUPd16_UPD, VLD4DUPd32, VLD4DUPd32_UPD, VLD4DUPd8, VLD...
    SStream_concat(O, "%s", "[], "); 
    printOperand(MI, 3, O); 
    SStream_concat(O, "%s", "[]}, "); 
    break;
  case 32:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printNoHashImmediate(MI, 12, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 12, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 12, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 3, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 12, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case 33:
    // VLDRD, VLDRS, VSTRD, VSTRS
    printAddrMode5Operand(MI, 1, O, false); 
    return;
    break;
  case 34:
    // VST1LNd16, VST1LNd32, VST1LNd8
    printNoHashImmediate(MI, 3, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 35:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST3LNd16, VST3LNd32, VST3...
    printNoHashImmediate(MI, 5, O); 
    break;
  case 36:
    // VST3LNd16_UPD, VST3LNd32_UPD, VST3LNd8_UPD, VST3LNq16_UPD, VST3LNq32_U...
    printNoHashImmediate(MI, 7, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 5, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 7, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 6, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 7, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 37:
    // VST3d16_UPD, VST3d32_UPD, VST3d8_UPD, VST3q16_UPD, VST3q32_UPD, VST3q8...
    printOperand(MI, 5, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 6, O); 
    break;
  case 38:
    // VTBL1
    printVectorListOne(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    return;
    break;
  case 39:
    // VTBL2
    printVectorListTwo(MI, 1, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    return;
    break;
  case 40:
    // VTBL3
    printVectorListThree(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    return;
    break;
  case 41:
    // VTBL4
    printVectorListFour(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 2, O); 
    return;
    break;
  case 42:
    // VTBX1
    printVectorListOne(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 43:
    // VTBX2
    printVectorListTwo(MI, 2, O, MRI); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 44:
    // VTBX3
    printVectorListThree(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 45:
    // VTBX4
    printVectorListFour(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 3, O); 
    return;
    break;
  case 46:
    // sysLDMDA_UPD, sysLDMDB_UPD, sysLDMIA_UPD, sysLDMIB_UPD, sysSTMDA_UPD, ...
    SStream_concat(O, "%s", " ^"); 
    return;
    break;
  case 47:
    // t2CMNzrs, t2CMPrs, t2MOVSsi, t2MOVsi, t2MVNs, t2TEQrs, t2TSTrs
    printT2SOOperand(MI, 1, O); 
    return;
    break;
  case 48:
    // t2LDRBT, t2LDRBi8, t2LDRHT, t2LDRHi8, t2LDRSBT, t2LDRSBi8, t2LDRSHT, t...
    printT2AddrModeImm8Operand(MI, 1, O, false); 
    return;
    break;
  case 49:
    // t2LDRB_PRE, t2LDRH_PRE, t2LDRSB_PRE, t2LDRSH_PRE, t2LDR_PRE, t2STRB_PR...
    printT2AddrModeImm8Operand(MI, 2, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 50:
    // t2LDRBpci, t2LDRHpci, t2LDRSBpci, t2LDRSHpci, t2LDRpci, tLDRpci
    printThumbLdrLabelOperand(MI, 1, O); 
    return;
    break;
  case 51:
    // t2LDRBs, t2LDRHs, t2LDRSBs, t2LDRSHs, t2LDRs, t2STRBs, t2STRHs, t2STRs
    printT2AddrModeSoRegOperand(MI, 1, O); 
    return;
    break;
  case 52:
    // t2LDREX
    printT2AddrModeImm0_1020s4Operand(MI, 1, O); 
    return;
    break;
  case 53:
    // t2MRS_M
    printMSRMaskOperand(MI, 1, O); 
    return;
    break;
  case 54:
    // tADDspi, tSUBspi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  case 55:
    // tADR
    printAdrLabelOperand(MI, 1, O, 2); 
    return;
    break;
  case 56:
    // tASRri, tLSRri
    printThumbSRImm(MI, 3, O); 
    return;
    break;
  case 57:
    // tLDRBi, tSTRBi
    printThumbAddrModeImm5S1Operand(MI, 1, O); 
    return;
    break;
  case 58:
    // tLDRBr, tLDRHr, tLDRSB, tLDRSH, tLDRr, tSTRBr, tSTRHr, tSTRr
    printThumbAddrModeRROperand(MI, 1, O); 
    return;
    break;
  case 59:
    // tLDRHi, tSTRHi
    printThumbAddrModeImm5S2Operand(MI, 1, O); 
    return;
    break;
  case 60:
    // tLDRi, tSTRi
    printThumbAddrModeImm5S4Operand(MI, 1, O); 
    return;
    break;
  case 61:
    // tLDRspi, tSTRspi
    printThumbAddrModeSPOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 5 bits for 23 unique commands.
  //printf("Frag-5: %"PRIu64"\n", (Bits >> 41) & 31);
  switch ((Bits >> 41) & 31) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ANDri, ANDrr, ANDrsi, ASRi...
    SStream_concat(O, "%s", ", "); 
    break;
  case 1:
    // CDP, t2CDP, t2CDP2
    printCImmediate(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 5, O); 
    return;
    break;
  case 2:
    // CLZ, CMNri, CMNzrr, CMPri, CMPrr, CPS3p, CRC32B, CRC32CB, CRC32CH, CRC...
    return;
    break;
  case 3:
    // MCR, MCRR, MRRC, VABDfd, VABDfq, VACGEd, VACGEq, VACGTd, VACGTq, VADDD...
    printOperand(MI, 2, O); 
    break;
  case 4:
    // SSAT, t2SSAT
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case 5:
    // SXTB, SXTB16, SXTH, UXTB, UXTB16, UXTH, t2SXTB, t2SXTB16, t2SXTH, t2UX...
    printRotImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // VDUPLN16d, VDUPLN16q, VDUPLN32d, VDUPLN32q, VDUPLN8d, VDUPLN8q, VGETLN...
    printVectorIndex(MI, 2, O); 
    return;
    break;
  case 7:
    // VFMAD, VFMAS, VFMAfd, VFMAfq, VFMSD, VFMSS, VFMSfd, VFMSfq, VFNMAD, VF...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // VLD1DUPd16wb_register, VLD1DUPd32wb_register, VLD1DUPd8wb_register, VL...
    printOperand(MI, 4, O); 
    return;
    break;
  case 9:
    // VLD1LNd16, VLD1LNd16_UPD, VLD1LNd32, VLD1LNd32_UPD, VLD1LNd8, VLD1LNd8...
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    break;
  case 10:
    // VLD1LNdWB_fixed_Asm_16, VLD1LNdWB_fixed_Asm_32, VLD1LNdWB_fixed_Asm_8,...
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 11:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16, VLD2LNq32, VLD4LNd16, VLD4L...
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    break;
  case 12:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 8, O); 
    break;
  case 13:
    // VLD3DUPd16, VLD3DUPd32, VLD3DUPd8, VLD3DUPq16, VLD3DUPq32, VLD3DUPq8
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case 14:
    // VLD3DUPd16_UPD, VLD3DUPd32_UPD, VLD3DUPd8_UPD, VLD3DUPq16_UPD, VLD3DUP...
    printAddrMode6Operand(MI, 4, O); 
    break;
  case 15:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case 16:
    // VMLALslsv2i32, VMLALslsv4i16, VMLALsluv2i32, VMLALsluv4i16, VMLAslv2i3...
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case 17:
    // VMULLslsv2i32, VMULLslsv4i16, VMULLsluv2i32, VMULLsluv4i16, VMULslv2i3...
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case 18:
    // VST3d16_UPD, VST3d32_UPD, VST3d8_UPD, VST3q16_UPD, VST3q32_UPD, VST3q8...
    SStream_concat(O, "%s", "}, "); 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 19:
    // VST4LNd16_UPD, VST4LNd32_UPD, VST4LNd8_UPD, VST4LNq16_UPD, VST4LNq32_U...
    printOperand(MI, 5, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 8, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 6, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 8, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 7, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 8, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 20:
    // sysLDMDA, sysLDMDB, sysLDMIA, sysLDMIB, sysSTMDA, sysSTMDB, sysSTMIA, ...
    SStream_concat(O, "%s", " ^"); 
    return;
    break;
  case 21:
    // t2LDRB_POST, t2LDRH_POST, t2LDRSB_POST, t2LDRSH_POST, t2LDR_POST, t2ST...
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    return;
    break;
  case 22:
    // t2MOVsra_flag, t2MOVsrl_flag
    SStream_concat(O, "%s", ", #1"); 
    return;
    break;
  }


  // Fragment 6 encoded into 6 bits for 35 unique commands.
  //printf("Frag-6: %"PRIu64"\n", (Bits >> 46) & 63);
  switch ((Bits >> 46) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, ORRrsi, RSBrsi, RSCrsi, SBCrsi...
    printSORegImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // BFI, t2BFI
    printBitfieldInvMaskImmOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // LDCL_OPTION, LDC_OPTION, STCL_OPTION, STC_OPTION, t2LDC2L_OPTION, t2LD...
    printCoprocOptionImm(MI, 3, O); 
    return;
    break;
  case 4:
    // LDCL_POST, LDC_POST, STCL_POST, STC_POST, t2LDC2L_POST, t2LDC2_POST, t...
    printPostIdxImm8s4Operand(MI, 3, O); 
    return;
    break;
  case 5:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRT_POS...
    printAddrMode2OffsetOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // LDRD, STRD
    printAddrMode3Operand(MI, 2, O, false); 
    return;
    break;
  case 7:
    // LDRD_POST, STRD_POST, t2LDRD_POST, t2STRD_POST
    printAddrMode7Operand(MI, 3, O); 
    break;
  case 8:
    // LDRD_PRE, STRD_PRE
    printAddrMode3Operand(MI, 3, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 9:
    // LDRHTi, LDRSBTi, LDRSHTi, STRHTi
    printPostIdxImm8Operand(MI, 3, O); 
    return;
    break;
  case 10:
    // LDRHTr, LDRSBTr, LDRSHTr, STRHTr
    printPostIdxRegOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // LDRH_POST, LDRSB_POST, LDRSH_POST, STRH_POST
    printAddrMode3OffsetOperand(MI, 3, O); 
    return;
    break;
  case 12:
    // MCR, MCRR, MRRC, t2MCR, t2MCR2, t2MCRR, t2MCRR2, t2MRRC, t2MRRC2
    SStream_concat(O, "%s", ", "); 
    break;
  case 13:
    // MCRR2, MRRC2
    printCImmediate(MI, 4, O); 
    return;
    break;
  case 14:
    // STLEX, STLEXB, STLEXH, STREX, STREXB, STREXH, SWP, SWPB, t2LDAEXD, t2L...
    printAddrMode7Operand(MI, 2, O); 
    return;
    break;
  case 15:
    // VABDfd, VABDfq, VACGEd, VACGEq, VACGTd, VACGTq, VADDD, VADDS, VADDfd, ...
    return;
    break;
  case 16:
    // VBIFd, VBIFq, VBITd, VBITq, VBSLd, VBSLq, VLD4LNd16, VLD4LNd32, VLD4LN...
    printOperand(MI, 3, O); 
    break;
  case 17:
    // VLD1LNd16, VLD1LNd32, VLD1LNd8, VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8...
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 18:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case 19:
    // VLD1LNdWB_register_Asm_16, VLD1LNdWB_register_Asm_32, VLD1LNdWB_regist...
    printOperand(MI, 4, O); 
    break;
  case 20:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16, VLD2LNq32
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 6, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case 21:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case 22:
    // VLD3DUPd16_UPD, VLD3DUPd32_UPD, VLD3DUPd8_UPD, VLD3DUPq16_UPD, VLD3DUP...
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case 23:
    // VLD3LNd16, VLD3LNd32, VLD3LNd8, VLD3LNq16, VLD3LNq32
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 8, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case 24:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case 25:
    // VMLAslfd, VMLAslfq, VMLSslfd, VMLSslfq
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case 26:
    // VMULslfd, VMULslfq
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case 27:
    // VST2LNd16_UPD, VST2LNd32_UPD, VST2LNd8_UPD, VST2LNq16_UPD, VST2LNq32_U...
    printOperand(MI, 5, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 6, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 28:
    // VST4d16_UPD, VST4d32_UPD, VST4d8_UPD, VST4q16_UPD, VST4q32_UPD, VST4q8...
    printOperand(MI, 7, O); 
    SStream_concat(O, "%s", "}, "); 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 29:
    // t2ADCrs, t2ADDrs, t2ANDrs, t2BICrs, t2EORrs, t2ORNrs, t2ORRrs, t2RSBrs...
    printT2SOOperand(MI, 2, O); 
    return;
    break;
  case 30:
    // t2ASRri, t2LSRri
    printThumbSRImm(MI, 2, O); 
    return;
    break;
  case 31:
    // t2LDRD_PRE, t2STRD_PRE
    printT2AddrModeImm8s4Operand(MI, 3, O, true); 
    SStream_concat(O, "%s", "!"); 
    return;
    break;
  case 32:
    // t2LDRDi8, t2STRDi8
    printT2AddrModeImm8s4Operand(MI, 2, O, false); 
    return;
    break;
  case 33:
    // t2STREX
    printT2AddrModeImm0_1020s4Operand(MI, 2, O); 
    return;
    break;
  case 34:
    // tADDrSPi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 4 bits for 12 unique commands.
  //printf("Frag-7: %"PRIu64"\n", (Bits >> 52) & 15);
  switch ((Bits >> 52) & 15) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    return;
    break;
  case 1:
    // LDRD_POST, MLA, MLS, SBFX, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SML...
    SStream_concat(O, "%s", ", "); 
    break;
  case 2:
    // MCR, t2MCR, t2MCR2
    printCImmediate(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 5, O); 
    return;
    break;
  case 3:
    // MCRR, MRRC, t2MCRR, t2MCRR2, t2MRRC, t2MRRC2
    printOperand(MI, 3, O); 
    SStream_concat(O, "%s", ", "); 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case 4:
    // PKHBT, t2PKHBT
    printPKHLSLShiftImm(MI, 3, O); 
    return;
    break;
  case 5:
    // PKHTB, t2PKHTB
    printPKHASRShiftImm(MI, 3, O); 
    return;
    break;
  case 6:
    // SXTAB, SXTAB16, SXTAH, UXTAB, UXTAB16, UXTAH, t2SXTAB, t2SXTAB16, t2SX...
    printRotImmOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // USAT, t2USAT
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case 8:
    // VLD3d16, VLD3d16_UPD, VLD3d32, VLD3d32_UPD, VLD3d8, VLD3d8_UPD, VLD3q1...
    SStream_concat(O, "%s", "}, "); 
    break;
  case 9:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16, VLD4LNq32, VST2LNd16, VST2L...
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    break;
  case 10:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // t2LDRD_POST, t2STRD_POST
    printT2AddrModeImm8s4OffsetOperand(MI, 4, O); 
    return;
    break;
  }


  // Fragment 8 encoded into 4 bits for 13 unique commands.
  //printf("Frag-8: %"PRIu64"\n", (Bits >> 56) & 15);
  switch ((Bits >> 56) & 15) {
  default:   // unreachable.
  case 0:
    // LDRD_POST, STRD_POST
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case 1:
    // MLA, MLS, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SMLALBT, SMLALD, SML...
    printOperand(MI, 3, O); 
    break;
  case 2:
    // SBFX, UBFX, t2SBFX, t2UBFX
    printImmPlusOneOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // VLD3d16, VLD3d32, VLD3d8, VLD3q16, VLD3q32, VLD3q8
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case 4:
    // VLD3d16_UPD, VLD3d32_UPD, VLD3d8_UPD, VLD3q16_UPD, VLD3q32_UPD, VLD3q8...
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case 5:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16, VLD4LNq32
    printNoHashImmediate(MI, 10, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case 6:
    // VST2LNd16, VST2LNd32, VST2LNd8, VST2LNq16, VST2LNq32
    printNoHashImmediate(MI, 4, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 7:
    // VST3LNd16, VST3LNd32, VST3LNd8, VST3LNq16, VST3LNq32
    printNoHashImmediate(MI, 5, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 4, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 5, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 8:
    // VST3d16, VST3d32, VST3d8, VST3q16, VST3q32, VST3q8
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 9:
    // VST4LNd16, VST4LNd32, VST4LNd8, VST4LNq16, VST4LNq32
    printNoHashImmediate(MI, 6, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 4, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 6, O); 
    SStream_concat(O, "%s", "], "); 
    set_mem_access(MI, false);
    printOperand(MI, 5, O); 
    SStream_concat(O, "%s", "["); 
    set_mem_access(MI, true);
    printNoHashImmediate(MI, 6, O); 
    SStream_concat(O, "%s", "]}, "); 
    set_mem_access(MI, false);
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 10:
    // VST4d16, VST4d32, VST4d8, VST4q16, VST4q32, VST4q8
    printOperand(MI, 5, O); 
    SStream_concat(O, "%s", "}, "); 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 11:
    // t2SMLSLDX
    printOperand(MI, 2, O); 
    return;
    break;
  case 12:
    // t2STLEXD, t2STREXD
    printAddrMode7Operand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 9 encoded into 1 bits for 2 unique commands.
  //printf("Frag-9: %"PRIu64"\n", (Bits >> 60) & 1);
  if ((Bits >> 60) & 1) {
    // VLD4d16, VLD4d16_UPD, VLD4d32, VLD4d32_UPD, VLD4d8, VLD4d8_UPD, VLD4q1...
    SStream_concat(O, "%s", "}, "); 
  } else {
    // MLA, MLS, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SMLALBT, SMLALD, SML...
    return;
  }


  // Fragment 10 encoded into 1 bits for 2 unique commands.
  //printf("Frag-10: %"PRIu64"\n", (Bits >> 61) & 1);
  if ((Bits >> 61) & 1) {
    // VLD4d16_UPD, VLD4d32_UPD, VLD4d8_UPD, VLD4q16_UPD, VLD4q32_UPD, VLD4q8...
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
  } else {
    // VLD4d16, VLD4d32, VLD4d8, VLD4q16, VLD4q32, VLD4q8
    printAddrMode6Operand(MI, 4, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static char *getRegisterName(unsigned RegNo)
{
  // assert(RegNo && RegNo < 289 && "Invalid register number!");

#ifndef CAPSTONE_DIET
  static char AsmStrs[] = {
  /* 0 */ 'D', '4', '_', 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', 0,
  /* 13 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 26 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 39 */ 'd', '1', '0', 0,
  /* 43 */ 'q', '1', '0', 0,
  /* 47 */ 's', '1', '0', 0,
  /* 51 */ 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', 0,
  /* 67 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 83 */ 'd', '2', '0', 0,
  /* 87 */ 's', '2', '0', 0,
  /* 91 */ 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', '_', 'D', '3', '0', 0,
  /* 107 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 123 */ 'd', '3', '0', 0,
  /* 127 */ 's', '3', '0', 0,
  /* 131 */ 'd', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'm', 'v', 'f', 'r', '0', 0,
  /* 143 */ 's', '0', 0,
  /* 146 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 157 */ 'D', '5', '_', 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', 0,
  /* 170 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 184 */ 'R', '1', '0', '_', 'R', '1', '1', 0,
  /* 192 */ 'd', '1', '1', 0,
  /* 196 */ 'q', '1', '1', 0,
  /* 200 */ 's', '1', '1', 0,
  /* 204 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 216 */ 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', 0,
  /* 232 */ 'd', '2', '1', 0,
  /* 236 */ 's', '2', '1', 0,
  /* 240 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 252 */ 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', '_', 'D', '3', '1', 0,
  /* 268 */ 'd', '3', '1', 0,
  /* 272 */ 's', '3', '1', 0,
  /* 276 */ 'Q', '0', '_', 'Q', '1', 0,
  /* 282 */ 'R', '0', '_', 'R', '1', 0,
  /* 288 */ 'd', '1', 0,
  /* 291 */ 'q', '1', 0,
  /* 294 */ 'm', 'v', 'f', 'r', '1', 0,
  /* 300 */ 's', '1', 0,
  /* 303 */ 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', 0,
  /* 317 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 332 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 347 */ 'd', '1', '2', 0,
  /* 351 */ 'q', '1', '2', 0,
  /* 355 */ 's', '1', '2', 0,
  /* 359 */ 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', 0,
  /* 375 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 391 */ 'd', '2', '2', 0,
  /* 395 */ 's', '2', '2', 0,
  /* 399 */ 'D', '0', '_', 'D', '2', 0,
  /* 405 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 414 */ 'Q', '1', '_', 'Q', '2', 0,
  /* 420 */ 'd', '2', 0,
  /* 423 */ 'q', '2', 0,
  /* 426 */ 'm', 'v', 'f', 'r', '2', 0,
  /* 432 */ 's', '2', 0,
  /* 435 */ 'f', 'p', 'i', 'n', 's', 't', '2', 0,
  /* 443 */ 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', 0,
  /* 457 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 469 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 485 */ 'd', '1', '3', 0,
  /* 489 */ 'q', '1', '3', 0,
  /* 493 */ 's', '1', '3', 0,
  /* 497 */ 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', 0,
  /* 513 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 525 */ 'd', '2', '3', 0,
  /* 529 */ 's', '2', '3', 0,
  /* 533 */ 'D', '1', '_', 'D', '3', 0,
  /* 539 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 548 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 560 */ 'R', '2', '_', 'R', '3', 0,
  /* 566 */ 'd', '3', 0,
  /* 569 */ 'q', '3', 0,
  /* 572 */ 'r', '3', 0,
  /* 575 */ 's', '3', 0,
  /* 578 */ 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', 0,
  /* 593 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 609 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 625 */ 'd', '1', '4', 0,
  /* 629 */ 'q', '1', '4', 0,
  /* 633 */ 's', '1', '4', 0,
  /* 637 */ 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', 0,
  /* 653 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 669 */ 'd', '2', '4', 0,
  /* 673 */ 's', '2', '4', 0,
  /* 677 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', 0,
  /* 686 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 698 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 710 */ 'd', '4', 0,
  /* 713 */ 'q', '4', 0,
  /* 716 */ 'r', '4', 0,
  /* 719 */ 's', '4', 0,
  /* 722 */ 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', 0,
  /* 737 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 749 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 765 */ 'd', '1', '5', 0,
  /* 769 */ 'q', '1', '5', 0,
  /* 773 */ 's', '1', '5', 0,
  /* 777 */ 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', 0,
  /* 793 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 805 */ 'd', '2', '5', 0,
  /* 809 */ 's', '2', '5', 0,
  /* 813 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', 0,
  /* 822 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 831 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 843 */ 'R', '4', '_', 'R', '5', 0,
  /* 849 */ 'd', '5', 0,
  /* 852 */ 'q', '5', 0,
  /* 855 */ 'r', '5', 0,
  /* 858 */ 's', '5', 0,
  /* 861 */ 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', 0,
  /* 877 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 893 */ 'd', '1', '6', 0,
  /* 897 */ 's', '1', '6', 0,
  /* 901 */ 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', 0,
  /* 917 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 933 */ 'd', '2', '6', 0,
  /* 937 */ 's', '2', '6', 0,
  /* 941 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', '_', 'D', '6', 0,
  /* 953 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 965 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 977 */ 'd', '6', 0,
  /* 980 */ 'q', '6', 0,
  /* 983 */ 'r', '6', 0,
  /* 986 */ 's', '6', 0,
  /* 989 */ 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', 0,
  /* 1005 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1017 */ 'd', '1', '7', 0,
  /* 1021 */ 's', '1', '7', 0,
  /* 1025 */ 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', 0,
  /* 1041 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1053 */ 'd', '2', '7', 0,
  /* 1057 */ 's', '2', '7', 0,
  /* 1061 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', '_', 'D', '7', 0,
  /* 1073 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1082 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1094 */ 'R', '6', '_', 'R', '7', 0,
  /* 1100 */ 'd', '7', 0,
  /* 1103 */ 'q', '7', 0,
  /* 1106 */ 'r', '7', 0,
  /* 1109 */ 's', '7', 0,
  /* 1112 */ 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', 0,
  /* 1128 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1144 */ 'd', '1', '8', 0,
  /* 1148 */ 's', '1', '8', 0,
  /* 1152 */ 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', 0,
  /* 1168 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1184 */ 'd', '2', '8', 0,
  /* 1188 */ 's', '2', '8', 0,
  /* 1192 */ 'D', '2', '_', 'D', '4', '_', 'D', '6', '_', 'D', '8', 0,
  /* 1204 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1216 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1228 */ 'd', '8', 0,
  /* 1231 */ 'q', '8', 0,
  /* 1234 */ 'r', '8', 0,
  /* 1237 */ 's', '8', 0,
  /* 1240 */ 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', 0,
  /* 1256 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1268 */ 'd', '1', '9', 0,
  /* 1272 */ 's', '1', '9', 0,
  /* 1276 */ 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', 0,
  /* 1292 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1304 */ 'd', '2', '9', 0,
  /* 1308 */ 's', '2', '9', 0,
  /* 1312 */ 'D', '3', '_', 'D', '5', '_', 'D', '7', '_', 'D', '9', 0,
  /* 1324 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1333 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1345 */ 'R', '8', '_', 'R', '9', 0,
  /* 1351 */ 'd', '9', 0,
  /* 1354 */ 'q', '9', 0,
  /* 1357 */ 's', '9', 0,
  /* 1360 */ 'R', '1', '2', '_', 'S', 'P', 0,
  /* 1367 */ 's', 'b', 0,
  /* 1370 */ 'p', 'c', 0,
  /* 1373 */ 'f', 'p', 'e', 'x', 'c', 0,
  /* 1379 */ 'f', 'p', 's', 'i', 'd', 0,
  /* 1385 */ 'i', 't', 's', 't', 'a', 't', 'e', 0,
  /* 1393 */ 's', 'l', 0,
  /* 1396 */ 'f', 'p', 0,
  /* 1399 */ 'i', 'p', 0,
  /* 1402 */ 's', 'p', 0,
  /* 1405 */ 'f', 'p', 's', 'c', 'r', 0,
  /* 1411 */ 'l', 'r', 0,
  /* 1414 */ 'a', 'p', 's', 'r', 0,
  /* 1419 */ 'c', 'p', 's', 'r', 0,
  /* 1424 */ 's', 'p', 's', 'r', 0,
  /* 1429 */ 'f', 'p', 'i', 'n', 's', 't', 0,
  /* 1436 */ 'f', 'p', 's', 'c', 'r', '_', 'n', 'z', 'c', 'v', 0,
  /* 1447 */ 'a', 'p', 's', 'r', '_', 'n', 'z', 'c', 'v', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    1414, 1447, 1419, 1373, 1429, 1405, 1436, 1379, 1385, 1411, 1370, 1402, 1424, 131, 
    288, 420, 566, 710, 849, 977, 1100, 1228, 1351, 39, 192, 347, 485, 625, 
    765, 893, 1017, 1144, 1268, 83, 232, 391, 525, 669, 805, 933, 1053, 1184, 
    1304, 123, 268, 435, 137, 294, 426, 134, 291, 423, 569, 713, 852, 980, 
    1103, 1231, 1354, 43, 196, 351, 489, 629, 769, 140, 297, 429, 572, 716, 
    855, 983, 1106, 1234, 1367, 1393, 1396, 1399, 143, 300, 432, 575, 719, 858, 
    986, 1109, 1237, 1357, 47, 200, 355, 493, 633, 773, 897, 1021, 1148, 1272, 
    87, 236, 395, 529, 673, 809, 937, 1057, 1188, 1308, 127, 272, 399, 533, 
    680, 816, 947, 1067, 1198, 1318, 6, 163, 309, 449, 585, 729, 869, 997, 
    1120, 1248, 59, 224, 367, 505, 645, 785, 909, 1033, 1160, 1284, 99, 260, 
    276, 414, 554, 704, 837, 971, 1088, 1222, 1339, 32, 176, 339, 477, 617, 
    757, 548, 698, 831, 965, 1082, 1216, 1333, 26, 170, 332, 469, 609, 749, 
    1360, 282, 560, 843, 1094, 1345, 184, 405, 539, 689, 822, 956, 1073, 1207, 
    1324, 16, 146, 320, 457, 597, 737, 881, 1005, 1132, 1256, 71, 204, 379, 
    513, 657, 793, 921, 1041, 1172, 1292, 111, 240, 677, 813, 944, 1064, 1195, 
    1315, 3, 160, 306, 446, 581, 725, 865, 993, 1116, 1244, 55, 220, 363, 
    501, 641, 781, 905, 1029, 1156, 1280, 95, 256, 941, 1061, 1192, 1312, 0, 
    157, 303, 443, 578, 722, 861, 989, 1112, 1240, 51, 216, 359, 497, 637, 
    777, 901, 1025, 1152, 1276, 91, 252, 408, 692, 959, 1210, 19, 324, 601, 
    885, 1136, 75, 383, 661, 925, 1176, 115, 686, 953, 1204, 13, 317, 593, 
    877, 1128, 67, 375, 653, 917, 1168, 107, 
  };

  //int i;
  //for (i = 0; i < sizeof(RegAsmOffset)/4; i++)
  //     printf("%s = %u\n", AsmStrs+RegAsmOffset[i], i + 1);
  //printf("*************************\n");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, SStream *OS, void *info)
{
  #define GETREGCLASS_CONTAIN(_class, _reg) MCRegisterClass_contains(MCRegisterInfo_getRegClass(MRI, _class), MCOperand_getReg(MCInst_getOperand(MI, _reg)))
  const char *AsmString;
  MCRegisterInfo *MRI = (MCRegisterInfo *)info;
  switch (MCInst_getOpcode(MI)) {
  default: return false;
  case ARM_BKPT:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0) {
      // (BKPT 0)
      AsmString = "bkpt";
      break;
    }
    return false;
  case ARM_DMB:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15) {
      // (DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM_DSB:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15) {
      // (DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM_ISB:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM_VRINTAD:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTAD DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f64.f64	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTAND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTAND DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f32.f32	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTANQ:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 1)) {
      // (VRINTANQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrinta.f32.f32	$Qd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTAS:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 1)) {
      // (VRINTAS SPR:$Sd, SPR:$Sm)
      AsmString = "vrinta.f32.f32	$Sd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTMD:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTMD DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f64.f64	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTMND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTMND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f32.f32	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTMNQ:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 1)) {
      // (VRINTMNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintm.f32.f32	$Qd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTMS:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 1)) {
      // (VRINTMS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintm.f32.f32	$Sd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f64.f64	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTNND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTNND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f32.f32	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTNNQ:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 1)) {
      // (VRINTNNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintn.f32.f32	$Qd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTNS:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 1)) {
      // (VRINTNS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintn.f32.f32	$Sd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTPD:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTPD DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f64.f64	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTPND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTPND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f32.f32	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTPNQ:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 1)) {
      // (VRINTPNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintp.f32.f32	$Qd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTPS:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_SPRRegClassID, 1)) {
      // (VRINTPS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintp.f32.f32	$Sd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTXND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTXND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintx.f32.f32	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTXNQ:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 1)) {
      // (VRINTXNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintx.f32.f32	$Qd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTZND:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_DPRRegClassID, 1)) {
      // (VRINTZND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintz.f32.f32	$Dd, $\x02";
      break;
    }
    return false;
  case ARM_VRINTZNQ:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(ARM_QPRRegClassID, 1)) {
      // (VRINTZNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintz.f32.f32	$Qd, $\x02";
      break;
    }
    return false;
  case ARM_tBKPT:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0) {
      // (tBKPT 0)
      AsmString = "bkpt";
      break;
    }
    return false;
  case ARM_tMOVr:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == ARM_R8 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == ARM_R8 &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 14 &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (tMOVr R8, R8, 14, 0)
      AsmString = "nop";
      break;
    }
    return false;
  }

  char *tmp = cs_strdup(AsmString), *AsmMnem, *AsmOps;
  AsmMnem = tmp;
  AsmOps = strchr(tmp, ' ');
  if (AsmOps) {
    *AsmOps = '\0';
    AsmOps += 1;
  }
  SStream_concat(OS, "%s", AsmMnem);
  if (AsmOps) {
    SStream_concat(OS, "\t");
    char *c;
    for (c = AsmOps; *c; c++) {
      if (*c == '$') {
        c += 1;
        printOperand(MI, *c - 1, OS);
      } else {
        SStream_concat(OS, "%c", *c);
      }
    }
  }
  cs_mem_free(tmp);
  return true;
}

#endif // PRINT_ALIAS_INSTR
